/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package lunacorpustools;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import Morphal.CountSuffix;
import Morphal.MorphSearchEngineExist;
import Tokenizer.SentenceTokeniserXML;
import Tokenizer.Standardisation;
import Tokenizer.TokeniserXML;
import Utilities.DataModels;
import static Utilities.DataModels.loadXMLFromString;
import XMLDatabase.Benutzer;
import XMLDatabase.DatabaseCodes;
import XMLDatabase.ExistDatabase;
import XmlEditor.XmlTextPane;
import cc.mallet.pipe.CharSequence2TokenSequence;
import cc.mallet.pipe.CharSequenceLowercase;
import cc.mallet.pipe.Pipe;
import cc.mallet.pipe.SerialPipes;
import cc.mallet.pipe.TokenSequence2FeatureSequence;
import cc.mallet.pipe.TokenSequenceRemoveStopwords;
import cc.mallet.pipe.iterator.StringArrayIterator;
import cc.mallet.topics.ParallelTopicModel;
import cc.mallet.topics.TopicInferencer;
import cc.mallet.types.InstanceList;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridLayout;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringReader;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.StringTokenizer;
import java.util.TreeMap;
import java.util.Vector;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import java.util.zip.ZipOutputStream;
import javax.swing.BoxLayout;
import javax.swing.ButtonGroup;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.JTextPane;
import javax.swing.JTree;
import javax.swing.SwingWorker;
import javax.swing.SwingWorker.StateValue;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.xpath.XPathExpressionException;
import lunacorpustools.POSTagger.TaggerXML;
import lunacorpustools.POSTrainer.TrainLexicon;
import lunacorpustools.POSTrainer.TrainMatrixXML;
import lunacorpustools.POSTrainer.TrainSentencePositions;
import lunacorpustools.POSTrainer.TrainSuffixXML;
import org.jdom2.Document;
import org.jdom2.JDOMException;
import org.jdom2.input.SAXBuilder;
import org.jdom2.output.Format;
import org.jdom2.output.XMLOutputter;
import org.jdom2.xpath.XPath;
import org.jdom2.xpath.XPathExpression;
import org.jdom2.xpath.XPathFactory;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import org.xmldb.api.base.ResourceIterator;
import org.xmldb.api.base.ResourceSet;
import org.xmldb.api.base.XMLDBException;
import org.xmldb.api.modules.XMLResource;
import wordList.SortedWordList;

/**
 *
 * @author joshgun.sirajzade
 */
public class NewMDIApplication extends javax.swing.JFrame {

    /**
     * Creates new form NewMDIApplication
     */
    public NewMDIApplication() {
          this.benutzer = new Benutzer();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        tokenizerTab = new javax.swing.JTabbedPane();
        plainTextTokenizer = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jTextFieldDelimeters = new javax.swing.JTextField();
        jTextFieldDelimeters.setText("!$\"\u00a3%^&*()_+=#{}[];:�`/?,. \t\n'");
        jTextFieldWortzeichen = new javax.swing.JTextField();
        jTextFieldNichtTrennbarePartikel = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jSplitPane3 = new javax.swing.JSplitPane();
        jPanel27 = new javax.swing.JPanel();
        jScrollPane27 = new javax.swing.JScrollPane();
        jTextPaneTokeniserQuelle = new javax.swing.JTextPane();
        jLabel13 = new javax.swing.JLabel();
        jButton8 = new javax.swing.JButton();
        jPanel28 = new javax.swing.JPanel();
        jScrollPane28 = new javax.swing.JScrollPane();
        jTextPaneTokeniserAusgabe = new javax.swing.JTextPane();
        jLabel14 = new javax.swing.JLabel();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        jButton11 = new javax.swing.JButton();
        jTextFielSatzzeichen = new javax.swing.JTextField();
        xmlTextTokenizer = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jTextFieldDelimetersXML = new javax.swing.JTextField();
        jTextFieldDelimeters.setText("!$\"\u00a3%^&*()_+=#{}[];:�`/?,. \t\n'");
        jTextFieldBedingtesZusammensetzenXML = new javax.swing.JTextField();
        jTextFieldBedingtesTrennenXML = new javax.swing.JTextField();
        jButton22 = new javax.swing.JButton();
        jButton23 = new javax.swing.JButton();
        jButton24 = new javax.swing.JButton();
        jSplitPane6 = new javax.swing.JSplitPane();
        jPanel44 = new javax.swing.JPanel();
        jScrollPane36 = new javax.swing.JScrollPane();
        jTextPaneXmlTokeniserQuelle = jTextPaneXmlTokeniserQuelle = new XmlTextPane();
        jLabel29 = new javax.swing.JLabel();
        jButton25 = new javax.swing.JButton();
        jButton38 = new javax.swing.JButton();
        jPanel45 = new javax.swing.JPanel();
        jScrollPane37 = new javax.swing.JScrollPane();
        jTextPaneXmlTokeniserAusgabe = jTextPaneXmlTokeniserAusgabe = new XmlTextPane();
        jLabel30 = new javax.swing.JLabel();
        jButton26 = new javax.swing.JButton();
        jButton27 = new javax.swing.JButton();
        jLabel32 = new javax.swing.JLabel();
        xmlElement = new javax.swing.JTextField();
        jLabel33 = new javax.swing.JLabel();
        elementInXmlElement = new javax.swing.JTextField();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        jLabel54 = new javax.swing.JLabel();
        sentenceSplitterTab = new javax.swing.JPanel();
        jSplitPane8 = new javax.swing.JSplitPane();
        jPanel53 = new javax.swing.JPanel();
        jLabel51 = new javax.swing.JLabel();
        jButton40 = new javax.swing.JButton();
        jScrollPane44 = new javax.swing.JScrollPane();
        jTextPaneSentenceSplitter = jTextPaneSentenceSplitter = new XmlTextPane();
        jPanel54 = new javax.swing.JPanel();
        jLabel52 = new javax.swing.JLabel();
        jButton41 = new javax.swing.JButton();
        splitSentenceButton = new javax.swing.JButton();
        jScrollPane45 = new javax.swing.JScrollPane();
        jTextPaneSentenceSplitterOutput = jTextPaneSentenceSplitterOutput = new XmlTextPane();
        jProgressBarSentenceSplitter = new javax.swing.JProgressBar();
        jButton34 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jTextFieldSentenceSplitterTrenner = new javax.swing.JTextField();
        jLabel47 = new javax.swing.JLabel();
        jTextFieldSentenceSplitterTextBody = new javax.swing.JTextField();
        jLabel50 = new javax.swing.JLabel();
        jTextFieldSentenceSplitterXmlElement = new javax.swing.JTextField();
        standardisationTab = new javax.swing.JPanel();
        jSplitPane9 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane47 = new javax.swing.JScrollPane();
        jTextPaneStandardisationInput = new XmlTextPane();
        jButton44 = new javax.swing.JButton();
        jLabel48 = new javax.swing.JLabel();
        jButton45 = new javax.swing.JButton();
        jPanel22 = new javax.swing.JPanel();
        jScrollPane49 = new javax.swing.JScrollPane();
        jTextPaneStandardisationOutput = new XmlTextPane();
        jButtonSpeichernDatenbankStand = new javax.swing.JButton();
        jButton51 = new javax.swing.JButton();
        jScrollPane48 = new javax.swing.JScrollPane();
        regExForSandard = new javax.swing.JTable();
        jButtonStandardisationExecute = new javax.swing.JButton();
        jButtonStandardisationTest = new javax.swing.JButton();
        jButtonDeleteRow = new javax.swing.JButton();
        jButtonAddRow = new javax.swing.JButton();
        jButtonStandardisationSave = new javax.swing.JButton();
        jButtonStandardisationLoad = new javax.swing.JButton();
        jProgressBarStandardisation = new javax.swing.JProgressBar();
        posTrainerTab = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldTagset = new javax.swing.JTextField();
        jTextFieldTokenElemente = new javax.swing.JTextField();
        jTextFieldPOSAttribute = new javax.swing.JTextField();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel26 = new javax.swing.JPanel();
        jTabbedPane9 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPaneZumTrainieren = jTextPaneZumTrainieren = new XmlTextPane();
        jLabel4 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButtonOpenDatabaseTrainer = new javax.swing.JButton();
        jButtonTrainerToDatabase = new javax.swing.JButton();
        jPanel29 = new javax.swing.JPanel();
        jScrollPane53 = new javax.swing.JScrollPane();
        jTreeTrainingsdata = new javax.swing.JTree();
        jPanel3 = new javax.swing.JPanel();
        jTabbedPane4 = new javax.swing.JTabbedPane();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane2 = new javax.swing.JTextPane();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextPane3 = new javax.swing.JTextPane();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextPane4 = new javax.swing.JTextPane();
        jPanel11 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextPane5 = new javax.swing.JTextPane();
        jPanel4 = new javax.swing.JPanel();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTextPane6 = new javax.swing.JTextPane();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTextPane7 = new javax.swing.JTextPane();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTextPane8 = new javax.swing.JTextPane();
        jPanel12 = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTextPane9 = new javax.swing.JTextPane();
        jTabbedPane6 = new javax.swing.JTabbedPane();
        jScrollPane21 = new javax.swing.JScrollPane();
        jTextPane21 = new javax.swing.JTextPane();
        jScrollPane23 = new javax.swing.JScrollPane();
        jTextPane23 = new javax.swing.JTextPane();
        jScrollPane22 = new javax.swing.JScrollPane();
        jTextPane22 = new javax.swing.JTextPane();
        jTabbedPane5 = new javax.swing.JTabbedPane();
        jPanel13 = new javax.swing.JPanel();
        jScrollPaneTrainerModelSuffix = new javax.swing.JScrollPane();
        jTextPaneSuffix = new javax.swing.JTextPane();
        jPanel14 = new javax.swing.JPanel();
        jScrollPaneTrainerModelUpperCase = new javax.swing.JScrollPane();
        jTextPaneGross = new javax.swing.JTextPane();
        jPanel15 = new javax.swing.JPanel();
        jScrollPane12 = new javax.swing.JScrollPane();
        jTextPaneKlein = new javax.swing.JTextPane();
        jPanel16 = new javax.swing.JPanel();
        jScrollPane13 = new javax.swing.JScrollPane();
        jTextPaneWordLength = new javax.swing.JTextPane();
        jPanel17 = new javax.swing.JPanel();
        jTabbedPane7 = new javax.swing.JTabbedPane();
        jPanel18 = new javax.swing.JPanel();
        jScrollPane17 = new javax.swing.JScrollPane();
        jTextPaneTrigrammLeft = new javax.swing.JTextPane();
        jPanel19 = new javax.swing.JPanel();
        jScrollPane16 = new javax.swing.JScrollPane();
        jTextPaneTrigrammMiddle = new javax.swing.JTextPane();
        jPanel20 = new javax.swing.JPanel();
        jScrollPane15 = new javax.swing.JScrollPane();
        jTextPaneBigrammLeft = new javax.swing.JTextPane();
        jPanel21 = new javax.swing.JPanel();
        jScrollPane14 = new javax.swing.JScrollPane();
        jTextPaneBigrammRight = new javax.swing.JTextPane();
        jTabbedPane8 = new javax.swing.JTabbedPane();
        jScrollPane24 = new javax.swing.JScrollPane();
        jTextPaneSatzPositionAnfang = new javax.swing.JTextPane();
        jScrollPane25 = new javax.swing.JScrollPane();
        jTextPaneSatzPositionEnde = new javax.swing.JTextPane();
        jScrollPane26 = new javax.swing.JScrollPane();
        jTextPaneLexikon = new javax.swing.JTextPane();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldSuffixe = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jTextField5SatzElement = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel24 = new javax.swing.JLabel();
        jTextFieldSatzNummerAttr = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        jTextFieldPunktToken = new javax.swing.JTextField();
        trainerProgressBar = new javax.swing.JProgressBar();
        jCheckBoxVerwendeDatanbank = new javax.swing.JCheckBox();
        jButtonSaveModelPOSTrainer = new javax.swing.JButton();
        jButtonLoadModelPOSTrainer = new javax.swing.JButton();
        jButtonSaveModelPOSTrainerLocal = new javax.swing.JButton();
        jButtonLoadModelPOSTrainerLocal = new javax.swing.JButton();
        taggerTab = new javax.swing.JPanel();
        jSplitPane2 = new javax.swing.JSplitPane();
        jPanel23 = new javax.swing.JPanel();
        jTabbedPane12 = new javax.swing.JTabbedPane();
        jPanel30 = new javax.swing.JPanel();
        jButton29 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jButton35 = new javax.swing.JButton();
        jScrollPane18 = new javax.swing.JScrollPane();
        jTextPaneTaggerInput = jTextPaneTaggerInput = new XmlTextPane();
        jButton28 = new javax.swing.JButton();
        jPanel35 = new javax.swing.JPanel();
        jScrollPane54 = new javax.swing.JScrollPane();
        jTreeZuTaggendeTexte = new javax.swing.JTree();
        jPanel24 = new javax.swing.JPanel();
        jScrollPane19 = new javax.swing.JScrollPane();
        jTextPaneTaggerOutPut = jTextPaneTaggerOutPut = new XmlTextPane();
        jLabel8 = new javax.swing.JLabel();
        jButton36 = new javax.swing.JButton();
        jButton39 = new javax.swing.JButton();
        jPanel25 = new javax.swing.JPanel();
        jScrollPane20 = new javax.swing.JScrollPane();
        jTextPane10 = jTextPane10 = new XmlTextPane();
        jRadioButtonTaggingsprozess = new javax.swing.JRadioButton();
        jRadioButtonSuffix = new javax.swing.JRadioButton();
        jRadioButtonGross = new javax.swing.JRadioButton();
        jRadioButtonKlein = new javax.swing.JRadioButton();
        jRadioButtonWordLenght = new javax.swing.JRadioButton();
        jRadioButtonSatzPositionAnfang = new javax.swing.JRadioButton();
        jRadioButtonTrigrammLeft = new javax.swing.JRadioButton();
        jRadioButtonTrigrammRight = new javax.swing.JRadioButton();
        jRadioButtonBigrammLeft = new javax.swing.JRadioButton();
        jRadioButtonRight = new javax.swing.JRadioButton();
        jButtonTaggen = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jRadioButtonSatzPositionEnde = new javax.swing.JRadioButton();
        jRadioButtonLexikon = new javax.swing.JRadioButton();
        jProgressBarTagger = new javax.swing.JProgressBar();
        jButtonTaggenDatabase = new javax.swing.JButton();
        jButtonTaggenFromModelDatabse = new javax.swing.JButton();
        jButtonTagDatabaseFromDBModel = new javax.swing.JButton();
        frequencyTab = new javax.swing.JPanel();
        jSplitPane4 = new javax.swing.JSplitPane();
        jPanel31 = new javax.swing.JPanel();
        jScrollPane29 = new javax.swing.JScrollPane();
        jTextPane19 = jTextPane19 = new XmlTextPane();
        jLabel16 = new javax.swing.JLabel();
        jButton12 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jPanel32 = new javax.swing.JPanel();
        jTabbedPane10 = new javax.swing.JTabbedPane();
        jPanel33 = new javax.swing.JPanel();
        jScrollPane31 = new javax.swing.JScrollPane();
        jTextPane25 = new javax.swing.JTextPane();
        jScrollPane30 = new javax.swing.JScrollPane();
        jTextPane24 = jTextPane24 = new XmlTextPane();
        jPanel34 = new javax.swing.JPanel();
        jButton14 = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        concordanceTab = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        jScrollPane35 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jButton19 = new javax.swing.JButton();
        jLabel22 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        morphologicalAnalysisTab = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jTextFieldPrefix = new javax.swing.JTextField();
        jTextFieldSuffix = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jLabel40 = new javax.swing.JLabel();
        jTextField8 = new javax.swing.JTextField();
        jSplitPane7 = new javax.swing.JSplitPane();
        jPanel47 = new javax.swing.JPanel();
        jTabbedPaneMorphNavigation = new javax.swing.JTabbedPane();
        jScrollPane43 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jScrollPane50 = new javax.swing.JScrollPane();
        Gesamtkorpus = new javax.swing.JTree();
        jPanel52 = new javax.swing.JPanel();
        jScrollPane39 = new javax.swing.JScrollPane();
        jTextPaneMorph = jTextPaneMorph = new XmlTextPane();
        jLabel42 = new javax.swing.JLabel();
        jButton30 = new javax.swing.JButton();
        jButton31 = new javax.swing.JButton();
        jScrollPane40 = new javax.swing.JScrollPane();
        jPanelStichworte = new javax.swing.JPanel();
        jPanel48 = new javax.swing.JPanel();
        jTabbedPaneMorphal = new javax.swing.JTabbedPane();
        jPanel49 = new javax.swing.JPanel();
        jPanel51 = new javax.swing.JPanel();
        jButtonMorphalSave = new javax.swing.JButton();
        jScrollPane42 = new javax.swing.JScrollPane();
        affixGUI = new javax.swing.JPanel();
        jButton37 = new javax.swing.JButton();
        jButton43 = new javax.swing.JButton();
        jButton20 = new javax.swing.JButton();
        jScrollPane41 = new javax.swing.JScrollPane();
        jTextPane30 = jTextPane24 = new XmlTextPane();
        jPanel50 = new javax.swing.JPanel();
        jScrollPane46 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jButton32 = new javax.swing.JButton();
        jComboBoxAffixArt = new javax.swing.JComboBox();
        jComboBoxWortKlassen = new javax.swing.JComboBox();
        jButton33 = new javax.swing.JButton();
        jButtonSuchenDatabase = new javax.swing.JButton();
        jProgressBarMorphal = new javax.swing.JProgressBar();
        jButton46 = new javax.swing.JButton();
        jButtonSuchenStichworte = new javax.swing.JButton();
        jButtonAnnotationSuche = new javax.swing.JButton();
        TopicModelingTab = new javax.swing.JTabbedPane();
        extractTopics = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jTextFieldNumberOfTopics = new javax.swing.JTextField();
        jButton15 = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        jTextFieldNumberOfIterations = new javax.swing.JTextField();
        jButton16 = new javax.swing.JButton();
        jSplitPane5 = new javax.swing.JSplitPane();
        jTabbedPane11 = new javax.swing.JTabbedPane();
        jPanel36 = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        jTextPaneTextForLDA = jTextPaneTextForLDA = new XmlTextPane();  ;
        jButton18 = new javax.swing.JButton();
        jButton52 = new javax.swing.JButton();
        jPanel38 = new javax.swing.JPanel();
        jScrollPane32 = new javax.swing.JScrollPane();
        jTreeDatabaseForTopicModelling = new javax.swing.JTree();
        jTabbedPane14 = new javax.swing.JTabbedPane();
        jScrollPane11 = new javax.swing.JScrollPane();
        jTextPaneTopicModelingOutput = jTextPaneTopicModelingOutput = new XmlTextPane();

        ;
        jButton17 = new javax.swing.JButton();
        jButtonExtractTopicsFromDatabase = new javax.swing.JButton();
        jPanel37 = new javax.swing.JPanel();
        jPanel55 = new javax.swing.JPanel();
        corpusManagementTab = new javax.swing.JTabbedPane();
        jPanelDatabase = new javax.swing.JPanel();
        jButtonAffixeZeigen = new javax.swing.JButton();
        jLabel49 = new javax.swing.JLabel();
        jComboBoxUserName = new javax.swing.JComboBox();
        jLabel53 = new javax.swing.JLabel();
        jComboBoxSuffix = new javax.swing.JComboBox();
        jButton42 = new javax.swing.JButton();
        jScrollPane51 = new javax.swing.JScrollPane();
        databaseGUI = new javax.swing.JPanel();
        corpusManagmentTab = new javax.swing.JPanel();
        jButton21 = new javax.swing.JButton();
        jScrollPane38 = new javax.swing.JScrollPane();
        jPanel42 = new javax.swing.JPanel();
        jPanel40 = new javax.swing.JPanel();
        jTextFieldRegEx = new javax.swing.JTextField();
        jButtonSucheRegEx = new javax.swing.JButton();
        jSplitPane10 = new javax.swing.JSplitPane();
        jPanel41 = new javax.swing.JPanel();
        jScrollPaneRegExStichworte = new javax.swing.JScrollPane();
        jPanelRegExStichworte = new javax.swing.JPanel();
        jPanel43 = new javax.swing.JPanel();
        jTabbedPane13 = new javax.swing.JTabbedPane();
        jScrollPaneRegExKontext = new javax.swing.JScrollPane();
        jPanelRegexKontext = new javax.swing.JPanel();
        jScrollPaneRegexDetail = new javax.swing.JScrollPane();
        jPanelRegexDetail = new javax.swing.JPanel();
        jTextFieldWortklasseRegex = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        jLabel55 = new javax.swing.JLabel();
        jProgressBarRegExSuche = new javax.swing.JProgressBar();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        jTextFieldPrefixSearchAnnations = new javax.swing.JTextField();
        jTextFieldSuffixSearchAnnotations = new javax.swing.JTextField();
        jButton47 = new javax.swing.JButton();
        jButton48 = new javax.swing.JButton();
        jButton49 = new javax.swing.JButton();
        jButton50 = new javax.swing.JButton();
        jPanel46 = new javax.swing.JPanel();
        jLabel38 = new javax.swing.JLabel();
        jTextFieldFugenElement = new javax.swing.JTextField();
        jSplitPane11 = new javax.swing.JSplitPane();
        jScrollPaneKompositaRight = new javax.swing.JScrollPane();
        jPanelKompositaRight = new javax.swing.JPanel();
        jScrollPaneKompositaLeft = new javax.swing.JScrollPane();
        jPanelKompositaLeft = new javax.swing.JPanel();
        jButtonKompositaSearch = new javax.swing.JButton();
        jProgressBarKomposita = new javax.swing.JProgressBar();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Luna Corpus Tools");

        jLabel10.setText("Delimeters (word breakers):");

        jLabel11.setText("Wortzeichen (Keine Worttrenner):");

        jLabel12.setText("Nicht trennbare Partikel:");

        jTextFieldDelimeters.setEditable(false);

        jTextFieldWortzeichen.setEditable(false);

        jTextFieldNichtTrennbarePartikel.setEditable(false);

        jButton5.setText("ändern");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("ändern");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("ändern");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jSplitPane3.setDividerLocation(355);

        jScrollPane27.setViewportView(jTextPaneTokeniserQuelle);

        jLabel13.setText("Quelltext:");

        jButton8.setText("Quelltext öffnen");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel27Layout = new javax.swing.GroupLayout(jPanel27);
        jPanel27.setLayout(jPanel27Layout);
        jPanel27Layout.setHorizontalGroup(
            jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane27, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel27Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 175, Short.MAX_VALUE)
                .addComponent(jButton8)
                .addContainerGap())
        );
        jPanel27Layout.setVerticalGroup(
            jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel27Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(jButton8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane27, javax.swing.GroupLayout.DEFAULT_SIZE, 543, Short.MAX_VALUE))
        );

        jSplitPane3.setLeftComponent(jPanel27);

        jScrollPane28.setViewportView(jTextPaneTokeniserAusgabe);

        jLabel14.setText("Ausgabetext:");

        jButton9.setText("Ausgabetext speichern");

        jButton10.setText("Tokenise");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel28Layout = new javax.swing.GroupLayout(jPanel28);
        jPanel28.setLayout(jPanel28Layout);
        jPanel28Layout.setHorizontalGroup(
            jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel28Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 673, Short.MAX_VALUE)
                .addComponent(jButton10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton9)
                .addGap(5, 5, 5))
            .addGroup(jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane28, javax.swing.GroupLayout.DEFAULT_SIZE, 1062, Short.MAX_VALUE))
        );
        jPanel28Layout.setVerticalGroup(
            jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel28Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton9)
                    .addComponent(jLabel14)
                    .addComponent(jButton10))
                .addContainerGap(548, Short.MAX_VALUE))
            .addGroup(jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel28Layout.createSequentialGroup()
                    .addGap(36, 36, 36)
                    .addComponent(jScrollPane28, javax.swing.GroupLayout.DEFAULT_SIZE, 549, Short.MAX_VALUE)))
        );

        jSplitPane3.setRightComponent(jPanel28);

        jLabel15.setText("Satzzeichen:");

        jButton11.setText("ändern");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jTextFielSatzzeichen.setEditable(false);

        javax.swing.GroupLayout plainTextTokenizerLayout = new javax.swing.GroupLayout(plainTextTokenizer);
        plainTextTokenizer.setLayout(plainTextTokenizerLayout);
        plainTextTokenizerLayout.setHorizontalGroup(
            plainTextTokenizerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(plainTextTokenizerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(plainTextTokenizerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSplitPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1428, Short.MAX_VALUE)
                    .addGroup(plainTextTokenizerLayout.createSequentialGroup()
                        .addGroup(plainTextTokenizerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12)
                            .addComponent(jLabel15))
                        .addGap(17, 17, 17)
                        .addGroup(plainTextTokenizerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(plainTextTokenizerLayout.createSequentialGroup()
                                .addGroup(plainTextTokenizerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldNichtTrennbarePartikel)
                                    .addComponent(jTextFieldWortzeichen)
                                    .addComponent(jTextFieldDelimeters))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(plainTextTokenizerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton5)
                                    .addComponent(jButton6)
                                    .addComponent(jButton7)))
                            .addGroup(plainTextTokenizerLayout.createSequentialGroup()
                                .addComponent(jTextFielSatzzeichen)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton11)))))
                .addContainerGap())
        );
        plainTextTokenizerLayout.setVerticalGroup(
            plainTextTokenizerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(plainTextTokenizerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(plainTextTokenizerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jTextFieldDelimeters, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5))
                .addGap(18, 18, 18)
                .addGroup(plainTextTokenizerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jTextFieldWortzeichen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton6))
                .addGap(18, 18, 18)
                .addGroup(plainTextTokenizerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jTextFieldNichtTrennbarePartikel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton7))
                .addGap(16, 16, 16)
                .addGroup(plainTextTokenizerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(jButton11)
                    .addComponent(jTextFielSatzzeichen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSplitPane3)
                .addContainerGap())
        );

        tokenizerTab.addTab("Tokenize from a text file", plainTextTokenizer);
        plainTextTokenizer.getAccessibleContext().setAccessibleName("");

        jLabel26.setText("delimeters (word breakers):");

        jLabel27.setText("regex for exceptions:");

        jLabel28.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel28.setText("regex for breakers:");

        jTextFieldDelimetersXML.setEditable(false);
        jTextFieldDelimetersXML.setText("!$\\\"%^&*()_+=#{}[];:`/?,.° „ ”«»“…");
        jTextFieldDelimetersXML.setToolTipText("");
        jTextFieldDelimetersXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldDelimetersXMLActionPerformed(evt);
            }
        });

        jTextFieldBedingtesZusammensetzenXML.setEditable(false);
        jTextFieldBedingtesZusammensetzenXML.setText("Dr (\\\\.)->Dr$1");

        jTextFieldBedingtesTrennenXML.setEditable(false);
        jTextFieldBedingtesTrennenXML.setText("(d|D)’(?!n\\b)->$1’ ");

        jButton22.setText("edit");
        jButton22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton22ActionPerformed(evt);
            }
        });

        jButton23.setText("edit");
        jButton23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton23ActionPerformed(evt);
            }
        });

        jButton24.setText("edit");
        jButton24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton24ActionPerformed(evt);
            }
        });

        jSplitPane6.setDividerLocation(450);
        jSplitPane6.setPreferredSize(new java.awt.Dimension(1044, 600));

        jScrollPane36.setViewportView(jTextPaneXmlTokeniserQuelle);

        jLabel29.setText("input text:");

        jButton25.setText("open from hard drive");
        jButton25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton25ActionPerformed(evt);
            }
        });

        jButton38.setText("open from database");
        jButton38.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton38ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel44Layout = new javax.swing.GroupLayout(jPanel44);
        jPanel44.setLayout(jPanel44Layout);
        jPanel44Layout.setHorizontalGroup(
            jPanel44Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane36, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel44Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel29)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton38)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton25)
                .addContainerGap())
        );
        jPanel44Layout.setVerticalGroup(
            jPanel44Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel44Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel44Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel29)
                    .addComponent(jButton25)
                    .addComponent(jButton38))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane36, javax.swing.GroupLayout.DEFAULT_SIZE, 501, Short.MAX_VALUE))
        );

        jSplitPane6.setLeftComponent(jPanel44);

        jScrollPane37.setViewportView(jTextPaneXmlTokeniserAusgabe);

        jLabel30.setText("output text:");

        jButton26.setText("save local");

        jButton27.setText("tokenize");
        jButton27.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton27ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel45Layout = new javax.swing.GroupLayout(jPanel45);
        jPanel45.setLayout(jPanel45Layout);
        jPanel45Layout.setHorizontalGroup(
            jPanel45Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel45Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel30)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 671, Short.MAX_VALUE)
                .addComponent(jButton27)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton26)
                .addGap(5, 5, 5))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel45Layout.createSequentialGroup()
                .addComponent(jScrollPane37)
                .addContainerGap())
        );
        jPanel45Layout.setVerticalGroup(
            jPanel45Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel45Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel45Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton27)
                    .addComponent(jButton26)
                    .addComponent(jLabel30))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane37, javax.swing.GroupLayout.DEFAULT_SIZE, 501, Short.MAX_VALUE))
        );

        jSplitPane6.setRightComponent(jPanel45);

        jLabel32.setText("xpath to element:");

        xmlElement.setText("//body");
        xmlElement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xmlElementActionPerformed(evt);
            }
        });

        jLabel33.setText("elements to exclude:");

        elementInXmlElement.setText("foottext");
        elementInXmlElement.setToolTipText("");

        jLabel54.setIcon(new javax.swing.ImageIcon(getClass().getResource("/XmlEditor/blue-question-mark-icon.png"))); // NOI18N
        jLabel54.setToolTipText("<html>Bitte geben Sie <i>Reguläre Ausdrücke</i> ein, um die Ausgabe der Standardtokenisierung anzupassen. <br/>\nEs können mehrere AUsdrücke eingegeben werden. Diese werden mit <b>&&</b> von einander getrennt. <br/>\nJeder Ausdruck besteht aus zwei teilen. 1) Suchstring 2) Ersetzen bzw. Trennen. Diese zwei werden <br/>\n mit einem <b>-></b> verbunden!</html>");
        jLabel54.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel54MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout xmlTextTokenizerLayout = new javax.swing.GroupLayout(xmlTextTokenizer);
        xmlTextTokenizer.setLayout(xmlTextTokenizerLayout);
        xmlTextTokenizerLayout.setHorizontalGroup(
            xmlTextTokenizerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(xmlTextTokenizerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(xmlTextTokenizerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSplitPane6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1428, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, xmlTextTokenizerLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1024, 1024, 1024)
                        .addComponent(filler2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(xmlTextTokenizerLayout.createSequentialGroup()
                        .addGroup(xmlTextTokenizerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel26)
                            .addComponent(jLabel27)
                            .addComponent(jLabel32)
                            .addComponent(jLabel33)
                            .addGroup(xmlTextTokenizerLayout.createSequentialGroup()
                                .addComponent(jLabel28)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel54)))
                        .addGap(14, 14, 14)
                        .addGroup(xmlTextTokenizerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(xmlTextTokenizerLayout.createSequentialGroup()
                                .addGroup(xmlTextTokenizerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldBedingtesTrennenXML)
                                    .addComponent(jTextFieldBedingtesZusammensetzenXML)
                                    .addComponent(jTextFieldDelimetersXML))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(xmlTextTokenizerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton22)
                                    .addComponent(jButton23)
                                    .addComponent(jButton24)))
                            .addGroup(xmlTextTokenizerLayout.createSequentialGroup()
                                .addGroup(xmlTextTokenizerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(elementInXmlElement)
                                    .addComponent(xmlElement))
                                .addGap(77, 77, 77)))))
                .addContainerGap())
        );
        xmlTextTokenizerLayout.setVerticalGroup(
            xmlTextTokenizerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(xmlTextTokenizerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(xmlTextTokenizerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(jTextFieldDelimetersXML, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton22))
                .addGap(18, 18, 18)
                .addGroup(xmlTextTokenizerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27)
                    .addComponent(jTextFieldBedingtesZusammensetzenXML, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton23))
                .addGap(18, 18, 18)
                .addGroup(xmlTextTokenizerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel54, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(xmlTextTokenizerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel28)
                        .addComponent(jTextFieldBedingtesTrennenXML, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton24)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(xmlTextTokenizerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel32)
                    .addComponent(xmlElement, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(xmlTextTokenizerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(elementInXmlElement, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel33))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filler2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jSplitPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 546, Short.MAX_VALUE))
        );

        tokenizerTab.addTab("Tokenize from XML-file", xmlTextTokenizer);

        jTabbedPane1.addTab("Tokenize", tokenizerTab);
        tokenizerTab.setSelectedIndex(1);

        jSplitPane8.setDividerLocation(355);
        jSplitPane8.setPreferredSize(new java.awt.Dimension(1044, 600));

        jLabel51.setText("input text:");

        jButton40.setText("get from tokenizer");
        jButton40.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton40ActionPerformed(evt);
            }
        });

        jScrollPane44.setViewportView(jTextPaneSentenceSplitter);

        javax.swing.GroupLayout jPanel53Layout = new javax.swing.GroupLayout(jPanel53);
        jPanel53.setLayout(jPanel53Layout);
        jPanel53Layout.setHorizontalGroup(
            jPanel53Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel53Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel51)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 114, Short.MAX_VALUE)
                .addComponent(jButton40)
                .addContainerGap())
            .addComponent(jScrollPane44, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel53Layout.setVerticalGroup(
            jPanel53Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel53Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel53Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel51)
                    .addComponent(jButton40))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane44, javax.swing.GroupLayout.DEFAULT_SIZE, 645, Short.MAX_VALUE))
        );

        jSplitPane8.setLeftComponent(jPanel53);

        jLabel52.setText("output text:");

        jButton41.setText("save local");
        jButton41.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton41ActionPerformed(evt);
            }
        });

        splitSentenceButton.setText("splitt");
        splitSentenceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                splitSentenceButtonActionPerformed(evt);
            }
        });

        jScrollPane45.setViewportView(jTextPaneSentenceSplitterOutput);

        jButton34.setText("save database");
        jButton34.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton34ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel54Layout = new javax.swing.GroupLayout(jPanel54);
        jPanel54.setLayout(jPanel54Layout);
        jPanel54Layout.setHorizontalGroup(
            jPanel54Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel54Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel52)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 514, Short.MAX_VALUE)
                .addComponent(jProgressBarSentenceSplitter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(splitSentenceButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton34)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton41)
                .addGap(5, 5, 5))
            .addComponent(jScrollPane45)
        );
        jPanel54Layout.setVerticalGroup(
            jPanel54Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel54Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel54Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel54Layout.createSequentialGroup()
                        .addComponent(jProgressBarSentenceSplitter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5))
                    .addGroup(jPanel54Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(splitSentenceButton)
                        .addComponent(jButton41)
                        .addComponent(jLabel52)
                        .addComponent(jButton34)))
                .addComponent(jScrollPane45, javax.swing.GroupLayout.DEFAULT_SIZE, 651, Short.MAX_VALUE))
        );

        jSplitPane8.setRightComponent(jPanel54);

        jLabel7.setText("splitters:");

        jTextFieldSentenceSplitterTrenner.setText(";:.?!");

        jLabel47.setText("xpath to element:");

        jTextFieldSentenceSplitterTextBody.setText("//body");

        jLabel50.setText("tokens and characters:");

        jTextFieldSentenceSplitterXmlElement.setText("//w | //c ");

        javax.swing.GroupLayout sentenceSplitterTabLayout = new javax.swing.GroupLayout(sentenceSplitterTab);
        sentenceSplitterTab.setLayout(sentenceSplitterTabLayout);
        sentenceSplitterTabLayout.setHorizontalGroup(
            sentenceSplitterTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sentenceSplitterTabLayout.createSequentialGroup()
                .addGroup(sentenceSplitterTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(sentenceSplitterTabLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSplitPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 1449, Short.MAX_VALUE))
                    .addGroup(sentenceSplitterTabLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(sentenceSplitterTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel47)
                            .addComponent(jLabel50))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(sentenceSplitterTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldSentenceSplitterTrenner)
                            .addComponent(jTextFieldSentenceSplitterTextBody)
                            .addComponent(jTextFieldSentenceSplitterXmlElement))
                        .addGap(31, 31, 31)))
                .addContainerGap())
        );
        sentenceSplitterTabLayout.setVerticalGroup(
            sentenceSplitterTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sentenceSplitterTabLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(sentenceSplitterTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jTextFieldSentenceSplitterTrenner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(sentenceSplitterTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel47)
                    .addComponent(jTextFieldSentenceSplitterTextBody, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(sentenceSplitterTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel50)
                    .addComponent(jTextFieldSentenceSplitterXmlElement, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 690, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Sentence Splitter", sentenceSplitterTab);

        jSplitPane9.setDividerLocation(400);

        jPanel1.setMinimumSize(new java.awt.Dimension(300, 300));
        jPanel1.setPreferredSize(new java.awt.Dimension(500, 648));
        jPanel1.setRequestFocusEnabled(false);

        jScrollPane47.setViewportView(jTextPaneStandardisationInput);

        jButton44.setText("get from splitter");
        jButton44.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton44ActionPerformed(evt);
            }
        });

        jLabel48.setText("Quelltext:");

        jButton45.setText("open from database");
        jButton45.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton45ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane47)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel48)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton45)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton44)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton44)
                    .addComponent(jLabel48)
                    .addComponent(jButton45))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane47, javax.swing.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE))
        );

        jSplitPane9.setLeftComponent(jPanel1);

        jScrollPane49.setViewportView(jTextPaneStandardisationOutput);

        jButtonSpeichernDatenbankStand.setText("save database");
        jButtonSpeichernDatenbankStand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSpeichernDatenbankStandActionPerformed(evt);
            }
        });

        jButton51.setText("save local");

        javax.swing.GroupLayout jPanel22Layout = new javax.swing.GroupLayout(jPanel22);
        jPanel22.setLayout(jPanel22Layout);
        jPanel22Layout.setHorizontalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane49, javax.swing.GroupLayout.DEFAULT_SIZE, 1038, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel22Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonSpeichernDatenbankStand)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton51)
                .addContainerGap())
        );
        jPanel22Layout.setVerticalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel22Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSpeichernDatenbankStand)
                    .addComponent(jButton51))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane49, javax.swing.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE))
        );

        jSplitPane9.setRightComponent(jPanel22);

        regExForSandard.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"x", "x"}
            },
            new String [] {
                "regex for search", "regex for replacement"
            }
        ));
        jScrollPane48.setViewportView(regExForSandard);

        jButtonStandardisationExecute.setText("normalize");
        jButtonStandardisationExecute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStandardisationExecuteActionPerformed(evt);
            }
        });

        jButtonStandardisationTest.setText("test");
        jButtonStandardisationTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStandardisationTestActionPerformed(evt);
            }
        });

        jButtonDeleteRow.setText("delete");
        jButtonDeleteRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteRowActionPerformed(evt);
            }
        });

        jButtonAddRow.setText("add");
        jButtonAddRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddRowActionPerformed(evt);
            }
        });

        jButtonStandardisationSave.setText("save");
        jButtonStandardisationSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStandardisationSaveActionPerformed(evt);
            }
        });

        jButtonStandardisationLoad.setText("load");
        jButtonStandardisationLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStandardisationLoadActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout standardisationTabLayout = new javax.swing.GroupLayout(standardisationTab);
        standardisationTab.setLayout(standardisationTabLayout);
        standardisationTabLayout.setHorizontalGroup(
            standardisationTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(standardisationTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(standardisationTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSplitPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 1449, Short.MAX_VALUE)
                    .addComponent(jScrollPane48)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, standardisationTabLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonStandardisationLoad)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonStandardisationSave)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonAddRow)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonDeleteRow)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonStandardisationTest)
                        .addGap(10, 10, 10)
                        .addComponent(jProgressBarStandardisation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonStandardisationExecute)))
                .addContainerGap())
        );
        standardisationTabLayout.setVerticalGroup(
            standardisationTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(standardisationTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane48, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(standardisationTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(standardisationTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonStandardisationExecute)
                        .addComponent(jButtonStandardisationTest)
                        .addComponent(jButtonDeleteRow)
                        .addComponent(jButtonAddRow)
                        .addComponent(jButtonStandardisationSave)
                        .addComponent(jButtonStandardisationLoad))
                    .addComponent(jProgressBarStandardisation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 587, Short.MAX_VALUE)
                .addGap(16, 16, 16))
        );

        jTabbedPane1.addTab("Standardisation", standardisationTab);

        jLabel1.setText("tagset:");

        jLabel2.setText("tokens and characters:");

        jLabel3.setText("xml attribute for pos:");

        jTextFieldTokenElemente.setText("//w | //c");

        jTextFieldPOSAttribute.setText("pos");

        jSplitPane1.setDividerLocation(600);
        jSplitPane1.setPreferredSize(new java.awt.Dimension(1049, 319));

        jScrollPane1.setViewportView(jTextPaneZumTrainieren);

        jLabel4.setText("Training:");

        jButton2.setText("open local");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("get from tokenizer");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButtonOpenDatabaseTrainer.setText("open database");
        jButtonOpenDatabaseTrainer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOpenDatabaseTrainerActionPerformed(evt);
            }
        });

        jButtonTrainerToDatabase.setText("save local");
        jButtonTrainerToDatabase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTrainerToDatabaseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonOpenDatabaseTrainer, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonTrainerToDatabase, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButtonOpenDatabaseTrainer)
                    .addComponent(jButtonTrainerToDatabase))
                .addGap(4, 4, 4)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 389, Short.MAX_VALUE))
        );

        jTabbedPane9.addTab("file", jPanel2);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Trainingsdata");
        jTreeTrainingsdata.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane53.setViewportView(jTreeTrainingsdata);

        javax.swing.GroupLayout jPanel29Layout = new javax.swing.GroupLayout(jPanel29);
        jPanel29.setLayout(jPanel29Layout);
        jPanel29Layout.setHorizontalGroup(
            jPanel29Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane53, javax.swing.GroupLayout.DEFAULT_SIZE, 577, Short.MAX_VALUE)
        );
        jPanel29Layout.setVerticalGroup(
            jPanel29Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane53, javax.swing.GroupLayout.DEFAULT_SIZE, 428, Short.MAX_VALUE)
        );

        jTabbedPane9.addTab("database", jPanel29);

        javax.swing.GroupLayout jPanel26Layout = new javax.swing.GroupLayout(jPanel26);
        jPanel26.setLayout(jPanel26Layout);
        jPanel26Layout.setHorizontalGroup(
            jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 598, Short.MAX_VALUE)
            .addGroup(jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel26Layout.createSequentialGroup()
                    .addComponent(jTabbedPane9)
                    .addGap(0, 0, 0)))
        );
        jPanel26Layout.setVerticalGroup(
            jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 474, Short.MAX_VALUE)
            .addGroup(jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jTabbedPane9))
        );

        jSplitPane1.setLeftComponent(jPanel26);

        jTextPane2.setName(""); // NOI18N
        jScrollPane2.setViewportView(jTextPane2);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 796, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE)
        );

        jTabbedPane2.addTab("suffix", jPanel5);

        jScrollPane3.setViewportView(jTextPane3);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 796, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE)
        );

        jTabbedPane2.addTab("upper case", jPanel6);

        jScrollPane4.setViewportView(jTextPane4);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 796, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE)
        );

        jTabbedPane2.addTab("lower case", jPanel7);

        jScrollPane5.setViewportView(jTextPane5);

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 796, Short.MAX_VALUE)
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE)
        );

        jTabbedPane2.addTab("word length", jPanel11);

        jScrollPane6.setViewportView(jTextPane6);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 775, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 336, Short.MAX_VALUE)
        );

        jTabbedPane3.addTab("trigramm left", jPanel8);

        jScrollPane7.setViewportView(jTextPane7);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 775, Short.MAX_VALUE)
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 336, Short.MAX_VALUE)
        );

        jTabbedPane3.addTab("trigramm middle", jPanel9);

        jScrollPane8.setViewportView(jTextPane8);

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 775, Short.MAX_VALUE)
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 336, Short.MAX_VALUE)
        );

        jTabbedPane3.addTab("bigramm left", jPanel10);

        jScrollPane9.setViewportView(jTextPane9);

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 775, Short.MAX_VALUE)
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 336, Short.MAX_VALUE)
        );

        jTabbedPane3.addTab("bigramm right", jPanel12);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane3)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane3)
        );

        jTabbedPane2.addTab("word order", jPanel4);

        jScrollPane21.setViewportView(jTextPane21);

        jTabbedPane6.addTab("from the beginning of the sentence", jScrollPane21);

        jScrollPane23.setViewportView(jTextPane23);

        jTabbedPane6.addTab("from the end of the sentence", jScrollPane23);

        jTabbedPane2.addTab("position in sentence", jTabbedPane6);

        jScrollPane22.setViewportView(jTextPane22);

        jTabbedPane2.addTab("lexicon", jScrollPane22);

        jTabbedPane4.addTab("probabilities (for to show)", jTabbedPane2);

        jScrollPaneTrainerModelSuffix.setViewportView(jTextPaneSuffix);

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPaneTrainerModelSuffix, javax.swing.GroupLayout.DEFAULT_SIZE, 796, Short.MAX_VALUE)
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPaneTrainerModelSuffix, javax.swing.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE)
        );

        jTabbedPane5.addTab("suffix", jPanel13);

        jScrollPaneTrainerModelUpperCase.setViewportView(jTextPaneGross);

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPaneTrainerModelUpperCase, javax.swing.GroupLayout.DEFAULT_SIZE, 796, Short.MAX_VALUE)
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPaneTrainerModelUpperCase, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE)
        );

        jTabbedPane5.addTab("upper case", jPanel14);

        jScrollPane12.setViewportView(jTextPaneKlein);

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane12, javax.swing.GroupLayout.DEFAULT_SIZE, 796, Short.MAX_VALUE)
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane12, javax.swing.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE)
        );

        jTabbedPane5.addTab("lower case", jPanel15);

        jScrollPane13.setViewportView(jTextPaneWordLength);

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane13, javax.swing.GroupLayout.DEFAULT_SIZE, 796, Short.MAX_VALUE)
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane13, javax.swing.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE)
        );

        jTabbedPane5.addTab("word length", jPanel16);

        jScrollPane17.setViewportView(jTextPaneTrigrammLeft);

        javax.swing.GroupLayout jPanel18Layout = new javax.swing.GroupLayout(jPanel18);
        jPanel18.setLayout(jPanel18Layout);
        jPanel18Layout.setHorizontalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane17, javax.swing.GroupLayout.DEFAULT_SIZE, 775, Short.MAX_VALUE)
        );
        jPanel18Layout.setVerticalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane17, javax.swing.GroupLayout.DEFAULT_SIZE, 336, Short.MAX_VALUE)
        );

        jTabbedPane7.addTab("trigramm left", jPanel18);

        jScrollPane16.setViewportView(jTextPaneTrigrammMiddle);

        javax.swing.GroupLayout jPanel19Layout = new javax.swing.GroupLayout(jPanel19);
        jPanel19.setLayout(jPanel19Layout);
        jPanel19Layout.setHorizontalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane16, javax.swing.GroupLayout.DEFAULT_SIZE, 775, Short.MAX_VALUE)
        );
        jPanel19Layout.setVerticalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane16, javax.swing.GroupLayout.DEFAULT_SIZE, 336, Short.MAX_VALUE)
        );

        jTabbedPane7.addTab("trigramm middle", jPanel19);

        jScrollPane15.setViewportView(jTextPaneBigrammLeft);

        javax.swing.GroupLayout jPanel20Layout = new javax.swing.GroupLayout(jPanel20);
        jPanel20.setLayout(jPanel20Layout);
        jPanel20Layout.setHorizontalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane15, javax.swing.GroupLayout.DEFAULT_SIZE, 775, Short.MAX_VALUE)
        );
        jPanel20Layout.setVerticalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane15, javax.swing.GroupLayout.DEFAULT_SIZE, 336, Short.MAX_VALUE)
        );

        jTabbedPane7.addTab("bigramm left", jPanel20);

        jScrollPane14.setViewportView(jTextPaneBigrammRight);

        javax.swing.GroupLayout jPanel21Layout = new javax.swing.GroupLayout(jPanel21);
        jPanel21.setLayout(jPanel21Layout);
        jPanel21Layout.setHorizontalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane14, javax.swing.GroupLayout.DEFAULT_SIZE, 775, Short.MAX_VALUE)
        );
        jPanel21Layout.setVerticalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane14, javax.swing.GroupLayout.DEFAULT_SIZE, 336, Short.MAX_VALUE)
        );

        jTabbedPane7.addTab("bigramm right", jPanel21);

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane7)
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane7)
        );

        jTabbedPane5.addTab("word order", jPanel17);

        jScrollPane24.setViewportView(jTextPaneSatzPositionAnfang);

        jTabbedPane8.addTab("vom Anfang des Satzes", jScrollPane24);

        jScrollPane25.setViewportView(jTextPaneSatzPositionEnde);

        jTabbedPane8.addTab("vom Ende des Satzes", jScrollPane25);

        jTabbedPane5.addTab("position in sentence", jTabbedPane8);

        jScrollPane26.setViewportView(jTextPaneLexikon);

        jTabbedPane5.addTab("lexicon", jScrollPane26);

        jTabbedPane4.addTab("model probabilities", jTabbedPane5);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane4, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane4, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        jSplitPane1.setRightComponent(jPanel3);

        jLabel5.setText("suffixs:");

        jTextFieldSuffixe.setText("age agë agen aire airë airen ant ante anten bar bare barem baren barer barst barste barsten bart che chen d de den der e e echt echt echte echte echtem echten echten echter echter echtst echtste echtsten echtt eg ege egem egen eger egst egste egsten egt ei eie eien elcher em en en en ene enem enen ener enst enste ensten ent er er er ercher ere eren ert erte erten erter esch esch esche esche eschem eschen eschen escher eschst eschste eschsten escht eur eure euren heet heete heeten in inne innen ioun ioune iounen ist iste isten keet keete keeten lech leche lechem lechen lecher lechst lechste lechsten lecht ment mente menten menter nes neser nis niser ong onge ongen or ore oren rie rië rien s schaft schafte schaften st ste sten t t te téit téite téiten ten ter trice tricë tricen tum tume tumen tumer ung unge ungen ");

        jLabel9.setText("xml for sentence:");

        jTextField5SatzElement.setText("//s");

        jButton1.setText("train model");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jCheckBox1.setText("extract tagset");

        jLabel24.setText("attribute for sentence:");

        jTextFieldSatzNummerAttr.setText("n");

        jLabel25.setText("character element:");

        jTextFieldPunktToken.setText("c");

        jCheckBoxVerwendeDatanbank.setText("use db");

        jButtonSaveModelPOSTrainer.setText("save model db");
        jButtonSaveModelPOSTrainer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveModelPOSTrainerActionPerformed(evt);
            }
        });

        jButtonLoadModelPOSTrainer.setText("load model db");
        jButtonLoadModelPOSTrainer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoadModelPOSTrainerActionPerformed(evt);
            }
        });

        jButtonSaveModelPOSTrainerLocal.setText("save model local");
        jButtonSaveModelPOSTrainerLocal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveModelPOSTrainerLocalActionPerformed(evt);
            }
        });

        jButtonLoadModelPOSTrainerLocal.setText("load model local");
        jButtonLoadModelPOSTrainerLocal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoadModelPOSTrainerLocalActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout posTrainerTabLayout = new javax.swing.GroupLayout(posTrainerTab);
        posTrainerTab.setLayout(posTrainerTabLayout);
        posTrainerTabLayout.setHorizontalGroup(
            posTrainerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(posTrainerTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(posTrainerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(posTrainerTabLayout.createSequentialGroup()
                        .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1449, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, posTrainerTabLayout.createSequentialGroup()
                        .addGroup(posTrainerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jLabel5)
                            .addComponent(jLabel9)
                            .addComponent(jLabel24)
                            .addComponent(jLabel25))
                        .addGap(32, 32, 32)
                        .addGroup(posTrainerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(posTrainerTabLayout.createSequentialGroup()
                                .addComponent(jCheckBox1)
                                .addGap(54, 54, 54)
                                .addComponent(jCheckBoxVerwendeDatanbank)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 122, Short.MAX_VALUE)
                                .addComponent(jButtonLoadModelPOSTrainerLocal)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonSaveModelPOSTrainerLocal)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(trainerProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonLoadModelPOSTrainer)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonSaveModelPOSTrainer)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1))
                            .addComponent(jTextFieldSatzNummerAttr, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldTagset, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldTokenElemente, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldPOSAttribute, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldSuffixe, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jTextField5SatzElement, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldPunktToken, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(47, 47, 47))))
        );
        posTrainerTabLayout.setVerticalGroup(
            posTrainerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(posTrainerTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(posTrainerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldTagset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(posTrainerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldTokenElemente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(posTrainerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(jTextFieldPOSAttribute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(posTrainerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addComponent(jTextFieldSuffixe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(posTrainerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel9)
                    .addComponent(jTextField5SatzElement, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(posTrainerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(jTextFieldSatzNummerAttr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(posTrainerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(jTextFieldPunktToken, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(posTrainerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(posTrainerTabLayout.createSequentialGroup()
                        .addGroup(posTrainerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jCheckBox1)
                            .addComponent(jCheckBoxVerwendeDatanbank)
                            .addComponent(jButtonSaveModelPOSTrainer)
                            .addComponent(jButtonLoadModelPOSTrainer)
                            .addComponent(jButtonSaveModelPOSTrainerLocal)
                            .addComponent(jButtonLoadModelPOSTrainerLocal))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, posTrainerTabLayout.createSequentialGroup()
                        .addComponent(trainerProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)))
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 478, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("POS-Trainer", posTrainerTab);

        jSplitPane2.setDividerLocation(600);

        jButton29.setText("open local");
        jButton29.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton29ActionPerformed(evt);
            }
        });

        jLabel6.setText("input text:");

        jButton35.setText("open database");
        jButton35.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton35ActionPerformed(evt);
            }
        });

        jScrollPane18.setViewportView(jTextPaneTaggerInput);

        jButton28.setText("get from tokenizer");
        jButton28.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton28ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel30Layout = new javax.swing.GroupLayout(jPanel30);
        jPanel30.setLayout(jPanel30Layout);
        jPanel30Layout.setHorizontalGroup(
            jPanel30Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel30Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel30Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane18)
                    .addGroup(jPanel30Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton35)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton29)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton28)))
                .addContainerGap())
        );
        jPanel30Layout.setVerticalGroup(
            jPanel30Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel30Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel30Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jButton28)
                    .addComponent(jButton29)
                    .addComponent(jButton35))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane18, javax.swing.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane12.addTab("file", jPanel30);

        treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Standardieserte Texte");
        jTreeZuTaggendeTexte.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane54.setViewportView(jTreeZuTaggendeTexte);

        javax.swing.GroupLayout jPanel35Layout = new javax.swing.GroupLayout(jPanel35);
        jPanel35.setLayout(jPanel35Layout);
        jPanel35Layout.setHorizontalGroup(
            jPanel35Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 577, Short.MAX_VALUE)
            .addGroup(jPanel35Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane54, javax.swing.GroupLayout.DEFAULT_SIZE, 577, Short.MAX_VALUE))
        );
        jPanel35Layout.setVerticalGroup(
            jPanel35Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 457, Short.MAX_VALUE)
            .addGroup(jPanel35Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane54, javax.swing.GroupLayout.DEFAULT_SIZE, 457, Short.MAX_VALUE))
        );

        jTabbedPane12.addTab("database", jPanel35);

        javax.swing.GroupLayout jPanel23Layout = new javax.swing.GroupLayout(jPanel23);
        jPanel23.setLayout(jPanel23Layout);
        jPanel23Layout.setHorizontalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane12, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel23Layout.setVerticalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane12, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        jSplitPane2.setLeftComponent(jPanel23);

        jScrollPane19.setViewportView(jTextPaneTaggerOutPut);

        jLabel8.setText("output text:");

        jButton36.setText("save local");
        jButton36.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton36ActionPerformed(evt);
            }
        });

        jButton39.setText("save database");
        jButton39.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton39ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel24Layout = new javax.swing.GroupLayout(jPanel24);
        jPanel24.setLayout(jPanel24Layout);
        jPanel24Layout.setHorizontalGroup(
            jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane19)
            .addGroup(jPanel24Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 492, Short.MAX_VALUE)
                .addComponent(jButton39)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton36)
                .addGap(21, 21, 21))
        );
        jPanel24Layout.setVerticalGroup(
            jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel24Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jButton36)
                    .addComponent(jButton39))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane19, javax.swing.GroupLayout.DEFAULT_SIZE, 462, Short.MAX_VALUE))
        );

        jSplitPane2.setRightComponent(jPanel24);

        jScrollPane20.setViewportView(jTextPane10);

        jRadioButtonTaggingsprozess.setText("fully document the tagging process (slow performance):");
        jRadioButtonTaggingsprozess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonTaggingsprozessActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel25Layout = new javax.swing.GroupLayout(jPanel25);
        jPanel25.setLayout(jPanel25Layout);
        jPanel25Layout.setHorizontalGroup(
            jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel25Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel25Layout.createSequentialGroup()
                        .addComponent(jRadioButtonTaggingsprozess)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane20)))
        );
        jPanel25Layout.setVerticalGroup(
            jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel25Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jRadioButtonTaggingsprozess)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane20, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE))
        );

        jRadioButtonSuffix.setSelected(true);
        jRadioButtonSuffix.setText("suffix");

        jRadioButtonGross.setSelected(true);
        jRadioButtonGross.setText("upper case");

        jRadioButtonKlein.setText("lower case");

        jRadioButtonWordLenght.setSelected(true);
        jRadioButtonWordLenght.setText("word length");

        jRadioButtonSatzPositionAnfang.setSelected(true);
        jRadioButtonSatzPositionAnfang.setText("sentence position (beginn)");

        jRadioButtonTrigrammLeft.setSelected(true);
        jRadioButtonTrigrammLeft.setText("trigramm left");

        jRadioButtonTrigrammRight.setText("trigramm right");

        jRadioButtonBigrammLeft.setSelected(true);
        jRadioButtonBigrammLeft.setText("bigramm left");

        jRadioButtonRight.setText("bigramm right");

        jButtonTaggen.setText("tag with a model from trainer");
        jButtonTaggen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTaggenActionPerformed(evt);
            }
        });

        jButton4.setText("select all");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jRadioButtonSatzPositionEnde.setText("sentence position (end)");

        jRadioButtonLexikon.setSelected(true);
        jRadioButtonLexikon.setText("lexicon");

        jProgressBarTagger.setForeground(new java.awt.Color(153, 180, 209));

        jButtonTaggenDatabase.setText("tag the database");
        jButtonTaggenDatabase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTaggenDatabaseActionPerformed(evt);
            }
        });

        jButtonTaggenFromModelDatabse.setText("tag with a model from DB");
        jButtonTaggenFromModelDatabse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTaggenFromModelDatabseActionPerformed(evt);
            }
        });

        jButtonTagDatabaseFromDBModel.setText("tag the database with a model from DB");
        jButtonTagDatabaseFromDBModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTagDatabaseFromDBModelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout taggerTabLayout = new javax.swing.GroupLayout(taggerTab);
        taggerTab.setLayout(taggerTabLayout);
        taggerTabLayout.setHorizontalGroup(
            taggerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(taggerTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(taggerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel25, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSplitPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(taggerTabLayout.createSequentialGroup()
                        .addComponent(jRadioButtonLexikon)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(taggerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(taggerTabLayout.createSequentialGroup()
                                .addComponent(jRadioButtonSuffix)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jRadioButtonGross)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jRadioButtonKlein)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jRadioButtonWordLenght)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jRadioButtonTrigrammLeft)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jRadioButtonTrigrammRight)
                                .addGap(2, 2, 2)
                                .addComponent(jRadioButtonBigrammLeft)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jRadioButtonRight)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jRadioButtonSatzPositionAnfang)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jRadioButtonSatzPositionEnde)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(taggerTabLayout.createSequentialGroup()
                                .addGap(75, 75, 75)
                                .addComponent(jButton4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jProgressBarTagger, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonTaggen)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonTaggenFromModelDatabse)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonTaggenDatabase)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonTagDatabaseFromDBModel)))))
                .addContainerGap())
        );
        taggerTabLayout.setVerticalGroup(
            taggerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, taggerTabLayout.createSequentialGroup()
                .addComponent(jPanel25, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(taggerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButtonSuffix)
                    .addComponent(jRadioButtonGross)
                    .addComponent(jRadioButtonKlein)
                    .addComponent(jRadioButtonWordLenght)
                    .addComponent(jRadioButtonSatzPositionAnfang)
                    .addComponent(jRadioButtonTrigrammLeft)
                    .addComponent(jRadioButtonTrigrammRight)
                    .addComponent(jRadioButtonBigrammLeft)
                    .addComponent(jRadioButtonRight)
                    .addComponent(jRadioButtonSatzPositionEnde)
                    .addComponent(jRadioButtonLexikon))
                .addGroup(taggerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(taggerTabLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jButton4))
                    .addGroup(taggerTabLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(taggerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonTaggen)
                            .addComponent(jButtonTaggenDatabase)
                            .addComponent(jButtonTaggenFromModelDatabse)
                            .addComponent(jButtonTagDatabaseFromDBModel)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, taggerTabLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jProgressBarTagger, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSplitPane2)
                .addContainerGap())
        );

        jTabbedPane1.addTab("POS-Tagger", taggerTab);

        jSplitPane4.setDividerLocation(500);

        jScrollPane29.setViewportView(jTextPane19);

        jLabel16.setText("input text:");

        jButton12.setText("open local");

        jButton13.setText("get from tokenizer");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel31Layout = new javax.swing.GroupLayout(jPanel31);
        jPanel31.setLayout(jPanel31Layout);
        jPanel31Layout.setHorizontalGroup(
            jPanel31Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel31Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton13)
                .addContainerGap(144, Short.MAX_VALUE))
            .addGroup(jPanel31Layout.createSequentialGroup()
                .addComponent(jScrollPane29)
                .addContainerGap())
        );
        jPanel31Layout.setVerticalGroup(
            jPanel31Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel31Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel31Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(jButton12)
                    .addComponent(jButton13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane29, javax.swing.GroupLayout.DEFAULT_SIZE, 687, Short.MAX_VALUE))
        );

        jSplitPane4.setLeftComponent(jPanel31);

        jScrollPane31.setViewportView(jTextPane25);

        javax.swing.GroupLayout jPanel33Layout = new javax.swing.GroupLayout(jPanel33);
        jPanel33.setLayout(jPanel33Layout);
        jPanel33Layout.setHorizontalGroup(
            jPanel33Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 917, Short.MAX_VALUE)
            .addGroup(jPanel33Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane31, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 917, Short.MAX_VALUE))
        );
        jPanel33Layout.setVerticalGroup(
            jPanel33Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 682, Short.MAX_VALUE)
            .addGroup(jPanel33Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane31, javax.swing.GroupLayout.DEFAULT_SIZE, 682, Short.MAX_VALUE))
        );

        jTabbedPane10.addTab("text format", jPanel33);

        jScrollPane30.setViewportView(jTextPane24);

        jTabbedPane10.addTab("xml format", jScrollPane30);

        javax.swing.GroupLayout jPanel34Layout = new javax.swing.GroupLayout(jPanel34);
        jPanel34.setLayout(jPanel34Layout);
        jPanel34Layout.setHorizontalGroup(
            jPanel34Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 917, Short.MAX_VALUE)
        );
        jPanel34Layout.setVerticalGroup(
            jPanel34Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 682, Short.MAX_VALUE)
        );

        jTabbedPane10.addTab("table", jPanel34);

        javax.swing.GroupLayout jPanel32Layout = new javax.swing.GroupLayout(jPanel32);
        jPanel32.setLayout(jPanel32Layout);
        jPanel32Layout.setHorizontalGroup(
            jPanel32Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane10, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel32Layout.setVerticalGroup(
            jPanel32Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane10, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        jSplitPane4.setRightComponent(jPanel32);

        jButton14.setText("create a frequency list");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        jLabel17.setText("x-path to tokens:");

        jTextField1.setText("//w");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout frequencyTabLayout = new javax.swing.GroupLayout(frequencyTab);
        frequencyTab.setLayout(frequencyTabLayout);
        frequencyTabLayout.setHorizontalGroup(
            frequencyTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frequencyTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(frequencyTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(frequencyTabLayout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, frequencyTabLayout.createSequentialGroup()
                        .addGap(0, 1266, Short.MAX_VALUE)
                        .addComponent(jButton14)))
                .addContainerGap())
            .addGroup(frequencyTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(frequencyTabLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jSplitPane4)
                    .addContainerGap()))
        );
        frequencyTabLayout.setVerticalGroup(
            frequencyTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frequencyTabLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(frequencyTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton14)
                .addContainerGap())
            .addGroup(frequencyTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, frequencyTabLayout.createSequentialGroup()
                    .addGap(95, 95, 95)
                    .addComponent(jSplitPane4)
                    .addContainerGap()))
        );

        jTabbedPane1.addTab("Frequency", frequencyTab);

        jLabel21.setText("Tokens:");

        jScrollPane35.setViewportView(jList1);

        jButton19.setText("Liste mit Tokens befüllen");
        jButton19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton19ActionPerformed(evt);
            }
        });

        jLabel22.setText("Text auswählen:");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Text aus Tokenizer", "Text aus POS-Tagger" }));

        javax.swing.GroupLayout concordanceTabLayout = new javax.swing.GroupLayout(concordanceTab);
        concordanceTab.setLayout(concordanceTabLayout);
        concordanceTabLayout.setHorizontalGroup(
            concordanceTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(concordanceTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(concordanceTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(concordanceTabLayout.createSequentialGroup()
                        .addComponent(jLabel21)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane35, javax.swing.GroupLayout.DEFAULT_SIZE, 1171, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton19))
                    .addGroup(concordanceTabLayout.createSequentialGroup()
                        .addComponent(jLabel22)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        concordanceTabLayout.setVerticalGroup(
            concordanceTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(concordanceTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(concordanceTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(concordanceTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton19)
                    .addComponent(jScrollPane35, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21))
                .addContainerGap(639, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Concordance", concordanceTab);

        jLabel31.setText("prefix:");

        jLabel34.setText("suffix:");

        jLabel35.setText("infix:");

        jTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5ActionPerformed(evt);
            }
        });

        jLabel40.setText("to");

        jSplitPane7.setDividerLocation(400);

        treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Gesamtkorpus");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("19 Jahrhundert");
        javax.swing.tree.DefaultMutableTreeNode treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Erste Hälfte");
        javax.swing.tree.DefaultMutableTreeNode treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("Meyer");
        treeNode3.add(treeNode4);
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("Lenz");
        treeNode3.add(treeNode4);
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Zweite Hälfte");
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("Rodange");
        treeNode3.add(treeNode4);
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("Dicks");
        treeNode3.add(treeNode4);
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("20 Jahrhundert");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Erstes Quartal");
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("Berens");
        treeNode3.add(treeNode4);
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Zweites Quartal");
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("Gremling");
        treeNode3.add(treeNode4);
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jTree1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTree1MousePressed(evt);
            }
        });
        jScrollPane43.setViewportView(jTree1);

        jTabbedPaneMorphNavigation.addTab("corpus local", jScrollPane43);

        treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Gesamtkorpus");
        Gesamtkorpus.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        Gesamtkorpus.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                GesamtkorpusMousePressed(evt);
            }
        });
        jScrollPane50.setViewportView(Gesamtkorpus);

        jTabbedPaneMorphNavigation.addTab("database", jScrollPane50);

        jScrollPane39.setViewportView(jTextPaneMorph);

        jLabel42.setText("Quelltext:");

        jButton30.setText("Öffnen");
        jButton30.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton30ActionPerformed(evt);
            }
        });

        jButton31.setText("aus Tokeniser laden");
        jButton31.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton31ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel52Layout = new javax.swing.GroupLayout(jPanel52);
        jPanel52.setLayout(jPanel52Layout);
        jPanel52Layout.setHorizontalGroup(
            jPanel52Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel52Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel52Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane39)
                    .addGroup(jPanel52Layout.createSequentialGroup()
                        .addComponent(jLabel42)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton30)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton31)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 132, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel52Layout.setVerticalGroup(
            jPanel52Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel52Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel52Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel42)
                    .addComponent(jButton30)
                    .addComponent(jButton31))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane39, javax.swing.GroupLayout.DEFAULT_SIZE, 542, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPaneMorphNavigation.addTab("XML-file", jPanel52);

        jPanelStichworte.setLayout(new javax.swing.BoxLayout(jPanelStichworte, javax.swing.BoxLayout.Y_AXIS));
        jScrollPane40.setViewportView(jPanelStichworte);

        jTabbedPaneMorphNavigation.addTab("types", jScrollPane40);

        javax.swing.GroupLayout jPanel47Layout = new javax.swing.GroupLayout(jPanel47);
        jPanel47.setLayout(jPanel47Layout);
        jPanel47Layout.setHorizontalGroup(
            jPanel47Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPaneMorphNavigation, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel47Layout.setVerticalGroup(
            jPanel47Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPaneMorphNavigation, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        jSplitPane7.setLeftComponent(jPanel47);

        jButtonMorphalSave.setText("Speichern");
        jButtonMorphalSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMorphalSaveActionPerformed(evt);
            }
        });

        jScrollPane42.setBorder(null);
        jScrollPane42.setAutoscrolls(true);

        affixGUI.setLayout(new javax.swing.BoxLayout(affixGUI, javax.swing.BoxLayout.Y_AXIS));
        jScrollPane42.setViewportView(affixGUI);

        jButton37.setText("Textexport");
        jButton37.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton37ActionPerformed(evt);
            }
        });

        jButton43.setText("Markierung umkehren");
        jButton43.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton43ActionPerformed(evt);
            }
        });

        jButton20.setText("Nur die Wortklassen speichern");
        jButton20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton20ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel51Layout = new javax.swing.GroupLayout(jPanel51);
        jPanel51.setLayout(jPanel51Layout);
        jPanel51Layout.setHorizontalGroup(
            jPanel51Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel51Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton37)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton43)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 357, Short.MAX_VALUE)
                .addComponent(jButton20)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonMorphalSave)
                .addContainerGap())
            .addComponent(jScrollPane42, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel51Layout.setVerticalGroup(
            jPanel51Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel51Layout.createSequentialGroup()
                .addComponent(jScrollPane42, javax.swing.GroupLayout.DEFAULT_SIZE, 543, Short.MAX_VALUE)
                .addGap(11, 11, 11)
                .addGroup(jPanel51Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonMorphalSave)
                    .addComponent(jButton37)
                    .addComponent(jButton43)
                    .addComponent(jButton20))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel49Layout = new javax.swing.GroupLayout(jPanel49);
        jPanel49.setLayout(jPanel49Layout);
        jPanel49Layout.setHorizontalGroup(
            jPanel49Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel51, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel49Layout.setVerticalGroup(
            jPanel49Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel51, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPaneMorphal.addTab("results", jPanel49);

        jScrollPane41.setViewportView(jTextPane30);

        jTabbedPaneMorphal.addTab("XML-file", jScrollPane41);

        jScrollPane46.setViewportView(jTextPane1);

        javax.swing.GroupLayout jPanel50Layout = new javax.swing.GroupLayout(jPanel50);
        jPanel50.setLayout(jPanel50Layout);
        jPanel50Layout.setHorizontalGroup(
            jPanel50Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane46, javax.swing.GroupLayout.DEFAULT_SIZE, 1017, Short.MAX_VALUE)
        );
        jPanel50Layout.setVerticalGroup(
            jPanel50Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane46, javax.swing.GroupLayout.DEFAULT_SIZE, 589, Short.MAX_VALUE)
        );

        jTabbedPaneMorphal.addTab("text format", jPanel50);

        javax.swing.GroupLayout jPanel48Layout = new javax.swing.GroupLayout(jPanel48);
        jPanel48.setLayout(jPanel48Layout);
        jPanel48Layout.setHorizontalGroup(
            jPanel48Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPaneMorphal, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel48Layout.setVerticalGroup(
            jPanel48Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPaneMorphal, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        jSplitPane7.setRightComponent(jPanel48);

        jButton32.setText("search");
        jButton32.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton32ActionPerformed(evt);
            }
        });

        jComboBoxAffixArt.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "prefix", "suffix", "infix", "zirkumfix", "infix + suffix", "prefix + infix", "infix + zirkumfix" }));
        jComboBoxAffixArt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxAffixArtActionPerformed(evt);
            }
        });

        jComboBoxWortKlassen.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Wortklassen" }));
        jComboBoxWortKlassen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxWortKlassenActionPerformed(evt);
            }
        });

        jButton33.setText("load POS labels from file");
        jButton33.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton33ActionPerformed(evt);
            }
        });

        jButtonSuchenDatabase.setText("search database");
        jButtonSuchenDatabase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSuchenDatabaseActionPerformed(evt);
            }
        });

        jButton46.setText("load POS labels from database");
        jButton46.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton46ActionPerformed(evt);
            }
        });

        jButtonSuchenStichworte.setText("search types database");
        jButtonSuchenStichworte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSuchenStichworteActionPerformed(evt);
            }
        });

        jButtonAnnotationSuche.setText("search in annotations");
        jButtonAnnotationSuche.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnotationSucheActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout morphologicalAnalysisTabLayout = new javax.swing.GroupLayout(morphologicalAnalysisTab);
        morphologicalAnalysisTab.setLayout(morphologicalAnalysisTabLayout);
        morphologicalAnalysisTabLayout.setHorizontalGroup(
            morphologicalAnalysisTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(morphologicalAnalysisTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(morphologicalAnalysisTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(morphologicalAnalysisTabLayout.createSequentialGroup()
                        .addGap(0, 196, Short.MAX_VALUE)
                        .addComponent(jButton46)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton33)
                        .addGap(52, 52, 52)
                        .addComponent(jProgressBarMorphal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton32)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonAnnotationSuche)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonSuchenDatabase)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonSuchenStichworte)
                        .addContainerGap())
                    .addGroup(morphologicalAnalysisTabLayout.createSequentialGroup()
                        .addGroup(morphologicalAnalysisTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel31)
                            .addComponent(jLabel34)
                            .addComponent(jLabel35))
                        .addGap(42, 42, 42)
                        .addGroup(morphologicalAnalysisTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextFieldSuffix, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                            .addComponent(jTextFieldPrefix, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTextField5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel40)
                        .addGap(20, 20, 20)
                        .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(56, 56, 56)
                        .addComponent(jComboBoxWortKlassen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(55, 55, 55)
                        .addComponent(jComboBoxAffixArt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(morphologicalAnalysisTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(morphologicalAnalysisTabLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jSplitPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 1449, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        morphologicalAnalysisTabLayout.setVerticalGroup(
            morphologicalAnalysisTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(morphologicalAnalysisTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(morphologicalAnalysisTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jProgressBarMorphal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(morphologicalAnalysisTabLayout.createSequentialGroup()
                        .addGroup(morphologicalAnalysisTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel31)
                            .addComponent(jTextFieldPrefix, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(morphologicalAnalysisTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel34)
                            .addComponent(jTextFieldSuffix, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(morphologicalAnalysisTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel35)
                            .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel40)
                            .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxWortKlassen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxAffixArt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(morphologicalAnalysisTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton32)
                            .addComponent(jButton33)
                            .addComponent(jButtonSuchenDatabase)
                            .addComponent(jButton46)
                            .addComponent(jButtonSuchenStichworte)
                            .addComponent(jButtonAnnotationSuche))))
                .addContainerGap(664, Short.MAX_VALUE))
            .addGroup(morphologicalAnalysisTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, morphologicalAnalysisTabLayout.createSequentialGroup()
                    .addGap(188, 188, 188)
                    .addComponent(jSplitPane7)
                    .addContainerGap()))
        );

        jTabbedPane1.addTab("Morphological Analysis", morphologicalAnalysisTab);

        jLabel18.setText("number of topics:");

        jTextFieldNumberOfTopics.setText("40");

        jButton15.setText("edit");

        jLabel19.setText("number of iterations:");

        jTextFieldNumberOfIterations.setText("1000");

        jButton16.setText("edit");

        jSplitPane5.setDividerLocation(500);

        jScrollPane10.setViewportView(jTextPaneTextForLDA);

        jButton18.setText("open database");
        jButton18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton18ActionPerformed(evt);
            }
        });

        jButton52.setText("open xml file local");

        javax.swing.GroupLayout jPanel36Layout = new javax.swing.GroupLayout(jPanel36);
        jPanel36.setLayout(jPanel36Layout);
        jPanel36Layout.setHorizontalGroup(
            jPanel36Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel36Layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addComponent(jButton18)
                .addGap(72, 72, 72)
                .addComponent(jButton52, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(45, 45, 45))
            .addComponent(jScrollPane10)
        );
        jPanel36Layout.setVerticalGroup(
            jPanel36Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel36Layout.createSequentialGroup()
                .addGroup(jPanel36Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton52)
                    .addComponent(jButton18))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 530, Short.MAX_VALUE))
        );

        jTabbedPane11.addTab("XML-file", jPanel36);

        treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Files");
        jTreeDatabaseForTopicModelling.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane32.setViewportView(jTreeDatabaseForTopicModelling);

        javax.swing.GroupLayout jPanel38Layout = new javax.swing.GroupLayout(jPanel38);
        jPanel38.setLayout(jPanel38Layout);
        jPanel38Layout.setHorizontalGroup(
            jPanel38Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane32, javax.swing.GroupLayout.DEFAULT_SIZE, 477, Short.MAX_VALUE)
        );
        jPanel38Layout.setVerticalGroup(
            jPanel38Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane32, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE)
        );

        jTabbedPane11.addTab("Database", jPanel38);

        jSplitPane5.setLeftComponent(jTabbedPane11);

        jScrollPane11.setViewportView(jTextPaneTopicModelingOutput);

        jTabbedPane14.addTab("topics", jScrollPane11);

        jSplitPane5.setRightComponent(jTabbedPane14);

        jButton17.setText("extract topics from file");
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });

        jButtonExtractTopicsFromDatabase.setText("extract topics from the database");
        jButtonExtractTopicsFromDatabase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExtractTopicsFromDatabaseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout extractTopicsLayout = new javax.swing.GroupLayout(extractTopics);
        extractTopics.setLayout(extractTopicsLayout);
        extractTopicsLayout.setHorizontalGroup(
            extractTopicsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(extractTopicsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(extractTopicsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSplitPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 1428, Short.MAX_VALUE)
                    .addGroup(extractTopicsLayout.createSequentialGroup()
                        .addGroup(extractTopicsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel19)
                            .addComponent(jLabel18))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(extractTopicsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextFieldNumberOfTopics)
                            .addComponent(jTextFieldNumberOfIterations, javax.swing.GroupLayout.DEFAULT_SIZE, 1056, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(extractTopicsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton15)
                            .addComponent(jButton16))))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, extractTopicsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonExtractTopicsFromDatabase)
                .addGap(18, 18, 18)
                .addComponent(jButton17)
                .addGap(14, 14, 14))
        );
        extractTopicsLayout.setVerticalGroup(
            extractTopicsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(extractTopicsLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(extractTopicsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(jTextFieldNumberOfTopics, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton15))
                .addGap(18, 18, 18)
                .addGroup(extractTopicsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(jTextFieldNumberOfIterations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton16))
                .addGap(30, 30, 30)
                .addGroup(extractTopicsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton17)
                    .addComponent(jButtonExtractTopicsFromDatabase))
                .addGap(18, 18, 18)
                .addComponent(jSplitPane5))
        );

        TopicModelingTab.addTab("Extract Topics LDA", extractTopics);

        javax.swing.GroupLayout jPanel37Layout = new javax.swing.GroupLayout(jPanel37);
        jPanel37.setLayout(jPanel37Layout);
        jPanel37Layout.setHorizontalGroup(
            jPanel37Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1440, Short.MAX_VALUE)
        );
        jPanel37Layout.setVerticalGroup(
            jPanel37Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 787, Short.MAX_VALUE)
        );

        TopicModelingTab.addTab("Detect Topics", jPanel37);

        jTabbedPane1.addTab("Topic Modeling", TopicModelingTab);

        javax.swing.GroupLayout jPanel55Layout = new javax.swing.GroupLayout(jPanel55);
        jPanel55.setLayout(jPanel55Layout);
        jPanel55Layout.setHorizontalGroup(
            jPanel55Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1461, Short.MAX_VALUE)
        );
        jPanel55Layout.setVerticalGroup(
            jPanel55Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 833, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Sentiment Analysis", jPanel55);

        jButtonAffixeZeigen.setText("zeigen");
        jButtonAffixeZeigen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAffixeZeigenActionPerformed(evt);
            }
        });

        jLabel49.setText("User:");

        jLabel53.setText("Suffix:");

        jButton42.setText("Infos laden");
        jButton42.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton42ActionPerformed(evt);
            }
        });

        databaseGUI.setLayout(new javax.swing.BoxLayout(databaseGUI, javax.swing.BoxLayout.Y_AXIS));
        jScrollPane51.setViewportView(databaseGUI);

        javax.swing.GroupLayout jPanelDatabaseLayout = new javax.swing.GroupLayout(jPanelDatabase);
        jPanelDatabase.setLayout(jPanelDatabaseLayout);
        jPanelDatabaseLayout.setHorizontalGroup(
            jPanelDatabaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDatabaseLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton42)
                .addGap(18, 18, 18)
                .addComponent(jLabel49)
                .addGap(18, 18, 18)
                .addComponent(jComboBoxUserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel53)
                .addGap(18, 18, 18)
                .addComponent(jComboBoxSuffix, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 980, Short.MAX_VALUE)
                .addComponent(jButtonAffixeZeigen)
                .addContainerGap())
            .addGroup(jPanelDatabaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane51, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1440, Short.MAX_VALUE))
        );
        jPanelDatabaseLayout.setVerticalGroup(
            jPanelDatabaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDatabaseLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelDatabaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAffixeZeigen)
                    .addComponent(jLabel49)
                    .addComponent(jComboBoxUserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel53)
                    .addComponent(jComboBoxSuffix, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton42))
                .addContainerGap(767, Short.MAX_VALUE))
            .addGroup(jPanelDatabaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelDatabaseLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane51, javax.swing.GroupLayout.PREFERRED_SIZE, 802, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        corpusManagementTab.addTab("Corpus Management Database", jPanelDatabase);

        jButton21.setText("XML öffnen");
        jButton21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton21ActionPerformed(evt);
            }
        });

        jPanel42.setLayout(new javax.swing.BoxLayout(jPanel42, javax.swing.BoxLayout.PAGE_AXIS));
        jScrollPane38.setViewportView(jPanel42);

        javax.swing.GroupLayout corpusManagmentTabLayout = new javax.swing.GroupLayout(corpusManagmentTab);
        corpusManagmentTab.setLayout(corpusManagmentTabLayout);
        corpusManagmentTabLayout.setHorizontalGroup(
            corpusManagmentTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(corpusManagmentTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton21)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane38, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1440, Short.MAX_VALUE)
        );
        corpusManagmentTabLayout.setVerticalGroup(
            corpusManagmentTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, corpusManagmentTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton21)
                .addGap(62, 62, 62)
                .addComponent(jScrollPane38, javax.swing.GroupLayout.DEFAULT_SIZE, 690, Short.MAX_VALUE))
        );

        corpusManagementTab.addTab("Corpus Managment XML lokal", corpusManagmentTab);

        jButtonSucheRegEx.setText("Suche");
        jButtonSucheRegEx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSucheRegExActionPerformed(evt);
            }
        });

        jPanelRegExStichworte.setLayout(new javax.swing.BoxLayout(jPanelRegExStichworte, javax.swing.BoxLayout.Y_AXIS));
        jScrollPaneRegExStichworte.setViewportView(jPanelRegExStichworte);

        javax.swing.GroupLayout jPanel41Layout = new javax.swing.GroupLayout(jPanel41);
        jPanel41.setLayout(jPanel41Layout);
        jPanel41Layout.setHorizontalGroup(
            jPanel41Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel41Layout.createSequentialGroup()
                .addComponent(jScrollPaneRegExStichworte, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        jPanel41Layout.setVerticalGroup(
            jPanel41Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPaneRegExStichworte, javax.swing.GroupLayout.DEFAULT_SIZE, 530, Short.MAX_VALUE)
        );

        jSplitPane10.setLeftComponent(jPanel41);

        jPanelRegexKontext.setLayout(new javax.swing.BoxLayout(jPanelRegexKontext, javax.swing.BoxLayout.Y_AXIS));
        jScrollPaneRegExKontext.setViewportView(jPanelRegexKontext);

        jTabbedPane13.addTab("Types im restlichen Korpus", jScrollPaneRegExKontext);

        jPanelRegexDetail.setLayout(new javax.swing.BoxLayout(jPanelRegexDetail, javax.swing.BoxLayout.Y_AXIS));
        jScrollPaneRegexDetail.setViewportView(jPanelRegexDetail);

        jTabbedPane13.addTab("Detailierte Ansicht", jScrollPaneRegexDetail);

        javax.swing.GroupLayout jPanel43Layout = new javax.swing.GroupLayout(jPanel43);
        jPanel43.setLayout(jPanel43Layout);
        jPanel43Layout.setHorizontalGroup(
            jPanel43Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel43Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jTabbedPane13, javax.swing.GroupLayout.DEFAULT_SIZE, 1404, Short.MAX_VALUE))
        );
        jPanel43Layout.setVerticalGroup(
            jPanel43Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane13, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 530, Short.MAX_VALUE)
        );

        jSplitPane10.setRightComponent(jPanel43);

        jLabel23.setText("RegEx:");

        jLabel55.setText("Wortklasse:");

        jLabel36.setText("Prefix:");

        jLabel37.setText("Suffix:");

        jButton47.setText("Types im Korpus suchen");
        jButton47.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton47ActionPerformed(evt);
            }
        });

        jButton48.setText("Types importieren");
        jButton48.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton48ActionPerformed(evt);
            }
        });

        jButton49.setText("Lemmatisieren");
        jButton49.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton49ActionPerformed(evt);
            }
        });

        jButton50.setText("Lemmata importieren");
        jButton50.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton50ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel40Layout = new javax.swing.GroupLayout(jPanel40);
        jPanel40.setLayout(jPanel40Layout);
        jPanel40Layout.setHorizontalGroup(
            jPanel40Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane10)
            .addGroup(jPanel40Layout.createSequentialGroup()
                .addGroup(jPanel40Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel40Layout.createSequentialGroup()
                        .addGroup(jPanel40Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel23)
                            .addComponent(jLabel55))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel40Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jTextFieldWortklasseRegex, javax.swing.GroupLayout.DEFAULT_SIZE, 366, Short.MAX_VALUE)
                            .addComponent(jTextFieldRegEx)))
                    .addGroup(jPanel40Layout.createSequentialGroup()
                        .addGroup(jPanel40Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel36)
                            .addComponent(jLabel37))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                        .addGroup(jPanel40Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jProgressBarRegExSuche, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldPrefixSearchAnnations, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldSuffixSearchAnnotations, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(jPanel40Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonSucheRegEx)
                    .addComponent(jButton47)
                    .addComponent(jButton48)
                    .addGroup(jPanel40Layout.createSequentialGroup()
                        .addComponent(jButton49)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton50)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel40Layout.setVerticalGroup(
            jPanel40Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel40Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel40Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldRegEx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSucheRegEx)
                    .addComponent(jLabel23))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel40Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldWortklasseRegex, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel55)
                    .addComponent(jButton47))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel40Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel36)
                    .addComponent(jTextFieldPrefixSearchAnnations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton48))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel40Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel37)
                    .addGroup(jPanel40Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextFieldSuffixSearchAnnotations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton49)
                        .addComponent(jButton50)))
                .addGap(69, 69, 69)
                .addComponent(jProgressBarRegExSuche, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSplitPane10))
        );

        corpusManagementTab.addTab("RegEx Suche", jPanel40);

        jLabel38.setText("Fugenelement:");

        jSplitPane11.setDividerLocation(300);

        jScrollPaneKompositaRight.setPreferredSize(new java.awt.Dimension(500, 100));

        jPanelKompositaRight.setLayout(new javax.swing.BoxLayout(jPanelKompositaRight, javax.swing.BoxLayout.Y_AXIS));
        jScrollPaneKompositaRight.setViewportView(jPanelKompositaRight);

        jSplitPane11.setRightComponent(jScrollPaneKompositaRight);

        jScrollPaneKompositaLeft.setPreferredSize(new java.awt.Dimension(500, 100));

        jPanelKompositaLeft.setLayout(new javax.swing.BoxLayout(jPanelKompositaLeft, javax.swing.BoxLayout.Y_AXIS));
        jScrollPaneKompositaLeft.setViewportView(jPanelKompositaLeft);

        jSplitPane11.setLeftComponent(jScrollPaneKompositaLeft);

        jButtonKompositaSearch.setText("Suche");
        jButtonKompositaSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonKompositaSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel46Layout = new javax.swing.GroupLayout(jPanel46);
        jPanel46.setLayout(jPanel46Layout);
        jPanel46Layout.setHorizontalGroup(
            jPanel46Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 1440, Short.MAX_VALUE)
            .addGroup(jPanel46Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel46Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jProgressBarKomposita, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel46Layout.createSequentialGroup()
                        .addComponent(jLabel38)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldFugenElement, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jButtonKompositaSearch)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel46Layout.setVerticalGroup(
            jPanel46Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel46Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel46Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel38)
                    .addComponent(jTextFieldFugenElement, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonKompositaSearch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jProgressBarKomposita, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jSplitPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 692, Short.MAX_VALUE))
        );

        corpusManagementTab.addTab("Komposita", jPanel46);

        jTabbedPane1.addTab("Corpus management", corpusManagementTab);

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Projekt öffnen");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Projekt speichern");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        jMenuItem2.setText("Das Korpus laden");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem2);

        jMenuItem1.setText("Das Korpus speichern");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem1);

        jMenuItem6.setText("Parameter speichern Datanbank");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem6);

        jMenuItem8.setText("Import Exel");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem8);

        jMenuItem9.setText("Import Comments ");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem9);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentMenuItem.setMnemonic('c');
        contentMenuItem.setText("Contents");
        helpMenu.add(contentMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        jMenu1.setText("Database");

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("einloggen");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText("ausloggen");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuItem7.setText("Statistiken zur Datenbank ");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem7);

        jMenuItem5.setText("Einstellungen");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        menuBar.add(jMenu1);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 879, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Zum Speichern des Projekts
     * das ruft intern die Methode SaveFile auf
     * @param evt 
     */
    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        
            // Zum Speichern des Projekts 
         // Ich habe dafür die Methode SaveFile geschrieben
         // Infos from XML Tokeniser
         String delimeterXML = jTextFieldDelimeters.getText();
         String bedingtesZusammenSetzen = jTextFieldBedingtesZusammensetzenXML.getText();
         String bedingtesTrennen = jTextFieldBedingtesTrennenXML.getText();
         String xml = xmlElement.getText();
         String xmlIn = elementInXmlElement.getText();

            // Infos from Sentence Splitter
         String Satztrenner = jTextFieldSentenceSplitterTrenner.getText();
         String textBodyElement = jTextFieldSentenceSplitterTextBody.getText();
         String tokenElemente = jTextFieldSentenceSplitterXmlElement.getText();

            // Infos from Standardisation
         // Stop editieren
         if (regExForSandard.isEditing()) {
              regExForSandard.getCellEditor().stopCellEditing();
         }
         DefaultTableModel tm = (DefaultTableModel) regExForSandard.getModel();
         HashMap hashy = DataModels.TableToHashMap(tm);
         String xmlString = DataModels.HashMapToXMLStandardisation(hashy);
         DataModels.putInTheDatabaseAskName(benutzer, "/db/Utilities/StandRegex", xmlString);

         // Infos from POS-Trainer
         String tagset = jTextFieldTagset.getText();
         String element = jTextFieldTokenElemente.getText();
         String attribute = jTextFieldPOSAttribute.getText();
         String suffixe = jTextFieldSuffixe.getText();
         String Satzelement = jTextField5SatzElement.getText();

         // texts we need to store
         String quelltext = jTextPaneZumTrainieren.getText();
         String morphText = jTextPaneMorph.getText();

         Vector<String> stringsFromFields = new Vector();

         stringsFromFields.add(delimeterXML);
         stringsFromFields.add(bedingtesZusammenSetzen);
         stringsFromFields.add(bedingtesTrennen);
         stringsFromFields.add(xml);
         stringsFromFields.add(xmlIn);

         stringsFromFields.add(tagset);
         stringsFromFields.add(element);
         stringsFromFields.add(attribute);
         stringsFromFields.add(suffixe);
         stringsFromFields.add(Satzelement);

         stringsFromFields.add(quelltext);
         stringsFromFields.add(morphText);
         try {
              SaveProject(stringsFromFields);
         } catch (IOException ex) {
              Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
         }
        
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        // Zum öffnen eines Projekts
       
            Vector <String>vc = OpenProject();
            if (!vc.isEmpty()) {
                // Notice: The order is very important
                
                // Infos to XML Tokeniser
                jTextFieldDelimeters.setText(vc.elementAt(0));
                jTextFieldBedingtesZusammensetzenXML.setText(vc.elementAt(1));
                jTextFieldBedingtesTrennenXML.setText(vc.elementAt(2));
                xmlElement.setText(vc.elementAt(3));
                elementInXmlElement.setText(vc.elementAt(4));

                // Infos to POS-Trainer
                jTextFieldTagset.setText(vc.elementAt(5));
                jTextFieldTokenElemente.setText(vc.elementAt(6));
                jTextFieldPOSAttribute.setText(vc.elementAt(7));
                jTextFieldSuffixe.setText(vc.elementAt(8));
                jTextField5SatzElement.setText(vc.elementAt(9));

                // texts to Train
                jTextPaneZumTrainieren.setText(vc.elementAt(10));
                jTextPaneMorph.setText(vc.elementAt(11));
            }      
        
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        try {
            // TODO add your handling code here:
            String text = jTextPane19.getText();
            Document doc = new SAXBuilder().build(new StringReader(text));
           
            String xPathForWord = jTextField1.getText();
           
            SortedWordList swl = new SortedWordList(doc, xPathForWord);
            jTextPane25.setText(swl.getSortedWordListAsString());
        } catch (JDOMException ex) {
            Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton14ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        // TODO add your handling code here:
        
        JList list = new JList(new String[] {"From plain text Tokeniser", "From xml tokeniser", "Don't choose any text"});
        JOptionPane.showMessageDialog(
        null, list, "Please choose form which tokeniser", JOptionPane.QUESTION_MESSAGE);
        if (list.getSelectedIndex() == 0){
            String Text = jTextPaneTokeniserAusgabe.getText();
            jTextPane19.setVisible(true);
            jTextPane19.setText(Text);
        }
        if (list.getSelectedIndex() == 1){
            String Text = jTextPaneXmlTokeniserAusgabe.getText();
            jTextPane19.setText(Text);
        }
        
        
        
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        jRadioButtonSuffix.setSelected(true);
        jRadioButtonGross.setSelected(true);
        jRadioButtonKlein.setSelected(true);
        jRadioButtonWordLenght.setSelected(true);
        jRadioButtonSatzPositionAnfang.setSelected(true);
        jRadioButtonTrigrammLeft.setSelected(true);
        jRadioButtonTrigrammRight.setSelected(true);
        jRadioButtonBigrammLeft.setSelected(true);
        jRadioButtonRight.setSelected(true);
        jRadioButtonSatzPositionEnde.setSelected(true);
        jRadioButtonLexikon.setSelected(true);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButtonTaggenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTaggenActionPerformed

        new SwingWorker() {
            @Override
            protected Object doInBackground() throws Exception {

                jButtonTaggen.setEnabled(false);
                jProgressBarTagger.setValue(0);
                boolean booly[] = new boolean[11];
                booly[0] = jRadioButtonLexikon.isSelected();
                booly[1] = jRadioButtonSuffix.isSelected();
                booly[2] = jRadioButtonGross.isSelected();
                booly[3] = jRadioButtonKlein.isSelected();
                booly[4] = jRadioButtonWordLenght.isSelected();
                booly[5] = jRadioButtonTrigrammLeft.isSelected();
                booly[6] = jRadioButtonTrigrammRight.isSelected();
                booly[7] = jRadioButtonBigrammLeft.isSelected();
                booly[8] = jRadioButtonRight.isSelected();
                booly[9] = jRadioButtonSatzPositionAnfang.isSelected();
                booly[10] = jRadioButtonSatzPositionEnde.isSelected();

                boolean prozessDokumentieren = jRadioButtonTaggingsprozess.isSelected();

                String suffMat = jTextPaneSuffix.getText();
                String uppMat = jTextPaneGross.getText();
                String lowMat = jTextPaneKlein.getText();
                String wordL = jTextPaneWordLength.getText();
                String triLeft = jTextPaneTrigrammLeft.getText();
                String triMiddle = jTextPaneTrigrammMiddle.getText();
                String biLeft = jTextPaneBigrammLeft.getText();
                String biRight = jTextPaneBigrammRight.getText();
                String satztA = jTextPaneSatzPositionAnfang.getText();
                String satztE = jTextPaneSatzPositionEnde.getText();
                String lex = jTextPaneLexikon.getText();

                String Input = jTextPaneTaggerInput.getText();
                String tagset = jTextFieldTagset.getText();
                String result = "";
                Vector vc = null;
                try {
                    TaggerXML tagger = new TaggerXML(Input, lex, triLeft, triMiddle, suffMat, uppMat, wordL, satztA, satztE, biLeft, biRight, lowMat);
                    tagger.fullTagging("//w | //c ", booly, prozessDokumentieren, tagset, "sen", jProgressBarTagger);
                    result = tagger.getXmlOutput();
                    vc = tagger.getTabelle();
                } catch (JDOMException e) {
                    System.out.println("IOExeption: Hier ist was schiefgelaufen!");
                    System.out.println(e.getMessage());
                } catch (IOException e) {
                    System.out.println(e.getMessage());
                }
                jTextPaneTaggerOutPut.setText(result);
                StringBuffer sb = new StringBuffer();
                for (int i = 0; i < vc.size(); i++) {
                    Vector vtst = (Vector) vc.elementAt(i);
                    sb.append(vtst.toString());
                }

                jProgressBarTagger.setValue(100);
                jTextPane10.setText(sb.toString());
                jButtonTaggen.setEnabled(true);
                return null;
            }

            protected void done() {
                try {
                    System.out.println("Done");
                    get();
                } catch (ExecutionException e) {
                    e.getCause().printStackTrace();
                    String msg = String.format("Unexpected problem: %s",
                            e.getCause().toString());
                    JOptionPane.showMessageDialog(rootPane,
                            msg, "Error", JOptionPane.ERROR_MESSAGE);
                } catch (InterruptedException e) {
                    // Process e here
                }
                jButtonTaggen.setEnabled(true);
            }
        }.execute();
    }//GEN-LAST:event_jButtonTaggenActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        new SwingWorker() {
            @Override
            protected Object doInBackground() throws Exception {

                try {
                    jButton1.setEnabled(false);

                    //Parameter aus der Oberfläche laden
                    String element = jTextFieldTokenElemente.getText();
                    String attribute = jTextFieldPOSAttribute.getText();
                    String suffixe = jTextFieldSuffixe.getText();
                    String quelltext = jTextPaneZumTrainieren.getText();
                    List words = new ArrayList();
                    List lexiconWords = new ArrayList();
                    XPathExpression xpath = XPathFactory.instance().compile(element);
                    if (jCheckBoxVerwendeDatanbank.isSelected()) {
                        TreePath[] pathes = jTreeTrainingsdata.getSelectionModel().getSelectionPaths();
                        for (int i = 0; i < pathes.length; i++) {
                            TreePath treePath = pathes[i];
                            KorpusTreeNode node = (KorpusTreeNode) treePath.getLastPathComponent();
                            DefaultMutableTreeNode parent = (DefaultMutableTreeNode) node.getParent();
                            System.out.println("Das ist Parent " + parent.getUserObject());
                            String pText = (String) parent.getUserObject();
                            if (pText.equals("Texte")) {
                                String index = node.getID();
                                System.out.println("Die Datei wird geöffnet: " + index);
                                String collection = "db/Utilities/TrainingData";
                                benutzer.getDatabase().setCollection(collection);
                                String text = openFileFromDatabaseWithID(index, benutzer.getDatabase());

                                Document doc;
                                doc = new SAXBuilder().build(new StringReader(text));
                                trainerProgressBar.setValue(10);

                                List wordsBuffer = xpath.evaluate(doc);
                                words.addAll(wordsBuffer);
                                lexiconWords.addAll(wordsBuffer);
                            } else {
                                String index = node.getID();
                                System.out.println("Die Datei wird geöffnet: " + index);
                                String collection = "db/Utilities/TrainingData";
                                benutzer.getDatabase().setCollection(collection);
                                String text = openFileFromDatabaseWithID(index, benutzer.getDatabase());

                                Document doc;
                                doc = new SAXBuilder().build(new StringReader(text));
                                trainerProgressBar.setValue(10);

                                List wordsBuffer = xpath.evaluate(doc);
                                lexiconWords.addAll(wordsBuffer);
                            }
                        }
                    } else {
                        Document doc;
                        doc = new SAXBuilder().build(new StringReader(quelltext));
                        trainerProgressBar.setValue(10);
                        words = xpath.evaluate(doc);
                        lexiconWords.addAll(words);
                    }
                    trainerProgressBar.setValue(20);
                    TrainMatrixXML matrix = new TrainMatrixXML(words);
                    matrix.serAllFreqs(attribute);
                    matrix.setMatrix();

                    String triLeft = matrix.showTriLeft();
                    String triMiddle = matrix.showTriMiddle();
                    String biLeft = matrix.showBiLeft();
                    String biRight = matrix.showBiRight();

                    jTextPane6.setText(triLeft);
                    jTextPane7.setText(triMiddle);
                    jTextPane8.setText(biLeft);
                    jTextPane9.setText(biRight);

                    String triLeftU = matrix.getTriLeft();
                    String triMiddleU = matrix.getTriMiddle();
                    String biLeftU = matrix.getBiLeft();
                    String biRightU = matrix.getBiRight();

                    jTextPaneTrigrammLeft.setText(triLeftU);
                    jTextPaneTrigrammMiddle.setText(triMiddleU);
                    jTextPaneBigrammLeft.setText(biLeftU);
                    jTextPaneBigrammRight.setText(biRightU);

                    // Und ab hier trainieren wir die Suffixe
                    trainerProgressBar.setValue(40);

                    TrainSuffixXML sm;
                    sm = new TrainSuffixXML(words, suffixe);

                    sm.suffixAllFreqs(attribute);
                    sm.setSuffixP();
                    sm.setLengthInfo();

                    jTextPane2.setText(sm.getShowSuffix());
                    jTextPane3.setText(sm.getShowUpper());
                    jTextPane4.setText(sm.getShowLCase());
                    jTextPane5.setText(sm.getShowLength());

                    jTextPaneSuffix.setText(sm.getSuffixP());
                    jTextPaneGross.setText(sm.getUpperP());
                    jTextPaneKlein.setText(sm.getLowerC());
                    jTextPaneWordLength.setText(sm.getLengthP());

                    // Und ab hier trainieren wir die Satzpositionen
                    trainerProgressBar.setValue(60);

                    TrainSentencePositions tsp = new TrainSentencePositions();
                    String attForSentenceNumber = jTextFieldSatzNummerAttr.getText();
                    String punktToken = jTextFieldPunktToken.getText();
                    tsp.setFrequencies(words, attribute);
                    tsp.setFrequenciesBackwards(words, attForSentenceNumber, attribute, "w", punktToken);

                    String WordPosition = tsp.getAnfangPositionenToUse();
                    String WordPositionBackwards = tsp.getEndPositionenToUse();
                    String WordPositionToShow = tsp.getAnfangPositionenToShow();
                    String WordPositionBackwardsToShow = tsp.getEndPositionenToShow();

                    jTextPaneSatzPositionAnfang.setText(WordPosition);
                    jTextPaneSatzPositionEnde.setText(WordPositionBackwards);
                    jTextPane21.setText(WordPositionToShow);
                    jTextPane23.setText(WordPositionBackwardsToShow);

                    // Ab hier trainieren wir das Lexokon
                    trainerProgressBar.setValue(80);

                    TrainLexicon tl = new TrainLexicon(lexiconWords);
                    tl.setWords(attribute);
                    tl.setLexicon();

                    jTextPaneLexikon.setText(tl.getLexikon());
                    jTextPane22.setText(tl.getShowLexikon());
                    jTextFieldTagset.setText(tl.getAllTags());
                    
                    
                    // Evaluieren
                    int insgesamt = words.size();
                    int zwanzigprozent = insgesamt / 20;
                    
                    List evalTokens = words.subList(insgesamt - zwanzigprozent, insgesamt);
                    
                    TaggerXML tagger = new TaggerXML(tl.getLexikon(), triLeftU, triMiddleU, sm.getSuffixP(), sm.getUpperP(), sm.getLengthP(), WordPosition, WordPositionBackwards, biLeftU, biRightU, sm.getLowerC());
                    boolean booly[] = new boolean[11];
                    booly[0] = jRadioButtonLexikon.isSelected();
                    booly[1] = jRadioButtonSuffix.isSelected();
                    booly[2] = jRadioButtonGross.isSelected();
                    booly[3] = jRadioButtonKlein.isSelected();
                    booly[4] = jRadioButtonWordLenght.isSelected();
                    booly[5] = jRadioButtonTrigrammLeft.isSelected();
                    booly[6] = jRadioButtonTrigrammRight.isSelected();
                    booly[7] = jRadioButtonBigrammLeft.isSelected();
                    booly[8] = jRadioButtonRight.isSelected();
                    booly[9] = jRadioButtonSatzPositionAnfang.isSelected();
                    booly[10] = jRadioButtonSatzPositionEnde.isSelected();
                    
                    int correkt = tagger.fullTaggingEval(evalTokens, booly, false, tl.getAllTags(), "sen");
                    float accuracy = ((correkt * 100) / zwanzigprozent);
                    System.out.println("Insgesamt wurden " + insgesamt + " Tokens zum Training verwendet!");
                    System.out.println("Von " +zwanzigprozent + " wurden " + correkt + " richtig getagged mit einer accuracy von " + accuracy);
                    
                    // Hier ist alles fertig
                    trainerProgressBar.setValue(100);
                    

                } catch (IOException ex) {
                    Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(rootPane, "Fehler! \n" + ex.getMessage());
                    
                } catch (JDOMException ex) {
                    JOptionPane.showMessageDialog(rootPane, "Entweder fehlt die Datei zum trainieren oder es gibt einen XML-Fehler! \n" + ex.getMessage());
                    jButton1.setEnabled(true);
                    Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
                }
                return null;
            }
            
            protected void done() {
                try {
                    System.out.println("Done");
                    get();
                } catch (ExecutionException e) {
                    e.getCause().printStackTrace();
                    String msg = String.format("Unexpected problem: %s",
                            e.getCause().toString());
                    JOptionPane.showMessageDialog(rootPane,
                            msg, "Error", JOptionPane.ERROR_MESSAGE);
                } catch (InterruptedException e) {
                    // Process e here
                }
                jButton1.setEnabled(true);
            }
            
        }.execute();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        
        JList list = new JList(new String[] {"From plain text Tokeniser", "From xml tokeniser", "Don't choose any text"});
        JOptionPane.showMessageDialog(
        null, list, "Please choose form which tokeniser", JOptionPane.QUESTION_MESSAGE);
        if (list.getSelectedIndex() == 0){
            String Text = jTextPaneTokeniserAusgabe.getText();
            jTextPaneZumTrainieren.setText(Text);
        }
        if (list.getSelectedIndex() == 1){
            String Text = jTextPaneXmlTokeniserAusgabe.getText();
            jTextPaneZumTrainieren.setText(Text);
        }
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // TODO add your handling code here:
        jTextFielSatzzeichen.setEditable(true);
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // Wir tokenisieren den Text
        String text = jTextPaneTokeniserQuelle.getText();
        String delimeter = jTextFieldDelimeters.getText() + "\t\n";
        String wpunct = jTextFieldWortzeichen.getText();
        String satzzeichen = jTextFielSatzzeichen.getText();
        String par[] = jTextFieldNichtTrennbarePartikel.getText().split(" ");
        try {
//            MyTokeniser mt = new MyTokeniser(delimeter, wpunct, par, satzzeichen);
//
//            //MyTokeniser plt = new MyTokeniser("!$\"\u00a3%^&*()_+=#{}[];:�`/?,. \t\n'", wpunct, par);
//
//            Document doc = mt.TokeniseTextToXml(text);
//            SentenceTokeniserXML sentXML = new SentenceTokeniserXML(doc, "text");
//            XMLOutputter outputter = new XMLOutputter(Format.getPrettyFormat());
//            String xmlString = outputter.outputString(doc);
//            jTextPaneTokeniserAusgabe.setText(xmlString);

        } catch (Exception ex) {
            Logger.getLogger(Luna.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
             try {
            String DateiEndungenZeigen[] = { ".txt" };
            String Data = OpenFile(DateiEndungenZeigen, "Text Dateien");
            
            jTextPaneTokeniserQuelle.setText(Data);
        } catch (IOException ex) {
            Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        jTextFieldNichtTrennbarePartikel.setEditable(true);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        jTextFieldWortzeichen.setEditable(true);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        jTextFieldDelimeters.setEditable(true);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton19ActionPerformed
        try {
            // TODO add your handling code here:
                String text = jTextPane19.getText();
                Document doc = new SAXBuilder().build(new StringReader(text));
                String xPathForWord = jTextField1.getText();
                
                SortedWordList swl = new SortedWordList(doc, xPathForWord);
                jList1.setListData(swl.getSortedWordsAsStringArray());
                
        } catch (JDOMException ex) {
            Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton19ActionPerformed

    private void jButton21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton21ActionPerformed
         try {
            String DateiEndungenZeigen[] = { ".xml" };
            String Data = OpenFile(DateiEndungenZeigen, "Corpus Dateien");
            CorpusModel cm = new CorpusModel(Data, jPanel42, jScrollPane38);
        } catch (IOException ex) {
            Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton21ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton29ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton29ActionPerformed
        // TODO add your handling code here:
        try {
            String DateiEndungenZeigen[] = { ".xml" };
            String Data = OpenFile(DateiEndungenZeigen, "Text Dateien");

            jTextPaneTaggerInput.setText(Data);
        } catch (IOException ex) {
            Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton29ActionPerformed

    private void jButton28ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton28ActionPerformed
        // TODO add your handling code here:
        JList list = new JList(new String[] {"From plain text Tokeniser", "From xml tokeniser", "Sentence spliter", "Standardisation", "Don't choose any text"});
        JOptionPane.showMessageDialog(
        null, list, "Please choose form which tokeniser", JOptionPane.QUESTION_MESSAGE);
        if (list.getSelectedIndex() == 0){
            String Text = jTextPaneTokeniserAusgabe.getText();
            jTextPaneTaggerInput.setText(Text);
        }
        if (list.getSelectedIndex() == 1){
            String Text = jTextPaneXmlTokeniserAusgabe.getText();
            jTextPaneTaggerInput.setText(Text);
        }
        
        if (list.getSelectedIndex() == 2){
            String Text = jTextPaneSentenceSplitterOutput.getText();
            jTextPaneTaggerInput.setText(Text);
        }
        
        if (list.getSelectedIndex() == 3){
            String Text = jTextPaneStandardisationOutput.getText();
            jTextPaneTaggerInput.setText(Text);
        }
       
    }//GEN-LAST:event_jButton28ActionPerformed

    private void jRadioButtonTaggingsprozessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonTaggingsprozessActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButtonTaggingsprozessActionPerformed

    private void jButton36ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton36ActionPerformed
        // TODO add your handling code here:
   
        DefaultTreeModel model = (DefaultTreeModel) jTree1.getModel();

        DefaultMutableTreeNode node1 = (DefaultMutableTreeNode) model.getChild(model.getRoot(), 0);


        JPanel showPane = new JPanel();
        BoxLayout box = new BoxLayout(showPane, BoxLayout.Y_AXIS);
        showPane.setLayout(box);
        JTree treeCopy = new JTree(model);
        JScrollPane pane = new JScrollPane(treeCopy);

        JLabel label = new JLabel("Wählen Sie bitte ein Subkorpus und geben Sie einen Namen für das Unterkorpus an!");
        Font font = label.getFont();
        Font boldFont = new Font(font.getFontName(), Font.BOLD, font.getSize() + 2);
        label.setFont(boldFont);


        showPane.add(label);
        showPane.add(new JLabel("        "));

        showPane.add(pane);

        JComponent[] inputComponents = new JComponent[]{showPane};

        //"Wählen Sie bitte einen Namen für das Unterkorpus!"
        String name = JOptionPane.showInputDialog(inputComponents);

        System.out.println(name);

        TreePath[] pathes = treeCopy.getSelectionModel().getSelectionPaths();
        TreePath treePath = pathes[0];
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) treePath.getLastPathComponent();

        if (node.isLeaf()) {
           JOptionPane.showMessageDialog(rootPane, "Bitte wählen Sie keinen Text, sondern einen Ordner!");
        } else {
            KorpusTreeNode nodeNei = new KorpusTreeNode(name);

            String xml = jTextPaneTaggerOutPut.getText();

            nodeNei.setXMLText(xml);
            node.add(nodeNei);
            model.reload();
            jTree1.repaint();
        }
    }//GEN-LAST:event_jButton36ActionPerformed

   // private String levelabschneiden (String path, int levelunterschied){
   //     String [] array = path.split("/");
        
   // }
    
    private void jTreeRekursive(DefaultMutableTreeNode root, ZipOutputStream zipOut) throws IOException {
        Enumeration en = root.children();
        while (en.hasMoreElements()) {
            DefaultMutableTreeNode node = (DefaultMutableTreeNode) en.nextElement();
            String nodeName = node.toString();

            if (node.isLeaf()) {
                String newPath = path.substring(1);
                ZipEntry entry = new ZipEntry(newPath + nodeName);
                zipOut.putNextEntry(entry);
                if (node instanceof KorpusTreeNode) {
                    KorpusTreeNode korpus = (KorpusTreeNode) node;
                    byte[] buffer = korpus.getXMLText().getBytes();
                    zipOut.write(buffer, 0, buffer.length);
                    zipOut.closeEntry();
                }
            } else {
                path.append(node.toString() + "/");
                String neuPfad = path.toString();

                String nnPfad = neuPfad.substring(0, neuPfad.length() - 1);
                String nnnPfad = nnPfad.substring(0, nnPfad.lastIndexOf("/") + 1);

                jTreeRekursive(node, zipOut);
                path = new StringBuffer(nnnPfad);
            }
        }
    }
    
    private StringBuffer path;
    
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        try {
            // TODO add your handling code here:     
            boolean retval = false;
            ZipOutputStream zipOut = null;
            JFileChooser chooser = new JFileChooser();
            chooser.setAcceptAllFileFilterUsed(false);
            chooser.setDialogTitle("Speichern");
            String DateiEndungenZeigen[] = {".zip"};
            chooser.addChoosableFileFilter(new ExtensionFileFilter(DateiEndungenZeigen, "Luna Corpus database as .zip"));
            chooser.showSaveDialog(null);
           
            
            File f = chooser.getSelectedFile();
            String filePath = f.getAbsolutePath();
            zipOut = new ZipOutputStream(new FileOutputStream(filePath + ".zip"));
            DefaultTreeModel model = (DefaultTreeModel) jTree1.getModel();

            DefaultMutableTreeNode node1 = (DefaultMutableTreeNode) model.getRoot();
            path = new StringBuffer("/"); 
           
            try {
                jTreeRekursive(node1, zipOut);
            } catch (IOException ex) {
                Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                zipOut.close();
            } catch (IOException ex) {
                Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
        }
       
        

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed

        JFileChooser chooser = new JFileChooser();
        chooser.setAcceptAllFileFilterUsed(false);
        chooser.setDialogTitle("Öffnen");
        String DateiEndungenZeigen[] = { ".zip" };
        chooser.addChoosableFileFilter(new ExtensionFileFilter(DateiEndungenZeigen, "Luna ATM Projekte als .zip"));
               
        chooser.showOpenDialog(null);
        File f = chooser.getSelectedFile();
        if (f!=null){
            try {
                zipToJtreeModel(f);
            } catch (IOException ex) {
                Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        }    
       
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void xmlElementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xmlElementActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_xmlElementActionPerformed

    private void jButton27ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton27ActionPerformed
        // Wir tokenisieren den Text
        String text = jTextPaneXmlTokeniserQuelle.getText();
        String delimeter = jTextFieldDelimetersXML.getText() + "\t\n";

        String regex1[] = jTextFieldBedingtesZusammensetzenXML.getText().split("&&");
        String regex2[] = jTextFieldBedingtesTrennenXML.getText().split("&&");

        String element = xmlElement.getText();
        String ausnahmeElemente[] = elementInXmlElement.getText().split(" ");

        try {

            TokeniserXML txml = new TokeniserXML(text, element, delimeter, regex1, regex2, ausnahmeElemente, false);
            jTextPaneXmlTokeniserAusgabe.setText(txml.getOutPut());

        } catch (Exception ex) {
            Logger.getLogger(Luna.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton27ActionPerformed

    private void jButton25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton25ActionPerformed
        // TODO add your handling code here:
         
        try {
            String DateiEndungenZeigen[] = { ".xml" };
            String Data = OpenFile(DateiEndungenZeigen, "Text Dateien");

            jTextPaneXmlTokeniserQuelle.setText(Data);
            System.out.println(jTextPaneXmlTokeniserQuelle.getName());
        } catch (IOException ex) {
            Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton25ActionPerformed

    private void jButton24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton24ActionPerformed
        jTextFieldBedingtesTrennenXML.setEditable(true);
    }//GEN-LAST:event_jButton24ActionPerformed

    private void jButton23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton23ActionPerformed
        jTextFieldBedingtesZusammensetzenXML.setEditable(true);
    }//GEN-LAST:event_jButton23ActionPerformed

    private void jButton22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton22ActionPerformed

        jTextFieldDelimetersXML.setEditable(true);
    }//GEN-LAST:event_jButton22ActionPerformed

     private void splitSentenceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_splitSentenceButtonActionPerformed
          // TODO add your handling code here:
           
           new SwingWorker() {
             @Override
             protected Object doInBackground() throws Exception {
                 splitSentenceButton.setEnabled(false);
                 jProgressBarSentenceSplitter.setValue(20);
                 String satzzeichen = jTextFieldSentenceSplitterTrenner.getText();
                 String inputText = jTextPaneSentenceSplitter.getText();

                 String xmlElementName = jTextFieldSentenceSplitterXmlElement.getText();
                 String textBodyElementName = jTextFieldSentenceSplitterTextBody.getText();

                 try {
                     SentenceTokeniserXML sentXML = new SentenceTokeniserXML(inputText, textBodyElementName, xmlElementName, satzzeichen, jProgressBarSentenceSplitter);
                     jTextPaneSentenceSplitterOutput.setText(sentXML.getOutPut());
                 } catch (IOException ex) {
                     Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
                 } catch (JDOMException ex) {
                     Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
                 }
                 jProgressBarSentenceSplitter.setValue(100);
                 splitSentenceButton.setEnabled(true);
                 return null;
             }
             
         }.execute();
           
     }//GEN-LAST:event_splitSentenceButtonActionPerformed

     private void jButton40ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton40ActionPerformed
          // TODO add your handling code here:
          String text = jTextPaneXmlTokeniserAusgabe.getText();
          jTextPaneSentenceSplitter.setText(text);
     }//GEN-LAST:event_jButton40ActionPerformed

     private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
          // TODO add your handling code here:
          
           JPanel showPane = new JPanel();
           showPane.setLayout(new GridLayout(2, 2));
           
           JLabel name = new JLabel( "Benutzername:");
           JLabel pass = new JLabel( "Password:");
           
           JTextField nameField = new JTextField();
           JPasswordField passField = new JPasswordField();
           
           showPane.add(name);
           showPane.add(nameField);
           showPane.add(pass);
           showPane.add(passField);
           
           JComponent[] inputComponents = new JComponent[]{showPane};

          int retval = JOptionPane.showConfirmDialog(rootPane, inputComponents, "Bitte loggen Sie sich ein", JOptionPane.OK_CANCEL_OPTION);
          String message = null;
          if (retval == 0 ){
             try {
                 String einName = nameField.getText();
                 String passName = passField.getText();
                 message = benutzer.einloggen(einName, passName);
                 JOptionPane.showMessageDialog(rootPane, message);
                 if (benutzer.isLogged()){
                     DatabaseCodes.korpusLaden(benutzer, Gesamtkorpus, jTreeTrainingsdata, jTreeZuTaggendeTexte, jTreeDatabaseForTopicModelling);
                 }
             } catch (ClassNotFoundException ex) {
                 Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
             } catch (InstantiationException ex) {
                 Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
             }
          }
        
          
          System.out.println(retval);
          
     }//GEN-LAST:event_jMenuItem3ActionPerformed

     private void jButton38ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton38ActionPerformed
          // TODO add your handling code here:
         
         String xquerryNeu = " xquery version \"3.0\";"
                 + " for $w in //titleStmt"
                 + " order by $w/title[@type=\"short\"]"
                 + " return "
                 + " if ($w/author/surname!='') "
                 + " then <b id =\"{base-uri($w)}\"> { concat ( concat (string($w/author/surname), ', '),  string($w/title[@type=\"short\"]) )} </b> "
                 + " else <b id =\"{base-uri($w)}\"> { string ($w/title[@type=\"short\"]) } </b> ";
         String pfad = "db/Korpus/Rohdaten";
         
         String datei = openFileFromDatabaseWithXQuerry(pfad, xquerryNeu);
         if (datei != null){
              jTextPaneXmlTokeniserQuelle.setText(datei);
         }
         
     }//GEN-LAST:event_jButton38ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        benutzer.ausloggen();
        JOptionPane.showMessageDialog(rootPane, "Sie sind vom System ausgelogged!");
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jButton39ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton39ActionPerformed
        // TODO add your handling code here:
           if (benutzer.isLogged()) {
            try {
                String text = jTextPaneTaggerOutPut.getText();
                String name = DataModels.getDocumentName(text,  "//author/surname", "//title[@type=\"short\"]");
                if (name != null) {
                    DataModels.putInTheDatabaseWithName(benutzer, "/db/Korpus/fertigGetagged", text, name + ".xml");
                }

            } catch (ParserConfigurationException ex) {
                Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SAXException ex) {
                Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
            } catch (XPathExpressionException ex) {
                Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(rootPane, "Es gibt eine XML-Fehler in der Datei!");
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Bitte loggen Sie sich ein, um eine Datei aus der Datenbank öffnen zu können!");
        }
    }//GEN-LAST:event_jButton39ActionPerformed

    private void jButtonAddRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddRowActionPerformed
        // TODO add your handling code here:
        DefaultTableModel tm = (DefaultTableModel) regExForSandard.getModel();
        //int zahl = tm.getRowCount();
        tm.addRow(new String[]{"", ""});
       // System.out.println("Jetzt hat die Tabelle " + tm.getRowCount() + " Zeilen");
        
    }//GEN-LAST:event_jButtonAddRowActionPerformed

    private void jButtonDeleteRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteRowActionPerformed
        // TODO add your handling code here:
         DefaultTableModel tm = (DefaultTableModel) regExForSandard.getModel();

         int[] rows = regExForSandard.getSelectedRows();
         // System.out.println("Zeilen im Datenmodel: " + tm.getRowCount() + " Selected rows Anzahl " + rows.length + " Inhalt " + Arrays.toString(rows));
         if (rows.length != 0) {

              // Stop editieren
              if (regExForSandard.isEditing()) {
                   regExForSandard.getCellEditor().stopCellEditing();
              }

              for (int i = 0; i < rows.length; i++) {
                   int rowToDelete = rows[i];
                   //  System.out.println("gelöscht Reihe: " + rowToDelete + " geblieben " + tm.getRowCount());
                   tm.removeRow(rowToDelete - i);
              }

         } else {
              JOptionPane.showMessageDialog(rootPane, "Bitte wählen Sie mindestens eine Reihe aus, um löschen zu können!");
         }

    }//GEN-LAST:event_jButtonDeleteRowActionPerformed

    private void jButtonStandardisationExecuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStandardisationExecuteActionPerformed
        
         new SwingWorker() {
            @Override
            protected Object doInBackground() {
                try {
                    // Stop editieren
                    if (regExForSandard.isEditing()) {
                        regExForSandard.getCellEditor().stopCellEditing();
                    }
                    DefaultTableModel tm = (DefaultTableModel) regExForSandard.getModel();
                    HashMap hashy = DataModels.TableToHashMap(tm);
                    if (!hashy.isEmpty()) {
                        jButtonStandardisationExecute.setEnabled(false);
                        jProgressBarStandardisation.setValue(2);
                        String text = jTextPaneStandardisationInput.getText();
                        Standardisation stan = new Standardisation(text, hashy, jProgressBarStandardisation);
                        String OutPut = stan.getOutPut();
                        jTextPaneStandardisationOutput.setText(OutPut);
                        jProgressBarStandardisation.setValue(100);
                        jButtonStandardisationExecute.setEnabled(true);
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "Die Felder zum Austauschen sind leer. Bitte schreiben Sie entwerder gültige Ausdrücke, oder "
                                + "wenn Sie nichts austaschen wollen, dann löschen Sie alle Felder!");
                    }
                } catch (JDOMException ex) {
                    Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
                    System.err.println("Jdom Fehler!");
                } catch (IOException ex) {
                    Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
                    System.err.println("IO-Fehler");
                }
                return null;
            }
        }.execute();

    }//GEN-LAST:event_jButtonStandardisationExecuteActionPerformed

     private void jButtonStandardisationSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStandardisationSaveActionPerformed

          // Stop editieren
          if (regExForSandard.isEditing()) {
               regExForSandard.getCellEditor().stopCellEditing();
          }
          DefaultTableModel tm = (DefaultTableModel) regExForSandard.getModel();
          HashMap hashy = DataModels.TableToHashMap(tm);
          String xml = DataModels.HashMapToXMLStandardisation(hashy);   
          DataModels.putInTheDatabaseAskName(benutzer, "/db/Utilities/StandRegex", xml);
     }//GEN-LAST:event_jButtonStandardisationSaveActionPerformed

     private void jButton44ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton44ActionPerformed
          // TODO add your handling code here:
                   // TODO add your handling code here:
          String text = jTextPaneSentenceSplitterOutput.getText();
          jTextPaneStandardisationInput.setText(text);
     }//GEN-LAST:event_jButton44ActionPerformed

     private void jButtonStandardisationLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStandardisationLoadActionPerformed
          if (benutzer.isLogged()) {
             try {
                 ExistDatabase database = benutzer.getDatabase();
                 String[] werke = database.getResourses("/db/Utilities/StandRegex");

                 JList list = new JList(werke);
                 JScrollPane scrollPane = new JScrollPane();
                 scrollPane.setSize(new Dimension(400, 400));
                 scrollPane.setViewportView(list);
                 int answer = JOptionPane.showConfirmDialog(rootPane, scrollPane, "Bitte einen Text auswählen", JOptionPane.OK_CANCEL_OPTION);
                 if (answer == 0) {
                     int selected = list.getSelectedIndex();
                     System.out.println(selected);
                     if (selected != -1) {
                         // System.out.println(id);
                         String datei = database.getXmlFile(werke[selected]);
                         DefaultTableModel tm = DataModels.XMLtoTableModel(datei); 
                         regExForSandard.setModel(tm);
                         
                     }
                 }
                 database.cleanup();


             } catch (ParserConfigurationException ex) {
                 Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
             } catch (SAXException ex) {
                 Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
             } catch (IOException ex) {
                 Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
             }  catch (TransformerConfigurationException ex) {
                 Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
             } catch (TransformerException ex) {
                 Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
             } catch (XMLDBException ex) {
                 Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
             }


           
           }
         
         
         
     }//GEN-LAST:event_jButtonStandardisationLoadActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        
        
        
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jButtonOpenDatabaseTrainerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOpenDatabaseTrainerActionPerformed
        
                String xquerry = " xquery version \"3.0\"; "
                  //       + "declare namespace xsd = \"http://www.tei-c.org/ns/1.0\";"
                         + "  for $w in //title[@type=\"short\"] "
                         + "return <b id =\"{base-uri($w)}\"> {string ($w)} </b>";

                String pfad = "db/Utilities/TrainingData";
                String datei = openFileFromDatabaseWithXQuerry(pfad, xquerry);
                if (datei != null){
                jTextPaneZumTrainieren.setText(datei);
                }
    }//GEN-LAST:event_jButtonOpenDatabaseTrainerActionPerformed

    private void jButtonTrainerToDatabaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTrainerToDatabaseActionPerformed
        String pfad = "/db/Utilities/TrainingData";
        String text = jTextPaneZumTrainieren.getText();
        DataModels.putInTheDatabaseAskName(benutzer, pfad, text);
    }//GEN-LAST:event_jButtonTrainerToDatabaseActionPerformed

    private void jButtonStandardisationTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStandardisationTestActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonStandardisationTestActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        Vector v = getDataToStore();
        storeDataToDatabase(v);
        
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jButtonSpeichernDatenbankStandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSpeichernDatenbankStandActionPerformed
         if (benutzer.isLogged()) {
              try {
                   String pfad = "/db/Korpus/tokenSentenceStandard";
                   String text = jTextPaneStandardisationOutput.getText();
                   String name = DataModels.getDocumentName(text,  "//author/surname", "//title[@type=\"short\"]");
                   DataModels.putInTheDatabaseWithName(benutzer, pfad, text, name + ".xml");

                   String pfadP = "/db/Utilities/ParameterStandardisation";
                   Vector vP = getDataToStore();
                   String textP = xmlFromParameter(vP);
                   DataModels.putInTheDatabaseWithName(benutzer, pfadP, textP, name + "Parameter.xml");
                   JOptionPane.showMessageDialog(rootPane, "Die standardisierte Datei wurde gespeichert!");

                   //  DataModels.putInTheDatabaseWithName(benutzer, pfad, text,name);
              } catch (ParserConfigurationException ex) {
                   Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
              } catch (SAXException ex) {
                   Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
              } catch (IOException ex) {
                   Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
              } catch (XPathExpressionException ex) {
                   Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
              }
         } else {
              JOptionPane.showMessageDialog(rootPane, "Bitte loggen Sie sich ein, um eine Datei aus der Datenbank öffnen zu können!");
         }

    }//GEN-LAST:event_jButtonSpeichernDatenbankStandActionPerformed

    private void jButton42ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton42ActionPerformed
          
          if (benutzer.isLogged()){
              DatabaseGUI.getSuffixSort(benutzer.getDatabase(), jComboBoxSuffix);
              DatabaseGUI.getUserSort(benutzer.getDatabase(), jComboBoxUserName);
          }
        
    }//GEN-LAST:event_jButton42ActionPerformed

    private void jButtonAffixeZeigenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAffixeZeigenActionPerformed
        /*
        if (benutzer.isLogged()){
            try {
                databaseGUI.removeAll();
               
                String suffix = jComboBoxSuffix.getSelectedItem().toString();
                MorphSearchEngineExist morphSuche = new MorphSearchEngineExist(benutzer.getDatabase());
                String oldWord = "";
                ResourceSet result = morphSuche.getElementWithAffix(suffix);
                for (int i = 0; i < result.getSize(); i++) {
                    XMLResource xMLResource = (XMLResource) result.getResource(i);
                    Node node = (Node) xMLResource.getContentAsDOM();
                    Element childNode = (Element) node.getFirstChild();
                    String childText = childNode.getTextContent();
                    morphSuche.getContext(childNode, databaseGUI, i, oldWord);
                    oldWord = childText;
                }
                
                jScrollPane51.getVerticalScrollBar().setUnitIncrement(16);
                jScrollPane51.validate();
                
            } catch (XMLDBException ex) {
                Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
        */
    }//GEN-LAST:event_jButtonAffixeZeigenActionPerformed

    private void jButton34ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton34ActionPerformed
          if (benutzer.isLogged()) {
              try {
                   String pfad = "/db/Korpus/tokenSentence";
                   String text = jTextPaneSentenceSplitterOutput.getText();
                   String name = DataModels.getDocumentName(text, "//author/surname", "//title[@type=\"short\"]");
                   DataModels.putInTheDatabaseWithName(benutzer, pfad, text, name + ".xml");

                   String pfadP = "/db/Utilities/ParameterStandardisation";
                   Vector vP = getDataToStore();
                   String textP = xmlFromParameter(vP);
                   DataModels.putInTheDatabaseWithName(benutzer, pfadP, textP, name + "ParameterTokenizer.xml");
                   JOptionPane.showMessageDialog(rootPane, "Die Tokenisierte Datei wurde gespeichert!");
                   //  DataModels.putInTheDatabaseWithName(benutzer, pfad, text,name);
              } catch (ParserConfigurationException ex) {
                   Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
              } catch (SAXException ex) {
                   Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
              } catch (IOException ex) {
                   Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
              } catch (XPathExpressionException ex) {
                   Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
              }
         } else {
              JOptionPane.showMessageDialog(rootPane, "Bitte loggen Sie sich ein, um eine Datei aus der Datenbank öffnen zu können!");
         }
                
    }//GEN-LAST:event_jButton34ActionPerformed

    private void jButton45ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton45ActionPerformed
        
                String xquerry = " xquery version \"3.0\"; "
                  //       + "declare namespace xsd = \"http://www.tei-c.org/ns/1.0\";"
                         + "  for $w in //title[@type=\"short\"] "
                         + " order by $w "
                         + "return <b id =\"{base-uri($w)}\"> {string ($w)} </b>";

                String pfad = "db/Korpus/tokenSentence";
                String datei = openFileFromDatabaseWithXQuerry(pfad, xquerry);
                if (datei != null){
                jTextPaneStandardisationInput.setText(datei);
                }
    }//GEN-LAST:event_jButton45ActionPerformed

    private void jLabel54MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel54MouseClicked
        // TODO add your handling code here:
        
        JOptionPane.showMessageDialog(rootPane, "Bitte geben Sie Reguläre Ausdrücke, um die Ausgabe der Standardtokenisierung anzupassen. \n"
                + "Es können mehrere Ausdrücke eingegeben werden. Diese werden mit && von einander getrennt. \n"
                + "Jeder Ausdruck besteht aus zwei teilen. 1) Suchstring 2) Ersetzen bzw. Trennen. Diese zwei \n"
                + "werden mit einem -> verbunden!");
    }//GEN-LAST:event_jLabel54MouseClicked

    private void jTextFieldDelimetersXMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldDelimetersXMLActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldDelimetersXMLActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed

        if (benutzer.isLogged()) {
            
            StringBuilder buffi = new StringBuilder();
            String pfad = "db/Utilities/TrainingData";
            buffi.append("Informantionen zur Datenbank: \n ");
            buffi.append("Trainingsdata: ");
            DatabaseCodes.getStatistics(pfad, buffi, benutzer);
            
            String pfadStandard = "db/Korpus/tokenSentenceStandard";
            buffi.append("Normalisiert: ");
            DatabaseCodes.getStatistics(pfadStandard, buffi, benutzer);
           
            String pfadTokenised = "db/Korpus/tokenSentence";
            buffi.append("Tokenisiert: ");
            DatabaseCodes.getStatistics(pfadTokenised, buffi, benutzer);
            
            JScrollPane scroll = new JScrollPane();
            JTextPane pane = new JTextPane();
            scroll.setPreferredSize(new Dimension(800, 400));
            scroll.setViewportView(pane);
            pane.setText(buffi.toString());
            scroll.setVisible(true);
            scroll.validate();
            JOptionPane.showMessageDialog(rootPane, scroll);

        } else {
            JOptionPane.showMessageDialog(rootPane, "Bitte loggen Sie sich ein, um die Informationen zur Datenbank sehen zu können!");
        }
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jButton35ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton35ActionPerformed
           String xquerry = " xquery version \"3.0\"; "
                  //       + "declare namespace xsd = \"http://www.tei-c.org/ns/1.0\";"
                         + "  for $w in //title[@type=\"short\"] "
                         + " order by $w "
                         + "return <b id =\"{base-uri($w)}\"> {string ($w)} </b>";

                String pfad = "db/Korpus/tokenSentenceStandard";
                String datei = openFileFromDatabaseWithXQuerry(pfad, xquerry);
                if (datei != null){
                    jTextPaneTaggerInput.setText(datei);
                }
    }//GEN-LAST:event_jButton35ActionPerformed

    private void jButtonTaggenDatabaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTaggenDatabaseActionPerformed
         new SwingWorker() {
            @Override
            protected Object doInBackground() throws Exception {

                jButtonTaggen.setEnabled(false);
                jButtonTaggenDatabase.setEnabled(false);
                jProgressBarTagger.setValue(0);
                boolean booly[] = new boolean[11];
                booly[0] = jRadioButtonLexikon.isSelected();
                booly[1] = jRadioButtonSuffix.isSelected();
                booly[2] = jRadioButtonGross.isSelected();
                booly[3] = jRadioButtonKlein.isSelected();
                booly[4] = jRadioButtonWordLenght.isSelected();
                booly[5] = jRadioButtonTrigrammLeft.isSelected();
                booly[6] = jRadioButtonTrigrammRight.isSelected();
                booly[7] = jRadioButtonBigrammLeft.isSelected();
                booly[8] = jRadioButtonRight.isSelected();
                booly[9] = jRadioButtonSatzPositionAnfang.isSelected();
                booly[10] = jRadioButtonSatzPositionEnde.isSelected();

                boolean prozessDokumentieren = jRadioButtonTaggingsprozess.isSelected();

                String suffMat = jTextPaneSuffix.getText();
                String uppMat = jTextPaneGross.getText();
                String lowMat = jTextPaneKlein.getText();
                String wordL = jTextPaneWordLength.getText();
                String triLeft = jTextPaneTrigrammLeft.getText();
                String triMiddle = jTextPaneTrigrammMiddle.getText();
                String biLeft = jTextPaneBigrammLeft.getText();
                String biRight = jTextPaneBigrammRight.getText();
                String satztA = jTextPaneSatzPositionAnfang.getText();
                String satztE = jTextPaneSatzPositionEnde.getText();
                String lex = jTextPaneLexikon.getText();

                String tagset = jTextFieldTagset.getText();
                String result = "";
                Vector vc = null;
                TreePath[] pathes = jTreeZuTaggendeTexte.getSelectionModel().getSelectionPaths();
                for (int i = 0; i < pathes.length; i++) {
                    TreePath treePath = pathes[i];
                    KorpusTreeNode node = (KorpusTreeNode) treePath.getLastPathComponent();
                    String index = node.getID();
                    System.out.println("Die Datei wird geöffnet: " + index);
                    String collection = "db/Korpus/tokenSentenceStandard";
                    benutzer.getDatabase().setCollection(collection);
                    try {
                        String Input = openFileFromDatabaseWithID(index, benutzer.getDatabase());
                        try {
                            TaggerXML tagger = new TaggerXML(Input, lex, triLeft, triMiddle, suffMat, uppMat, wordL, satztA, satztE, biLeft, biRight, lowMat);
                            tagger.fullTagging("//w | //c ", booly, prozessDokumentieren, tagset, "sen", jProgressBarTagger);
                            result = tagger.getXmlOutput();
                            vc = tagger.getTabelle();
                        } catch (JDOMException e) {
                            System.out.println("IOExeption: Hier ist was schiefgelaufen!");
                            System.out.println(e.getMessage());
                        } catch (IOException e) {
                            System.out.println(e.getMessage());
                        }
                        if (benutzer.isLogged()) {
                            try {
                                String name = DataModels.getDocumentName(result, "//author/surname", "//title[@type=\"short\"]");
                                if (name != null) {
                                    DataModels.putInTheDatabaseWithName(benutzer, "/db/Korpus/fertigGetagged", result, name + ".xml");
                                }
                            } catch (ParserConfigurationException ex) {
                                Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
                            } catch (SAXException ex) {
                                Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
                            } catch (IOException ex) {
                                Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
                            } catch (XPathExpressionException ex) {
                                Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
                                JOptionPane.showMessageDialog(rootPane, "Es gibt eine XML-Fehler in der Datei!");
                            }
                        } else {
                            JOptionPane.showMessageDialog(rootPane, "Bitte loggen Sie sich ein, um eine Datei aus der Datenbank öffnen zu können!");
                        }

                        StringBuffer sb = new StringBuffer();
                        for (int y = 0; y < vc.size(); y++) {
                            Vector vtst = (Vector) vc.elementAt(y);
                            sb.append(vtst.toString());
                        }

                        jProgressBarTagger.setValue(100);
                        jTextPane10.setText(sb.toString());

                    } catch (XMLDBException ex) {
                        Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (TransformerConfigurationException ex) {
                        Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (TransformerException ex) {
                        Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
                return null;
            }
            protected void done() {
                try {
                    System.out.println("Done");
                    get();
                } catch (ExecutionException e) {
                    e.getCause().printStackTrace();
                    String msg = String.format("Unexpected problem: %s",
                            e.getCause().toString());
                    JOptionPane.showMessageDialog(rootPane,
                            msg, "Error", JOptionPane.ERROR_MESSAGE);
                } catch (InterruptedException e) {
                    // Process e here
                }
                jButtonTaggen.setEnabled(true);
                jButtonTaggenDatabase.setEnabled(true);
            }
        }.execute();
    }//GEN-LAST:event_jButtonTaggenDatabaseActionPerformed

    private void jButtonSucheRegExActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSucheRegExActionPerformed
        // TODO add your handling code here:
            if (benutzer.isLogged()) {
           
            SwingWorker morphalSuche;
            morphalSuche = new SwingWorker() {
                @Override
                protected Object doInBackground() throws Exception {
                    try {
                        //       JPanel trennerContainer = new JPanel();
                        //       JLabel trenner = new JLabel("_____________" + node.toString() + "______________");
                        //       trennerContainer.setLayout(new FlowLayout(FlowLayout.LEFT));

                        //        trennerContainer.add(trenner);
                        //       trennerContainer.setMaximumSize(new Dimension(Integer.MAX_VALUE, trennerContainer.getMinimumSize().height));
                        //       affixGUI.add(trennerContainer);

                        String regex = jTextFieldRegEx.getText();
                        String wortklasse = jTextFieldWortklasseRegex.getText();
                        String prefix = jTextFieldPrefixSearchAnnations.getText();
                        String suffix = jTextFieldSuffixSearchAnnotations.getText();
                        
                        if (!regex.isEmpty()) {
                            jPanelRegExStichworte.removeAll();
                            jButtonSucheRegEx.setEnabled(false);
                            ExistDatabase database = benutzer.getDatabase();
                            MorphSearchEngineExist morphSearch = new MorphSearchEngineExist(database);
                             String pfad = "db/Korpus/fertigGetagged";
                            ResourceSet result = morphSearch.doRegExSearch(regex, wortklasse, pfad);
                           LinkedHashMap<String, ArrayList<HashMap<String, String>>> map = morphSearch.makeTypes(result, jProgressBarRegExSuche);
                            System.out.println("size of result of the first lucene search: " + result.getSize());
                            morphSearch.printStatisticTypeToken(jPanelRegExStichworte, map.size()+"", result.getSize()+"");
                            
                            Object [] types = map.keySet().toArray();
                           
                            for (int i = 0; i < types.length; i++){
                            
                                int percent = (int) ((i * 100) / types.length);
                                jProgressBarRegExSuche.setValue(percent);
                             
                                String word = (String) types[i];
                                ArrayList<HashMap<String, String>> list = map.get(word);
                               System.out.println(word+"("+list.size()+")");
             
                          //          System.out.println(element.getAttribute("id"));
                                morphSearch.printToGUIStichwort(word, list, jPanelRegExStichworte, jPanelRegexKontext);
                                jPanelRegExStichworte.revalidate();
                                jPanelRegExStichworte.repaint();

                            }
             
                            jProgressBarRegExSuche.setValue(100);
                        } else if (!prefix.isEmpty() || !suffix.isEmpty()){
            
                            jPanelRegExStichworte.removeAll();

                            ExistDatabase database = benutzer.getDatabase();
                            MorphSearchEngineExist morphSearch = new MorphSearchEngineExist(database);
                            jProgressBarRegExSuche.setValue(20);
                            ResourceSet result = morphSearch.getElementWithSuffix(suffix, wortklasse);
                            LinkedHashMap<String, ArrayList<HashMap<String, String>>> map = morphSearch.makeTypes(result, jProgressBarRegExSuche);
                            System.out.println("size of result prefix search: " + result.getSize());
                            
                            morphSearch.printStatisticTypeToken(jPanelRegExStichworte, map.size()+"", result.getSize()+"");
                            
                            Object [] types = map.keySet().toArray();
                           
                            for (int i = 0; i < types.length; i++){
                            
                                int percent = (int) ((i * 100) / types.length);
                                jProgressBarRegExSuche.setValue(percent);
                             
                                String word = (String) types[i];
                                ArrayList list = map.get(word);
                                 System.out.println(word+"("+list.size()+")");
                                morphSearch.printToGUIStichwort(word, list, jPanelRegExStichworte, jPanelRegexKontext);
                                jPanelRegExStichworte.revalidate();
                                jPanelRegExStichworte.repaint();

                            }
             
                            jProgressBarRegExSuche.setValue(100);
                        } 
                        
                        
                        else {
                            JOptionPane.showMessageDialog(rootPane, "Bitte füllen Sie mindestens ein Feld (RegEx oder Affixe) aus, um"
                                    + " in der Datenbank suchen zu können!");
                        }
                        /*

                         TreePath[] pathes = Gesamtkorpus.getSelectionModel().getSelectionPaths();
                         for (int i = 0; i < pathes.length; i++) {
                         TreePath treePath = pathes[i];

                         KorpusTreeNode node = (KorpusTreeNode) treePath.getLastPathComponent();
                         System.out.println(node.getID());
                         JPanel trennerContainer = new JPanel();
                         JLabel trenner = new JLabel("_____________" + node.toString() + "______________");
                         trennerContainer.setLayout(new FlowLayout(FlowLayout.LEFT));

                         trennerContainer.add(trenner);
                         trennerContainer.setMaximumSize(new Dimension(Integer.MAX_VALUE, trennerContainer.getMinimumSize().height));
                         affixGUI.add(trennerContainer);

                         }*/
                        // sollte das nicht am Anfang stehen?
                        jScrollPaneRegExKontext.getVerticalScrollBar().setUnitIncrement(16);
                        jScrollPaneRegExKontext.validate();
                        jButtonSucheRegEx.setEnabled(true);
                    } catch (XMLDBException ex) {
                        Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    return null;
                }
                protected void done() {
                try {
                    System.out.println("Done");
                    get();
                } catch (ExecutionException e) {
                    e.getCause().printStackTrace();
                    String msg = String.format("Unexpected problem: %s",
                            e.getCause().toString());
                    JOptionPane.showMessageDialog(rootPane,
                            msg, "Error", JOptionPane.ERROR_MESSAGE);
                } catch (InterruptedException e) {
                    // Process e here
                }
                jButtonSuchenStichworte.setEnabled(true);
            }
            };
            if (morphalSuche.getState() == StateValue.STARTED) {
                morphalSuche.cancel(true);
            } else {
                morphalSuche.execute();
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Bitte loggen Sie sich ein, um eine Datei aus der Datenbank öffnen zu können!");
        }

        
        
        
    }//GEN-LAST:event_jButtonSucheRegExActionPerformed

    private void jButton41ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton41ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton41ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setAcceptAllFileFilterUsed(false);
        chooser.setDialogTitle("Öffnen");
        String DateiEndungenZeigen[] = {".xlsx"};
        chooser.addChoosableFileFilter(new ExtensionFileFilter(DateiEndungenZeigen, "Luna ATM Projekte als .zip"));

        chooser.showOpenDialog(null);
        File f = chooser.getSelectedFile();
        StringBuilder sb = new StringBuilder();
        Document doc = new Document();
        
        if (f != null) {
            try {
                FileInputStream file = new FileInputStream(f);
                XSSFWorkbook workbook = new XSSFWorkbook(file);
                XSSFSheet sheet = workbook.getSheetAt(0);
                Row header = sheet.getRow(0);
                int size = header.getPhysicalNumberOfCells();
                org.jdom2.Element corpus = new org.jdom2.Element("corpus");
                doc.setRootElement(corpus);
                // die ganzen Reihen aus der Datei lesen
                for (int r = 1; r < sheet.getPhysicalNumberOfRows(); r++) {
                    // Zellen aus einer Reihe
                    Row cells = sheet.getRow(r);
                    HashMap map = new HashMap();
                    org.jdom2.Element post = new org.jdom2.Element("post");
                    corpus.addContent(post);
                    // Zellen aus einer Reihe in eine HashMap speichern
                    for (int i = 0; i < size; i++) {

                        Cell fieldCell = header.getCell(i);
                        String field = fieldCell.getStringCellValue();

                        Cell cell = cells.getCell(i);
                        if (cell != null) {
                            String value = getCellValue(cell); //.replaceAll("�", "ä");                            
                            if (field != null && value != null && !field.isEmpty() && !value.isEmpty() && value.trim().length() > 0) {
                                //System.out.println("Cells number: " + size + " " + i + ". <" + field + "> >>>> <" + value + ">");
                               org.jdom2.Element spalte = new org.jdom2.Element(field);
                               spalte.setText(value);
                               post.addContent(spalte);
                               //sb.append("<" + field + ">" + value + "</" + field + ">");
                            }
                        }
                    }
                    
                 
                }
                XMLOutputter out = new XMLOutputter(Format.getPrettyFormat());
                String string = out.outputString(doc);
                jTextPaneXmlTokeniserQuelle.setText(string);        
            } catch (IOException ex) {
                Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
            }

        }



    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.setAcceptAllFileFilterUsed(false);
        chooser.setDialogTitle("Öffnen");
        String DateiEndungenZeigen[] = {".xlsx"};
        chooser.addChoosableFileFilter(new ExtensionFileFilter(DateiEndungenZeigen, "Luna ATM Projekte als .zip"));

        chooser.showOpenDialog(null);
        File f = chooser.getSelectedFile();
        StringBuilder sb = new StringBuilder();
        String xmlfile = jTextPaneXmlTokeniserQuelle.getText();
        String message = JOptionPane.showInputDialog(rootPane, "Please give the names of the redundant elements separated by a black space!");
        String[] elements = message.split(" ");
        List listElemente = Arrays.asList(elements);
        if (f != null) {
            try {
                Document doc = new SAXBuilder().build(new StringReader(xmlfile));
                FileInputStream file = new FileInputStream(f);
                XSSFWorkbook workbook = new XSSFWorkbook(file);
                XSSFSheet sheet = workbook.getSheetAt(0);
                Row header = sheet.getRow(0);
                int size = header.getPhysicalNumberOfCells();

                // die ganzen Reihen aus der Datei lesen
                for (int r = 1; r < sheet.getPhysicalNumberOfRows(); r++) {
                    // Zellen aus einer Reihe
                    Row cells = sheet.getRow(r);
                    Cell post_id = cells.getCell(0);
                    String pid = post_id.getStringCellValue();
                    List textStuecke = XPath.selectNodes(doc, "//post[post_id='" + pid + "']");
                    Iterator iti = textStuecke.iterator();
                    while (iti.hasNext()) {

                        org.jdom2.Element textstueck = (org.jdom2.Element) iti.next();
                        
                        org.jdom2.Element comment = new org.jdom2.Element("comment");
                        

                        // Zellen aus einer Reihe in eine HashMap speichern
                        for (int i = 0; i < size; i++) {

                            Cell fieldCell = header.getCell(i);
                            String field = fieldCell.getStringCellValue();

                            Cell cell = cells.getCell(i);
                            if (cell != null) {
                                String value = getCellValue(cell); //.replaceAll("�", "ä");                            
                                if (field != null && value != null && !field.isEmpty() && !value.isEmpty() && value.trim().length() > 0) {
                                    //System.out.println("Cells number: " + size + " " + i + ". <" + field + "> >>>> <" + value + ">");
                                        if (!listElemente.contains(field)){
                                            org.jdom2.Element spalte = new org.jdom2.Element(field);
                                            spalte.setText(value);
                                            comment.addContent(spalte);
                                        }
                                }
                            }

                            //sb.append("<" + field + ">" + value + "</" + field + ">");
                        }
                        textstueck.addContent(comment);
                    }
                }

                XMLOutputter out = new XMLOutputter(Format.getPrettyFormat());
                String string = out.outputString(doc);
                jTextPaneXmlTokeniserQuelle.setText(string);
            } catch (JDOMException ex) {
                Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jButton47ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton47ActionPerformed
        String wortklasse = jTextFieldWortklasseRegex.getText();
        jPanelRegexKontext.removeAll();
        jButtonSucheRegEx.setEnabled(false);
        
        int z = 0;
        for (Component comp : jPanelRegExStichworte.getComponents()) {    
            if (comp instanceof JPanel) {
                JPanel pan = (JPanel) comp;
                for (Component comp2 : pan.getComponents()) {
                    if (comp2 instanceof JLabel) {
                        if (z != 0) {
                            JLabel label = (JLabel) comp2;
                            String word1 = label.getText();
                            String regular = word1.split(" ")[0].toLowerCase();
                            System.out.println(regular);
                            
                            
                             // TODO add your handling code here:
            if (benutzer.isLogged()) {
           
           
                    try {
                            
                        if (!regular.isEmpty()) {
                           
                            ExistDatabase database = benutzer.getDatabase();
                            MorphSearchEngineExist morphSearch = new MorphSearchEngineExist(database);
                            ResourceSet result = morphSearch.doRegExSearchInUnannotated(regular, wortklasse);
                            LinkedHashMap<String, ArrayList<HashMap<String, String>>> map = morphSearch.makeTypes(result, jProgressBarRegExSuche);
                            System.out.println("size of result of the first lucene search: " + result.getSize());
                           // morphSearch.printStatisticTypeToken(jPanelRegexKontext, map.size()+"", result.getSize()+"");
                            
                            Object [] types = map.keySet().toArray();
                           
                            for (int i = 0; i < types.length; i++){
                            
                                int percent = (int) ((i * 100) / types.length);
                                jProgressBarRegExSuche.setValue(percent);
                             
                                String word = (String) types[i];
                                ArrayList <HashMap<String, String>> list = map.get(word);
                            //    System.out.println("for: " + word);
             
                          //          System.out.println(element.getAttribute("id"));
                                morphSearch.printToGUIStichwort(word, list, jPanelRegexKontext, jPanelRegexDetail);
                                jPanelRegexKontext.revalidate();
                                jPanelRegexKontext.repaint();

                            }
             
                            jProgressBarRegExSuche.setValue(100);
                        } 
                        
                        else {
                            JOptionPane.showMessageDialog(rootPane, "Bitte füllen Sie mindestens ein Feld (RegEx oder Affixe) aus, um"
                                    + " in der Datenbank suchen zu können!");
                        }
                        /*

                         TreePath[] pathes = Gesamtkorpus.getSelectionModel().getSelectionPaths();
                         for (int i = 0; i < pathes.length; i++) {
                         TreePath treePath = pathes[i];

                         KorpusTreeNode node = (KorpusTreeNode) treePath.getLastPathComponent();
                         System.out.println(node.getID());
                         JPanel trennerContainer = new JPanel();
                         JLabel trenner = new JLabel("_____________" + node.toString() + "______________");
                         trennerContainer.setLayout(new FlowLayout(FlowLayout.LEFT));

                         trennerContainer.add(trenner);
                         trennerContainer.setMaximumSize(new Dimension(Integer.MAX_VALUE, trennerContainer.getMinimumSize().height));
                         affixGUI.add(trennerContainer);

                         }*/
                        // sollte das nicht am Anfang stehen?
                      
                    } catch (XMLDBException ex) {
                        Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
                    }
                   
        } else {
            JOptionPane.showMessageDialog(rootPane, "Bitte loggen Sie sich ein, um eine Datei aus der Datenbank öffnen zu können!");
        }

        
        
        
                                                        
                            
                            
                        }
                    }
                }
            }
            z++;
        }

          jScrollPaneRegExKontext.getVerticalScrollBar().setUnitIncrement(16);
          jScrollPaneRegExKontext.validate();
          jButtonSucheRegEx.setEnabled(true);
    }//GEN-LAST:event_jButton47ActionPerformed

    private void jButton48ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton48ActionPerformed
        // TODO add your handling code here:
        
         String prefix = jTextFieldPrefixSearchAnnations.getText();
        String suffix = jTextFieldSuffixSearchAnnotations.getText();
        String att = null;
        String value = null;
        if (prefix.equals("") && suffix.equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Entweder das Suffixfeld oder das Prefixfeld muss einen Wert haben, um die Daten speichern zu können!");
        } 
        else 
        {
            
        if (prefix.equals("")) {
            if (!suffix.equals("")) {
                att = "suffix";
                value = suffix;
            }
        } else if (suffix.equals("")) {
            if (!prefix.equals("")) {
                att = "prefix";
                value = prefix;
            }
        }
        
        for (Component comp : jPanelRegexKontext.getComponents()) {
            if (comp instanceof JPanelForTypes) {
                JPanelForTypes pan = (JPanelForTypes) comp;
                JCheckBox boxL = pan.getJa();
                JCheckBox boxR = pan.getNein();

                ArrayList<HashMap<String, String>> els = pan.getElements();

                for (int y = 0; y < els.size(); y++) {
                    HashMap<String, String> element =  els.get(y);

                    String fileID = element.get("fileId");
                    String wortID = element.get("id");
                    String pos = element.get("pos");
                    //String att = element.getAttribute("pos");
                    
                    
                    System.out.println(wortID + " " + fileID + " " + pos);
                    if (boxL.isSelected() && !boxR.isSelected()) {
                        System.out.println("JA....");
                        DatabaseCodes.saveData(benutzer, fileID, wortID, att, value, pos, "luna");
                        
                    }
                    if (boxR.isSelected() && !boxL.isSelected()) {
                        System.out.println("Ne....");
                        DatabaseCodes.saveDataNo(benutzer, fileID, wortID, att, value, pos, "luna");

                    }

                }
            }
            }
        }

    }//GEN-LAST:event_jButton48ActionPerformed

     private void jButtonKompositaSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonKompositaSearchActionPerformed
          // TODO add your handling code here:#
          
          if (benutzer.isLogged()) {

               SwingWorker morphalSuche;
               morphalSuche = new SwingWorker() {
                    @Override
                    protected Object doInBackground() throws Exception {
                         try {
                        //       JPanel trennerContainer = new JPanel();
                              //       JLabel trenner = new JLabel("_____________" + node.toString() + "______________");
                              //       trennerContainer.setLayout(new FlowLayout(FlowLayout.LEFT));

                        //        trennerContainer.add(trenner);
                              //       trennerContainer.setMaximumSize(new Dimension(Integer.MAX_VALUE, trennerContainer.getMinimumSize().height));
                              //       affixGUI.add(trennerContainer);
                              String fugenelem = jTextFieldFugenElement.getText();

                              if (!fugenelem.isEmpty()) {
                                   jPanelKompositaLeft.removeAll();
                                   jButtonKompositaSearch.setEnabled(false);
                                   ExistDatabase database = benutzer.getDatabase();
                                   MorphSearchEngineExist morphSearch = new MorphSearchEngineExist(database);
                                    String pfad = "db/Korpus/fertigGetagged";
                                   ResourceSet result = morphSearch.doRegExSearch("....+" + fugenelem + "....+", "Alle", pfad);
                                   LinkedHashMap<String, ArrayList<HashMap<String, String>>> map = morphSearch.makeTypes(result, jProgressBarKomposita);
                                   System.out.println("size of result of the first lucene search: " + result.getSize());
                                   morphSearch.printStatisticTypeToken(jPanelKompositaLeft, map.size() + "", result.getSize() + "");

                                   Object[] types = map.keySet().toArray();

                                   for (int i = 0; i < types.length; i++) {

                                        int percent = (int) ((i * 100) / types.length);
                                        jProgressBarKomposita.setValue(percent);

                                        String word = (String) types[i];
                                        ArrayList list = map.get(word);
                                       System.out.println("for: " + word);
                                        String []array = word.split(fugenelem);
                                        String first = array[0];
                                        String second = array[1];
                                                                                                                
                                        ResourceSet resultDeepFirst = morphSearch.doRegExSearch(first, "Alle", pfad);
                                        ResourceSet resultDeepSecond = morphSearch.doRegExSearch(second, "Alle", pfad);
                                       

                                        if (resultDeepFirst.getSize() > 1 && resultDeepSecond.getSize() > 1) {
                                           
                                             morphSearch.printToGUIStichwort(word, list, jPanelKompositaLeft, jPanelKompositaRight);
                                             System.out.println(word);
                                             
                                           /*  
                                             LinkedHashMap<String, ArrayList<Element>> mapDeepFirst = morphSearch.makeTypes(resultDeepFirst, jProgressBarKomposita);
                                             LinkedHashMap<String, ArrayList<Element>> mapDeepSecond = morphSearch.makeTypes(resultDeepSecond, jProgressBarKomposita);
                                             Object[] typesDeepFrist = mapDeepFirst.keySet().toArray();

                                             for (int y = 0; y < typesDeepFrist.length; y++) {

                                                  int percentDeepFrist = (int) ((y * 100) / typesDeepFrist.length);
                                                  jProgressBarKomposita.setValue(percentDeepFrist);

                                                  String wordDeepFrist = (String) typesDeepFrist[y];
                                                  ArrayList listDeepFirst = mapDeepFirst.get(wordDeepFrist);
                                                //  morphSearch.printToGUIStichwort(wordDeepFrist, listDeepFirst, jPanelKompositaLeft, jPanelKompositaRight);
                                                  System.out.println(wordDeepFrist);
                                                  jPanelKompositaLeft.revalidate();
                                                  jPanelKompositaLeft.repaint();
                                             }
                                             
                                              Object[] typesDeepSecond = mapDeepSecond.keySet().toArray();

                                             for (int y = 0; y < typesDeepSecond.length; y++) {

                                                  int percentDeepSecond = (int) ((y * 100) / typesDeepSecond.length);
                                                  jProgressBarKomposita.setValue(percentDeepSecond);

                                                  String wordDeepSecond = (String) typesDeepSecond[y];
                                                  ArrayList listDeepSecond = mapDeepSecond.get(wordDeepSecond);
                                                 // morphSearch.printToGUIStichwort(wordDeepSecond, listDeepSecond, jPanelKompositaLeft, jPanelKompositaRight);
                                                  System.out.println(wordDeepSecond);
                                                  jPanelKompositaLeft.revalidate();
                                                  jPanelKompositaLeft.repaint();
                                             
                                             }
                                             */

                                        }

                          //          System.out.println(element.getAttribute("id"));
                                        jPanelKompositaLeft.revalidate();
                                        jPanelKompositaLeft.repaint();

                                   }

                                   jProgressBarRegExSuche.setValue(100);
                              } else {
                                   JOptionPane.showMessageDialog(rootPane, "Bitte füllen Sie mindestens ein Feld (RegEx oder Affixe) aus, um"
                                           + " in der Datenbank suchen zu können!");
                              }

                              jScrollPaneKompositaLeft.getVerticalScrollBar().setUnitIncrement(16);
                              jScrollPaneKompositaRight.getVerticalScrollBar().setUnitIncrement(16);
                              jScrollPaneKompositaLeft.validate();
                              jScrollPaneKompositaRight.validate();

                              jButtonKompositaSearch.setEnabled(true);
                         } catch (XMLDBException ex) {
                              Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
                         }
                         return null;
                    }

                    protected void done() {
                         try {
                              System.out.println("Done");
                              get();
                         } catch (ExecutionException e) {
                              e.getCause().printStackTrace();
                              String msg = String.format("Unexpected problem: %s",
                                      e.getCause().toString());
                              JOptionPane.showMessageDialog(rootPane,
                                      msg, "Error", JOptionPane.ERROR_MESSAGE);
                         } catch (InterruptedException e) {
                              // Process e here
                         }
                         jButtonKompositaSearch.setEnabled(true);
                    }
               };
               if (morphalSuche.getState() == StateValue.STARTED) {
                    morphalSuche.cancel(true);
               } else {
                    morphalSuche.execute();
               }
          } else {
               JOptionPane.showMessageDialog(rootPane, "Bitte loggen Sie sich ein, um eine Datei aus der Datenbank öffnen zu können!");
          }


     }//GEN-LAST:event_jButtonKompositaSearchActionPerformed

    private void jButton49ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton49ActionPerformed
        int z = 0;
        String oldRegular = "";
        ArrayList<String> bundle = new ArrayList<String>();

        TreeMap<String, ArrayList<String>> alle = new TreeMap<String, ArrayList<String>>();
        for (Component comp : jPanelRegExStichworte.getComponents()) {
            if (comp instanceof JPanel) {
                JPanel pan = (JPanel) comp;

                for (Component comp2 : pan.getComponents()) {
                    if (comp2 instanceof JLabel) {
                        if (z != 0) {
                            JLabel label = (JLabel) comp2;
                            String word1 = label.getText();
                            String regular = word1.split(" ")[0]; //.toLowerCase();
                            // TODO add your handling code here:
                            if (benutzer.isLogged()) {

                                int leven = DataModels.levenshteinDistance(regular, oldRegular);
                                System.out.println("die Überpfüfung " + regular + " " + oldRegular + " " + leven);
                                if (leven < 4) {

                                    bundle.add(word1);
                                } else {
                                    alle.put(oldRegular, bundle);
                                    bundle = new ArrayList<String>();
                                    bundle.add(word1);
                                }
                                oldRegular = new String(regular);
                            }



                        }
                    }
                }
            }
            z++;
        }


        jPanelRegexKontext.removeAll();
        Iterator it = alle.keySet().iterator();
        while (it.hasNext()) {
            String key = (String) it.next();
            ArrayList<String> bundleDummy = alle.get(key);
            System.out.println("For " + key);
            if (bundleDummy.size() >= 1) {
                JPanelForTypes lemmaPanel = new JPanelForTypes();
                // Formatierung

                lemmaPanel.setLayout(new FlowLayout(FlowLayout.LEFT));
                ButtonGroup grp = new ButtonGroup();
                JLabel ueberschriftText = new JLabel(key + " (" + bundleDummy.size() + ")");
                lemmaPanel.setElements(bundleDummy);
                Font font = ueberschriftText.getFont();
                Font boldFont = new Font(font.getFontName(), Font.BOLD, font.getSize() + 2);
                ueberschriftText.setFont(boldFont);
                lemmaPanel.add(ueberschriftText);
                for (int i = 0; i < bundleDummy.size(); i++) {

                    String string = bundleDummy.get(i);
                    System.out.println("-----------> " + string);

                    JRadioButton boxJa = new JRadioButton(string);
                    
                    boolean boll = false;
                    if (i == 0) {
                        try {
                            boll = DatabaseCodes.lodNachGucken(string.split(" ")[0], benutzer);
                        } catch (XMLDBException ex) {
                            Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        boxJa.setSelected(boll);

                    }
                    lemmaPanel.add(boxJa);
                    grp.add(boxJa);
                    
                    
                }
                JTextField text = new JTextField(bundleDummy.get(bundleDummy.size() - 1).split(" ")[0]);
                JRadioButton mofo = new JRadioButton();
                mofo.setText("Korrektur");
                //mofo.add(text);
                
                grp.add(mofo);
                lemmaPanel.add(mofo);
                lemmaPanel.add(text);
                // lemmaPanel.setMaximumSize(new Dimension(Integer.MAX_VALUE, lemmaPanel.getMinimumSize().height));

                lemmaPanel.revalidate();
                lemmaPanel.repaint();
                jPanelRegexKontext.add(lemmaPanel);
            }
            it.remove(); // avoids a ConcurrentModificationException
        }

        jScrollPaneRegExKontext.repaint();
        jScrollPaneRegExKontext.getVerticalScrollBar().setUnitIncrement(16);
        jScrollPaneRegExKontext.revalidate();
        jButtonSucheRegEx.setEnabled(true);
    }//GEN-LAST:event_jButton49ActionPerformed

    private void jButton50ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton50ActionPerformed
        HashMap<String, ArrayList> hashy = new HashMap<String, ArrayList>();

        for (Component comp : jPanelRegexKontext.getComponents()) {
            //    System.out.println("im Kontext + " +comp.getName());
            if (comp instanceof JPanel) {
                JPanel pzeile = (JPanel) comp;
                ArrayList<String> words = new ArrayList<String>();
                String selected = "";
                // innerhalb einer Zeile
                for (Component comp2 : pzeile.getComponents()) {
                    //          System.out.println("in der Zeile + " +comp2.getName());
                    if (comp2 instanceof JRadioButton) {
                        JRadioButton but = (JRadioButton) comp2;
                        String text = but.getText();
                        if (!text.equals("Korrektur")) {
                            words.add(but.getText());
                        }
                        if (but.isSelected()) {
                            //                System.out.println(but.getText());
                            selected = but.getText().split(" ")[0];
                        }
                        // die Info aus dem Fenster nehmen
                    } else if (comp2 instanceof JTextField) {
                        if (selected.equals("Korrektur")) {
                            JTextField field = (JTextField) comp2;
                            selected = field.getText();
                        }
                    }
                }
                // ende innerhalb einer Zeile
                if (!selected.equals("")) {
                        hashy.put(selected, words);
                }
            }
        }


        Iterator it = hashy.keySet().iterator();
        while (it.hasNext()) {
            String key = (String) it.next();
            ArrayList<String> bundleDummy = hashy.get(key);
            System.out.println(key + " ");
            for (int i = 0; i < bundleDummy.size(); i++) {
                try {
                    String string = bundleDummy.get(i);
                    System.out.println("-------" + string + " ");
                    String stringNormalised = string.split(" ")[0].toLowerCase(); 
                    ExistDatabase database = benutzer.getDatabase();
                    MorphSearchEngineExist morphSearch = new MorphSearchEngineExist(database);
                     String pfad = "db/Korpus/fertigGetagged";
                    ResourceSet result = morphSearch.doRegExSearch(stringNormalised, "Alle", pfad);
                    System.out.println("Die Suche nach:  " + stringNormalised + " " + result.getSize());
                    
                    
                    ResourceIterator itr = result.getIterator();

                    while (itr.hasMoreResources()) {
                        XMLResource resource = (XMLResource) itr.nextResource();
                        Node node = (Node) resource.getContentAsDOM();
                        Element childNode = (Element) node.getFirstChild();
                        String satzNummer = childNode.getAttribute("sen");
                        String fileID = childNode.getAttribute("fileId");
                        String wortID = childNode.getAttribute("id");
                        String pos = childNode.getAttribute("pos");
                        DatabaseCodes.saveAnAttribute(benutzer, fileID, wortID, "lemma", key);
                        System.out.println("stored in the database: " + key + " for "+ childNode.getTextContent()  );

                    }
                } catch (XMLDBException ex) {
                    System.err.println(ex.getLocalizedMessage());
                    Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

    }//GEN-LAST:event_jButton50ActionPerformed

    private void jButtonAnnotationSucheActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnotationSucheActionPerformed
        if (benutzer.isLogged()) {
            jTabbedPaneMorphNavigation.setSelectedIndex(3);
            SwingWorker morphalSuche;
            morphalSuche = new SwingWorker() {
                @Override
                protected Object doInBackground() throws Exception {
                    try {
                        //       JPanel trennerContainer = new JPanel();
                        //       JLabel trenner = new JLabel("_____________" + node.toString() + "______________");
                        //       trennerContainer.setLayout(new FlowLayout(FlowLayout.LEFT));

                        //        trennerContainer.add(trenner);
                        //       trennerContainer.setMaximumSize(new Dimension(Integer.MAX_VALUE, trennerContainer.getMinimumSize().height));
                        //       affixGUI.add(trennerContainer);

                        String prefix = jTextFieldPrefix.getText();
                        String suffix = jTextFieldSuffix.getText();
                        String wortKlasse = jComboBoxWortKlassen.getSelectedItem().toString();
                        jButtonAnnotationSuche.setEnabled(false);
                        if (!prefix.isEmpty() || !suffix.isEmpty()) {
                            jPanelStichworte.removeAll();

                            ExistDatabase database = benutzer.getDatabase();
                            MorphSearchEngineExist morphSearch = new MorphSearchEngineExist(database);
                            jProgressBarMorphal.setValue(20);
                            ResourceSet result = morphSearch.getElementWithSuffix(suffix, wortKlasse);
                            LinkedHashMap<String, ArrayList<HashMap<String, String>>> map = morphSearch.makeTypes(result, jProgressBarMorphal);
                            System.out.println("size of result: " + result.getSize());

                            morphSearch.printStatisticTypeToken(jPanelStichworte, map.size()+"", result.getSize()+"");

                            Object [] types = map.keySet().toArray();

                            for (int i = 0; i < types.length; i++){

                                int percent = (int) ((i * 100) / types.length);
                                jProgressBarMorphal.setValue(percent);

                                String word = (String) types[i];
                                ArrayList <HashMap<String, String>> list = map.get(word);
                                //    System.out.println("for: " + word);

                                //          System.out.println(element.getAttribute("id"));
                                morphSearch.printToGUIStichwort(word, list, jPanelStichworte, affixGUI);
                                jPanelStichworte.revalidate();
                                jPanelStichworte.repaint();

                            }

                            jProgressBarMorphal.setValue(100);
                        } else {
                            JOptionPane.showMessageDialog(rootPane, "Bitte füllen Sie mindestens ein Feld (Prefix oder Suffix) aus, um"
                                + " in der Datenbank suchen zu können!");
                        }
                        /*

                        TreePath[] pathes = Gesamtkorpus.getSelectionModel().getSelectionPaths();
                        for (int i = 0; i < pathes.length; i++) {
                            TreePath treePath = pathes[i];

                            KorpusTreeNode node = (KorpusTreeNode) treePath.getLastPathComponent();
                            System.out.println(node.getID());
                            JPanel trennerContainer = new JPanel();
                            JLabel trenner = new JLabel("_____________" + node.toString() + "______________");
                            trennerContainer.setLayout(new FlowLayout(FlowLayout.LEFT));

                            trennerContainer.add(trenner);
                            trennerContainer.setMaximumSize(new Dimension(Integer.MAX_VALUE, trennerContainer.getMinimumSize().height));
                            affixGUI.add(trennerContainer);

                        }*/
                        // sollte das nicht am Anfang stehen?
                        jScrollPane40.getVerticalScrollBar().setUnitIncrement(16);
                        jScrollPane40.validate();
                        jButtonAnnotationSuche.setEnabled(true);
                    } catch (XMLDBException ex) {
                        Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    return null;
                }
                protected void done() {
                    try {
                        System.out.println("Done");
                        get();
                    } catch (ExecutionException e) {
                        e.getCause().printStackTrace();
                        String msg = String.format("Unexpected problem: %s",
                            e.getCause().toString());
                        JOptionPane.showMessageDialog(rootPane,
                            msg, "Error", JOptionPane.ERROR_MESSAGE);
                    } catch (InterruptedException e) {
                        // Process e here
                    }
                    jButtonSuchenStichworte.setEnabled(true);
                }
            };
            if (morphalSuche.getState() == StateValue.STARTED) {
                morphalSuche.cancel(true);
            } else {
                morphalSuche.execute();
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Bitte loggen Sie sich ein, um eine Datei aus der Datenbank öffnen zu können!");
        }

    }//GEN-LAST:event_jButtonAnnotationSucheActionPerformed

    private void jButtonSuchenStichworteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSuchenStichworteActionPerformed
        if (benutzer.isLogged()) {
            jTabbedPaneMorphNavigation.setSelectedIndex(3);
            SwingWorker morphalSuche;
            morphalSuche = new SwingWorker() {
                @Override
                protected Object doInBackground() throws Exception {
                    try {
                        //       JPanel trennerContainer = new JPanel();
                        //       JLabel trenner = new JLabel("_____________" + node.toString() + "______________");
                        //       trennerContainer.setLayout(new FlowLayout(FlowLayout.LEFT));

                        //        trennerContainer.add(trenner);
                        //       trennerContainer.setMaximumSize(new Dimension(Integer.MAX_VALUE, trennerContainer.getMinimumSize().height));
                        //       affixGUI.add(trennerContainer);

                        String prefix = jTextFieldPrefix.getText();
                        String suffix = jTextFieldSuffix.getText();
                        String wortKlasse = jComboBoxWortKlassen.getSelectedItem().toString();
                        jButtonSuchenStichworte.setEnabled(false);
                        if (!prefix.isEmpty() || !suffix.isEmpty()) {
                            jPanelStichworte.removeAll();

                            ExistDatabase database = benutzer.getDatabase();
                            MorphSearchEngineExist morphSearch = new MorphSearchEngineExist(database);
                            jProgressBarMorphal.setValue(20);
                            ResourceSet result = morphSearch.doSearch(prefix, suffix, wortKlasse);
                            LinkedHashMap<String, ArrayList<HashMap<String, String>>> map = morphSearch.makeTypes(result, jProgressBarMorphal);
                            System.out.println("size of result: " + result.getSize());

                            morphSearch.printStatisticTypeToken(jPanelStichworte, map.size()+"", result.getSize()+"");

                            Object [] types = map.keySet().toArray();

                            for (int i = 0; i < types.length; i++){

                                int percent = (int) ((i * 100) / types.length);
                                jProgressBarMorphal.setValue(percent);

                                String word = (String) types[i];
                                ArrayList<HashMap<String, String>> list = map.get(word);
                                //    System.out.println("for: " + word);

                                //          System.out.println(element.getAttribute("id"));
                                morphSearch.printToGUIStichwort(word, list, jPanelStichworte, affixGUI);
                                jPanelStichworte.revalidate();
                                jPanelStichworte.repaint();

                            }

                            jProgressBarMorphal.setValue(100);
                        } else {
                            JOptionPane.showMessageDialog(rootPane, "Bitte füllen Sie mindestens ein Feld (Prefix oder Suffix) aus, um"
                                + " in der Datenbank suchen zu können!");
                        }
                        /*

                        TreePath[] pathes = Gesamtkorpus.getSelectionModel().getSelectionPaths();
                        for (int i = 0; i < pathes.length; i++) {
                            TreePath treePath = pathes[i];

                            KorpusTreeNode node = (KorpusTreeNode) treePath.getLastPathComponent();
                            System.out.println(node.getID());
                            JPanel trennerContainer = new JPanel();
                            JLabel trenner = new JLabel("_____________" + node.toString() + "______________");
                            trennerContainer.setLayout(new FlowLayout(FlowLayout.LEFT));

                            trennerContainer.add(trenner);
                            trennerContainer.setMaximumSize(new Dimension(Integer.MAX_VALUE, trennerContainer.getMinimumSize().height));
                            affixGUI.add(trennerContainer);

                        }*/
                        // sollte das nicht am Anfang stehen?
                        jScrollPane40.getVerticalScrollBar().setUnitIncrement(16);
                        jScrollPane40.validate();
                        jButtonSuchenStichworte.setEnabled(true);
                    } catch (XMLDBException ex) {
                        Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    return null;
                }
                protected void done() {
                    try {
                        System.out.println("Done");
                        get();
                    } catch (ExecutionException e) {
                        e.getCause().printStackTrace();
                        String msg = String.format("Unexpected problem: %s",
                            e.getCause().toString());
                        JOptionPane.showMessageDialog(rootPane,
                            msg, "Error", JOptionPane.ERROR_MESSAGE);
                    } catch (InterruptedException e) {
                        // Process e here
                    }
                    jButtonSuchenStichworte.setEnabled(true);
                }
            };
            if (morphalSuche.getState() == StateValue.STARTED) {
                morphalSuche.cancel(true);
            } else {
                morphalSuche.execute();
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Bitte loggen Sie sich ein, um eine Datei aus der Datenbank öffnen zu können!");
        }

    }//GEN-LAST:event_jButtonSuchenStichworteActionPerformed

    private void jButton46ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton46ActionPerformed
        if (benutzer.isLogged()){
            // DatabaseGUI.getPOSSort(benutzer.getDatabase(), jComboBoxWortKlassen);
        }
    }//GEN-LAST:event_jButton46ActionPerformed

    private void jButtonSuchenDatabaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSuchenDatabaseActionPerformed
        /*
        if (benutzer.isLogged()) {
            SwingWorker morphalSuche;
            morphalSuche = new SwingWorker() {
                @Override
                protected Object doInBackground() throws Exception {
                    try {

                        //       JPanel trennerContainer = new JPanel();
                        //       JLabel trenner = new JLabel("_____________" + node.toString() + "______________");
                        //       trennerContainer.setLayout(new FlowLayout(FlowLayout.LEFT));

                        //        trennerContainer.add(trenner);
                        //       trennerContainer.setMaximumSize(new Dimension(Integer.MAX_VALUE, trennerContainer.getMinimumSize().height));
                        //       affixGUI.add(trennerContainer);

                        String prefix = jTextFieldPrefix.getText();
                        String suffix = jTextFieldSuffix.getText();
                        jButtonSuchenDatabase.setEnabled(false);
                        if (!prefix.isEmpty() || !suffix.isEmpty()) {
                            affixGUI.removeAll();

                            ExistDatabase database = benutzer.getDatabase();
                            MorphSearchEngineExist morphSearch = new MorphSearchEngineExist(database);
                            ResourceSet result = morphSearch.doSearch(prefix, suffix);

                            System.out.println("size of result: " + result.getSize());
                            String oldWord = "";
                            for (int i = 0; i < (int) result.getSize(); i++) {
                                int percent = (int) ((i * 100) / result.getSize());
                                jProgressBarMorphal.setValue(percent);
                                XMLResource resource = (XMLResource) result.getResource((long) i);
                                Node node = (Node) resource.getContentAsDOM();
                                Element childNode = (Element) node.getFirstChild();
                                String childText = childNode.getTextContent();
                                morphSearch.getContext(childNode, affixGUI, i, oldWord);
                                //    affixGUI.revalidate();
                                //    affixGUI.repaint();
                                //morphSearch.getBasisForm(resource, affixGUI);
                                oldWord = childText;
                            }
                            jProgressBarMorphal.setValue(100);
                        } else {
                            JOptionPane.showMessageDialog(rootPane, "Bitte füllen Sie mindestens ein Feld (Prefix oder Suffix) aus, um"
                                + " in der Datenbank suchen zu können!");
                        }

                        /*

                        TreePath[] pathes = Gesamtkorpus.getSelectionModel().getSelectionPaths();
                        for (int i = 0; i < pathes.length; i++) {
                            TreePath treePath = pathes[i];

                            KorpusTreeNode node = (KorpusTreeNode) treePath.getLastPathComponent();
                            System.out.println(node.getID());
                            JPanel trennerContainer = new JPanel();
                            JLabel trenner = new JLabel("_____________" + node.toString() + "______________");
                            trennerContainer.setLayout(new FlowLayout(FlowLayout.LEFT));

                            trennerContainer.add(trenner);
                            trennerContainer.setMaximumSize(new Dimension(Integer.MAX_VALUE, trennerContainer.getMinimumSize().height));
                            affixGUI.add(trennerContainer);

                        }
                        // sollte das nicht am Anfang stehen?
                        jScrollPane42.getVerticalScrollBar().setUnitIncrement(16);
                        jScrollPane42.validate();
                        jButtonSuchenDatabase.setEnabled(true);
                    } catch (XMLDBException ex) {
                        Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    return null;
                }

                protected void done() {
                    try {
                        System.out.println("Done");
                        get();
                    } catch (ExecutionException e) {
                        e.getCause().printStackTrace();
                        String msg = String.format("Unexpected problem: %s",
                            e.getCause().toString());
                        JOptionPane.showMessageDialog(rootPane,
                            msg, "Error", JOptionPane.ERROR_MESSAGE);
                    } catch (InterruptedException e) {
                        // Process e here
                    }
                    jButtonTaggen.setEnabled(true);
                }
            };

            if (morphalSuche.getState() == StateValue.STARTED) {
                morphalSuche.cancel(true);
            } else {
                morphalSuche.execute();
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Bitte loggen Sie sich ein, um eine Datei aus der Datenbank öffnen zu können!");
        }
        */
    }//GEN-LAST:event_jButtonSuchenDatabaseActionPerformed

    private void jButton33ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton33ActionPerformed
        try {
            String Input = jTextPaneMorph.getText();
            Document doc = new SAXBuilder().build(new StringReader(Input));
            List<?> words = XPath.selectNodes(doc, "//w | //c");
            TrainMatrixXML matrix = new TrainMatrixXML(words);
            matrix.serAllFreqs("pos");
            String alltags = matrix.getAllTags();
            StringTokenizer st = new StringTokenizer(alltags);
            jComboBoxWortKlassen.removeAllItems();
            jComboBoxWortKlassen.addItem("Alle");

            while (st.hasMoreTokens()){
                Object o = (Object)st.nextToken();
                jComboBoxWortKlassen.addItem(o);
            }

        } catch (JDOMException ex) {
            Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showConfirmDialog(rootPane, ex.getMessage());
        } catch (IOException ex) {
            Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton33ActionPerformed

    private void jComboBoxWortKlassenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxWortKlassenActionPerformed

    }//GEN-LAST:event_jComboBoxWortKlassenActionPerformed

    private void jComboBoxAffixArtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxAffixArtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxAffixArtActionPerformed

    private void jButton32ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton32ActionPerformed
        affixGUI.removeAll();
        // affixGUI.setLayout(new GridLayout(1, 1));
        String prefix = jTextFieldPrefix.getText();
        String suffix = jTextFieldSuffix.getText();

        String wortKlasse = jComboBoxWortKlassen.getSelectedItem().toString();
        String affixArt = jComboBoxAffixArt.getSelectedItem().toString();

        TreePath[] pathes = jTree1.getSelectionModel().getSelectionPaths();
        for (int i = 0; i < pathes.length; i++) {
            TreePath treePath = pathes[i];

            KorpusTreeNode node = (KorpusTreeNode) treePath.getLastPathComponent();
            System.out.println(node.toString());
            JPanel trennerContainer = new JPanel();
            JLabel trenner = new JLabel("_____________" + node.toString() + "______________");
            trennerContainer.setLayout(new FlowLayout(FlowLayout.LEFT));

            trennerContainer.add(trenner);
            trennerContainer.setMaximumSize(new Dimension(Integer.MAX_VALUE, trennerContainer.getMinimumSize().height));
            affixGUI.add(trennerContainer);

            try {
                cs = new CountSuffix(node.getXMLText());
                cs.setAffixAndCount(prefix, suffix, null, wortKlasse, affixArt);

                cs.printToGUI(affixGUI);

            } catch (JDOMException jdom) {
                JOptionPane.showConfirmDialog(rootPane, jdom.getMessage());
                System.err.println(jdom.getMessage());

            } catch (IOException ioex) {
                JOptionPane.showConfirmDialog(rootPane, ioex.getMessage());
                System.err.println(ioex.getMessage());
            }

        }
        //  String Input = jTextPaneMorph.getText();
        jScrollPane42.getVerticalScrollBar().setUnitIncrement(16);
        jScrollPane42.validate();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton32ActionPerformed

    private void jButton20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton20ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton20ActionPerformed

    private void jButton43ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton43ActionPerformed
        // TODO add your handling code here:
        for (Component comp : affixGUI.getComponents()) {
            if (comp instanceof JPanel) {
                JPanel pan = (JPanel) comp;
                for (Component comp2 : pan.getComponents()) {
                    if (comp2 instanceof JCheckBox) {
                        JCheckBox box = (JCheckBox) comp2;
                        if (box.isSelected()) {
                            box.setSelected(false);
                        } else {
                            box.setSelected(true);
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_jButton43ActionPerformed

    private void jButton37ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton37ActionPerformed

        // TODO add your handling code here:

        // EditorKit erzeugen
        javax.swing.text.html.HTMLEditorKit eKit = new javax.swing.text.html.HTMLEditorKit();

        // EditorKit setzen
        jTextPane1.setEditorKit(eKit);
        jTextPane1.setText(cs.printExportText());
        jTabbedPaneMorphal.setSelectedIndex(2);
    }//GEN-LAST:event_jButton37ActionPerformed

    private void jButtonMorphalSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMorphalSaveActionPerformed

        ExistDatabase database = benutzer.getDatabase();
        String user = benutzer.getCurrentUser();

        String prefix = jTextFieldPrefix.getText();
        String suffix = jTextFieldSuffix.getText();
        String att = null;
        String value = null;
        if (prefix.equals("") && suffix.equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Entweder das Suffixfeld oder das Prefixfeld muss einen Wert haben, um die Daten speichern zu können!");
        }
        else
        {

            if (prefix.equals("")) {
                if (!suffix.equals("")) {
                    att = "suffix";
                    value = suffix;
                }
            } else if (suffix.equals("")) {
                if (!prefix.equals("")) {
                    att = "prefix";
                    value = prefix;
                }
            }

            for (Component comp : affixGUI.getComponents()) {
                if (comp instanceof zeileGUI) {
                    zeileGUI pan = (zeileGUI) comp;
                    JCheckBox boxL = pan.getMyCheckBoxJa();
                    JCheckBox boxR = pan.getMyCheckBoxNull();
                    String fileID = pan.getFileID();
                    String wortID = pan.getWordID();
                    String pos = pan.getPartofspecch();
                    if (boxL.isSelected() && !boxR.isSelected()){
                        System.out.println("JA...."+pan.getWordID() + " " +pan.getFileID() + " " +pan.getPartofspecch());
                        if (att != null) {
                            DatabaseCodes.saveData(benutzer, fileID, wortID, att, value, pos, user);
                        }
                    }
                    if (boxR.isSelected() && !boxL.isSelected()){
                        System.out.println("Ne...."+pan.getWordID() + " " +pan.getFileID() + " " +pan.getPartofspecch());
                        DatabaseCodes.saveDataNo(benutzer, fileID, wortID, att, value, pos, user);

                    }

                }
            }
            JOptionPane.showMessageDialog(null, "Die Ergebnisse wurden gespeichert!");

            /*
            for (Component comp : affixGUI.getComponents()) {
                if (comp instanceof JPanel) {
                    JPanel pan = (JPanel) comp;
                    for (Component comp2 : pan.getComponents()) {
                        if (comp2 instanceof JCheckBox) {
                            JCheckBox box = (JCheckBox) comp2;
                            if (box.isSelected()) {
                                System.out.println(box.getName() + " " + pan.getName());
                                String wortID = box.getName();
                                String fileID = pan.getName();

                                if (att != null) {
                                    String xQuerry = " xquery version \"3.0\"; "
                                    + " for $w in collection(\"/db/Korpus/fertigGetagged\")//w[@id=\"" + wortID + "\" and base-uri(.)=\"" + fileID + "\"]"
                                    + " return update insert attribute " + att + " {'" + value + "'} into $w ";

                                    String pfad2 = "db/Korpus/fertigGetagged";

                                    ResourceSet resultNeu = database.executeXQuery(pfad2, xQuerry);

                                    String xQuerry2 = " xquery version \"3.0\"; "
                                    + " for $w in collection(\"/db/Korpus/fertigGetagged\")//w[@id=\"" + wortID + "\" and base-uri(.)=\"" + fileID + "\"]"
                                    + " return update insert attribute user {'" + user + "'} into $w ";

                                    ResourceSet resultNeu2 = database.executeXQuery(pfad2, xQuerry2);
                                    JOptionPane.showMessageDialog(null, "Die Ergebnisse wurden gespeichert!");
                                }
                            }
                        }
                    }
                }
            }
            */
        }
    }//GEN-LAST:event_jButtonMorphalSaveActionPerformed

    private void jButton31ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton31ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton31ActionPerformed

    private void jButton30ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton30ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton30ActionPerformed

    private void GesamtkorpusMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GesamtkorpusMousePressed
        // TODO add your handling code here:

        int selRow = Gesamtkorpus.getRowForLocation(evt.getX(), evt.getY());
        TreePath selPath = Gesamtkorpus.getPathForLocation(evt.getX(), evt.getY());
        if(selRow != -1) {
            if(evt.getClickCount() == 1) {
                System.out.println("Ein Click");
            }
            else if(evt.getClickCount() == 2) {
                // myDoubleClick(selRow, selPath);
                System.out.println("Double Click" + selRow +" ---- "+ selPath);
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) selPath.getLastPathComponent();

                if (node.isLeaf()) {
                    KorpusTreeNode korpusNode = (KorpusTreeNode)node;
                    String id = korpusNode.getID();
                    String datei;

                    try {
                        benutzer.getDatabase().setCollection("db/Korpus/fertigGetagged");
                        datei = openFileFromDatabaseWithID(id, benutzer.getDatabase());
                        jTextPaneMorph.setText(datei);
                        benutzer.getDatabase().cleanup();

                    } catch (XMLDBException ex) {
                        Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (TransformerConfigurationException ex) {
                        Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (TransformerException ex) {
                        Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    jTabbedPaneMorphNavigation.setSelectedIndex(2);
                }
            }
        }

    }//GEN-LAST:event_GesamtkorpusMousePressed

    private void jTree1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTree1MousePressed
        // TODO add your handling code here:
        int selRow = jTree1.getRowForLocation(evt.getX(), evt.getY());
        TreePath selPath = jTree1.getPathForLocation(evt.getX(), evt.getY());
        if(selRow != -1) {
            if(evt.getClickCount() == 1) {
                System.out.println("Ein Click");
            }
            else if(evt.getClickCount() == 2) {
                // myDoubleClick(selRow, selPath);
                System.out.println("Double Click" + selRow +" ---- "+ selPath);
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) selPath.getLastPathComponent();

                if (node.isLeaf()) {
                    KorpusTreeNode korpusNode = (KorpusTreeNode)node;

                    String xml = korpusNode.getXMLText();
                    jTextPaneMorph.setText(xml);
                    jTabbedPaneMorphNavigation.setSelectedIndex(1);
                }
            }
        }

    }//GEN-LAST:event_jTree1MousePressed

    private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField5ActionPerformed

    private void jButtonSaveModelPOSTrainerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveModelPOSTrainerActionPerformed
        if (benutzer.isLogged()) {
            JLabel label = new JLabel("Geben Sie bitte einen Namen für das Model an!");
            Font font = label.getFont();
            Font boldFont = new Font(font.getFontName(), Font.BOLD, font.getSize() + 2);
            label.setFont(boldFont);

            JPanel showPane = new JPanel();
            BoxLayout box = new BoxLayout(showPane, BoxLayout.Y_AXIS);
            showPane.setLayout(box);

            showPane.add(label);
            JComponent[] inputComponents = new JComponent[]{showPane};

            //"Wählen Sie bitte einen Namen für das Unterkorpus!"
            String name = JOptionPane.showInputDialog(inputComponents);
            if (name != null) {
                Vector vP = new Vector();
                vP.add(jTextPaneSuffix.getText());
                vP.add(jTextPaneGross.getText());
                vP.add(jTextPaneKlein.getText());
                vP.add(jTextPaneWordLength.getText());
                vP.add(jTextPaneTrigrammLeft.getText());
                vP.add(jTextPaneTrigrammMiddle.getText());
                vP.add(jTextPaneBigrammLeft.getText());
                vP.add(jTextPaneBigrammRight.getText());
                vP.add(jTextPaneSatzPositionAnfang.getText());
                vP.add(jTextPaneSatzPositionEnde.getText());
                vP.add(jTextPaneLexikon.getText());
                vP.add(jTextFieldTagset.getText());

                String textP = xmlFromParameter(vP);
                DataModels.putInTheDatabaseWithName(benutzer, "/db/Utilities/Models", textP, name + ".xml");
                JOptionPane.showMessageDialog(rootPane, "Das Model wurde in der Datenbank gespeichert!");
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Bitte loggen Sie sich ein, um eine Datei aus der Datenbank öffnen zu können!");
        }

    }//GEN-LAST:event_jButtonSaveModelPOSTrainerActionPerformed

    private void jButtonLoadModelPOSTrainerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadModelPOSTrainerActionPerformed
        if (benutzer.isLogged()) {
            try {
                Vector<String> model = new Vector<String>();
                ExistDatabase database = benutzer.getDatabase();
                String[] werke = database.getResourses("/db/Utilities/Models");

                JList list = new JList(werke);
                JScrollPane scrollPane = new JScrollPane();
                scrollPane.setSize(new Dimension(400, 400));
                scrollPane.setViewportView(list);
                int answer = JOptionPane.showConfirmDialog(rootPane, scrollPane, "Bitte ein Model auswählen", JOptionPane.OK_CANCEL_OPTION);
                if (answer == 0) {
                    int selected = list.getSelectedIndex();
                    System.out.println(selected);
                    if (selected != -1) {
                        // System.out.println(id);

                        String datei = database.getXmlFile(werke[selected]);
                        org.w3c.dom.Document doc = loadXMLFromString(datei);
                        Element root = doc.getDocumentElement();

                        NodeList liste = root.getElementsByTagName("part");

                        for (int i = 0; i < liste.getLength(); i++) {
                            Node zelle = liste.item(i);
                            Element zell = (Element) zelle;
                            String matrix = zell.getTextContent();
                            model.add(matrix);
                            System.out.println("Added " + zell.getNodeName());
                        }

                        jTextPaneSuffix.setText(model.get(0));
                        jTextPaneGross.setText(model.get(1));
                        jTextPaneKlein.setText(model.get(2));
                        jTextPaneWordLength.setText(model.get(3));
                        jTextPaneTrigrammLeft.setText(model.get(4));
                        jTextPaneTrigrammMiddle.setText(model.get(5));
                        jTextPaneBigrammLeft.setText(model.get(6));
                        jTextPaneBigrammRight.setText(model.get(7));
                        jTextPaneSatzPositionAnfang.setText(model.get(8));
                        jTextPaneSatzPositionEnde.setText(model.get(9));
                        jTextPaneLexikon.setText(model.get(10));
                        jTextFieldTagset.setText(model.get(11));
                        
                        jTabbedPane4.setSelectedIndex(1);
                    }
                }
                database.cleanup();

            } catch (ParserConfigurationException ex) {
                Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SAXException ex) {
                Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
            } catch (TransformerConfigurationException ex) {
                Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
            } catch (TransformerException ex) {
                Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
            } catch (XMLDBException ex) {
                Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
            }

        }



    }//GEN-LAST:event_jButtonLoadModelPOSTrainerActionPerformed

    
    
    
    
    private void jButtonSaveModelPOSTrainerLocalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveModelPOSTrainerLocalActionPerformed
        try {
            ZipOutputStream zipOut = null;
            JFileChooser chooser = new JFileChooser();
            chooser.setAcceptAllFileFilterUsed(false);
            chooser.setDialogTitle("Speichern");
            String DateiEndungenZeigen[] = {".zip"};
            chooser.addChoosableFileFilter(new ExtensionFileFilter(DateiEndungenZeigen, "Luna Corpus POS Trainer model as .zip"));
            chooser.showSaveDialog(null);

            File f = chooser.getSelectedFile();
            String filePath = f.getAbsolutePath();
            zipOut = new ZipOutputStream(new FileOutputStream(filePath + ".zip"));

            byte[] buffer1 = jTextPaneSuffix.getText().getBytes();
            ZipEntry entry1 = new ZipEntry("/part1");
            zipOut.putNextEntry(entry1);
            zipOut.write(buffer1, 0, buffer1.length);
            zipOut.closeEntry();

            byte[] buffer2 = jTextPaneGross.getText().getBytes();
            ZipEntry entry2 = new ZipEntry("/part2");
            zipOut.putNextEntry(entry2);
            zipOut.write(buffer2, 0, buffer2.length);
            zipOut.closeEntry();

            byte[] buffer3 = jTextPaneKlein.getText().getBytes();
            ZipEntry entry3 = new ZipEntry("/part3");
            zipOut.putNextEntry(entry3);
            zipOut.write(buffer3, 0, buffer3.length);
            zipOut.closeEntry();

            byte[] buffer4 = jTextPaneWordLength.getText().getBytes();
            ZipEntry entry4 = new ZipEntry("/part4");
            zipOut.putNextEntry(entry4);
            zipOut.write(buffer4, 0, buffer4.length);
            zipOut.closeEntry();

            byte[] buffer5 = jTextPaneTrigrammLeft.getText().getBytes();
            ZipEntry entry5 = new ZipEntry("/part5");
            zipOut.putNextEntry(entry5);
            zipOut.write(buffer5, 0, buffer5.length);
            zipOut.closeEntry();

            byte[] buffer6 = jTextPaneTrigrammMiddle.getText().getBytes();
            ZipEntry entry6 = new ZipEntry("/part6");
            zipOut.putNextEntry(entry6);
            zipOut.write(buffer6, 0, buffer6.length);
            zipOut.closeEntry();

            byte[] buffer7 = jTextPaneBigrammLeft.getText().getBytes();
            ZipEntry entry7 = new ZipEntry("/part7");
            zipOut.putNextEntry(entry7);
            zipOut.write(buffer7, 0, buffer7.length);
            zipOut.closeEntry();

            byte[] buffer8 = jTextPaneBigrammRight.getText().getBytes();
            ZipEntry entry8 = new ZipEntry("/part8");
            zipOut.putNextEntry(entry8);
            zipOut.write(buffer8, 0, buffer8.length);
            zipOut.closeEntry();

            byte[] buffer9 = jTextPaneSatzPositionAnfang.getText().getBytes();
            ZipEntry entry9 = new ZipEntry("/part9");
            zipOut.putNextEntry(entry9);
            zipOut.write(buffer9, 0, buffer9.length);
            zipOut.closeEntry();

            byte[] buffer10 = jTextPaneSatzPositionEnde.getText().getBytes();
            ZipEntry entry10 = new ZipEntry("/part10");
            zipOut.putNextEntry(entry10);
            zipOut.write(buffer10, 0, buffer10.length);
            zipOut.closeEntry();

            byte[] buffer11 = jTextPaneLexikon.getText().getBytes();
            ZipEntry entry11 = new ZipEntry("/part11");
            zipOut.putNextEntry(entry11);
            zipOut.write(buffer11, 0, buffer11.length);
            zipOut.closeEntry();

            byte[] buffer12 = jTextFieldTagset.getText().getBytes();
            ZipEntry entry12 = new ZipEntry("/part12");
            zipOut.putNextEntry(entry12);
            zipOut.write(buffer12, 0, buffer12.length);
            zipOut.closeEntry();
            zipOut.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonSaveModelPOSTrainerLocalActionPerformed

    private void jButtonLoadModelPOSTrainerLocalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadModelPOSTrainerLocalActionPerformed

        try {
            JFileChooser chooser = new JFileChooser();
            chooser.setAcceptAllFileFilterUsed(false);
            chooser.setDialogTitle("Öffnen");
            String DateiEndungenZeigen[] = {".zip"};
            chooser.addChoosableFileFilter(new ExtensionFileFilter(DateiEndungenZeigen, "Luna Corpus Tools POS-Trainer Models as .zip"));

            chooser.showOpenDialog(null);
            File f = chooser.getSelectedFile();
            ZipFile zipFile = new ZipFile(f.getPath());

            ZipEntry myZipEntry1 = zipFile.getEntry("/part1");
            String file1 = zipEntryToString(myZipEntry1, zipFile);
            jTextPaneSuffix.setText(file1);

            ZipEntry myZipEntry2 = zipFile.getEntry("/part2");
            String file2 = zipEntryToString(myZipEntry2, zipFile);
            jTextPaneGross.setText(file2);

            ZipEntry myZipEntry3 = zipFile.getEntry("/part3");
            String file3 = zipEntryToString(myZipEntry3, zipFile);
            jTextPaneKlein.setText(file3);

            ZipEntry myZipEntry4 = zipFile.getEntry("/part4");
            String file4 = zipEntryToString(myZipEntry4, zipFile);
            jTextPaneWordLength.setText(file4);

            ZipEntry myZipEntry5 = zipFile.getEntry("/part5");
            String file5 = zipEntryToString(myZipEntry5, zipFile);
            jTextPaneTrigrammLeft.setText(file5);
            
            ZipEntry myZipEntry6 = zipFile.getEntry("/part6");
            String file6 = zipEntryToString(myZipEntry6, zipFile);
            jTextPaneTrigrammMiddle.setText(file6);

            ZipEntry myZipEntry7 = zipFile.getEntry("/part7");
            String file7 = zipEntryToString(myZipEntry7, zipFile);
            jTextPaneBigrammLeft.setText(file7);
            
            ZipEntry myZipEntry8 = zipFile.getEntry("/part8");
            String file8 = zipEntryToString(myZipEntry8, zipFile);
            jTextPaneBigrammRight.setText(file8);
            
            ZipEntry myZipEntry9 = zipFile.getEntry("/part9");
            String file9 = zipEntryToString(myZipEntry9, zipFile);
            jTextPaneSatzPositionAnfang.setText(file9);

            ZipEntry myZipEntry10 = zipFile.getEntry("/part10");
            String file10 = zipEntryToString(myZipEntry10, zipFile);
            jTextPaneSatzPositionEnde.setText(file10);
            
            ZipEntry myZipEntry11 = zipFile.getEntry("/part11");
            String file11 = zipEntryToString(myZipEntry11, zipFile);
            jTextPaneLexikon.setText(file11);

            ZipEntry myZipEntry12 = zipFile.getEntry("/part12");
            String file12 = zipEntryToString(myZipEntry12, zipFile);
            jTextFieldTagset.setText(file12);

            jTabbedPane4.setSelectedIndex(1);

        } catch (IOException ex) {
            Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButtonLoadModelPOSTrainerLocalActionPerformed

    private void jButtonTaggenFromModelDatabseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTaggenFromModelDatabseActionPerformed
        if (benutzer.isLogged()) {

            new SwingWorker() {
                @Override
                protected Object doInBackground() throws Exception {
                    NodeList liste = null;
                    try {
                        Vector<String> model = new Vector<String>();
                        ExistDatabase database = benutzer.getDatabase();
                        String[] werke = database.getResourses("/db/Utilities/Models");

                        JList list = new JList(werke);
                        JScrollPane scrollPane = new JScrollPane();
                        scrollPane.setSize(new Dimension(400, 400));
                        scrollPane.setViewportView(list);
                        int answer = JOptionPane.showConfirmDialog(rootPane, scrollPane, "Bitte ein Model auswählen", JOptionPane.OK_CANCEL_OPTION);
                        if (answer == 0) {
                            int selected = list.getSelectedIndex();
                            System.out.println(selected);
                            if (selected != -1) {
                                // System.out.println(id);

                                String datei = database.getXmlFile(werke[selected]);
                                org.w3c.dom.Document doc = loadXMLFromString(datei);
                                Element root = doc.getDocumentElement();

                                liste = root.getElementsByTagName("part");

                            }

                            database.cleanup();

                            jButtonTaggenFromModelDatabse.setEnabled(false);
                            jButtonTaggen.setEnabled(false);
                            jProgressBarTagger.setValue(0);
                            boolean booly[] = new boolean[11];
                            booly[0] = jRadioButtonLexikon.isSelected();
                            booly[1] = jRadioButtonSuffix.isSelected();
                            booly[2] = jRadioButtonGross.isSelected();
                            booly[3] = jRadioButtonKlein.isSelected();
                            booly[4] = jRadioButtonWordLenght.isSelected();
                            booly[5] = jRadioButtonTrigrammLeft.isSelected();
                            booly[6] = jRadioButtonTrigrammRight.isSelected();
                            booly[7] = jRadioButtonBigrammLeft.isSelected();
                            booly[8] = jRadioButtonRight.isSelected();
                            booly[9] = jRadioButtonSatzPositionAnfang.isSelected();
                            booly[10] = jRadioButtonSatzPositionEnde.isSelected();

                            boolean prozessDokumentieren = jRadioButtonTaggingsprozess.isSelected();

                            String suffMat = liste.item(0).getTextContent();
                            String uppMat = liste.item(1).getTextContent();
                            String lowMat = liste.item(2).getTextContent();
                            String wordL = liste.item(3).getTextContent();
                            String triLeft = liste.item(4).getTextContent();
                            String triMiddle = liste.item(5).getTextContent();
                            String biLeft = liste.item(6).getTextContent();
                            String biRight = liste.item(7).getTextContent();
                            String satztA = liste.item(8).getTextContent();
                            String satztE = liste.item(9).getTextContent();
                            String lex = liste.item(10).getTextContent();

                            String Input = jTextPaneTaggerInput.getText();
                            String tagset = liste.item(11).getTextContent();
                            String result = "";
                            Vector vc = null;
                            try {
                                TaggerXML tagger = new TaggerXML(Input, lex, triLeft, triMiddle, suffMat, uppMat, wordL, satztA, satztE, biLeft, biRight, lowMat);
                                tagger.fullTagging("//w | //c ", booly, prozessDokumentieren, tagset, "sen", jProgressBarTagger);
                                result = tagger.getXmlOutput();
                                vc = tagger.getTabelle();
                            } catch (JDOMException e) {
                                System.out.println("IOExeption: Hier ist was schiefgelaufen!");
                                System.out.println(e.getMessage());
                            } catch (IOException e) {
                                System.out.println(e.getMessage());
                            }
                            jTextPaneTaggerOutPut.setText(result);
                            StringBuffer sb = new StringBuffer();
                            for (int i = 0; i < vc.size(); i++) {
                                Vector vtst = (Vector) vc.elementAt(i);
                                sb.append(vtst.toString());
                            }

                            jProgressBarTagger.setValue(100);
                            jTextPane10.setText(sb.toString());
                            jButtonTaggen.setEnabled(true);
                            jButtonTaggenFromModelDatabse.setEnabled(true);
                        }

                    } catch (ParserConfigurationException ex) {
                        Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (SAXException ex) {
                        Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (TransformerConfigurationException ex) {
                        Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (TransformerException ex) {
                        Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (XMLDBException ex) {
                        Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    return null;

                }

                protected void done() {
                    try {
                        System.out.println("Done");
                        get();
                    } catch (ExecutionException e) {
                        e.getCause().printStackTrace();
                        String msg = String.format("Unexpected problem: %s",
                                e.getCause().toString());
                        JOptionPane.showMessageDialog(rootPane,
                                msg, "Error", JOptionPane.ERROR_MESSAGE);
                    } catch (InterruptedException e) {
                        // Process e here
                    }
                    jButtonTaggen.setEnabled(true);
                }
            }.execute();

        } else {
            JOptionPane.showMessageDialog(rootPane, "Bitte loggen Sie sich ein, um eine Datei aus der Datenbank öffnen zu können!");
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonTaggenFromModelDatabseActionPerformed

    private void jButton18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton18ActionPerformed
        String xquerry = " xquery version \"3.0\"; "
                  //       + "declare namespace xsd = \"http://www.tei-c.org/ns/1.0\";"
                         + "  for $w in //title[@type=\"short\"] "
                         + " order by $w "
                         + " return <b id =\"{base-uri($w)}\"> {string ($w)} </b> ";

                String pfad = "db/Korpus/fertigGetagged";
                String datei = openFileFromDatabaseWithXQuerry(pfad, xquerry);
                if (datei != null){
                    jTextPaneTextForLDA.setText(datei);
                }
    }//GEN-LAST:event_jButton18ActionPerformed

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        try {
            String xmlFile = jTextPaneTextForLDA.getText();
            Document doc = new SAXBuilder().build(new StringReader(xmlFile));

            List wANDc = XPath.selectNodes(doc, "//w");
            int gesamt = wANDc.size();
            String[] words = new String[gesamt];
            for (int i = 0; i < gesamt; i++) {
                //   System.out.println("Bearbeitung der Elemente!"); 
                org.jdom2.Element e = (org.jdom2.Element) wANDc.get(i); 
                words[i] = e.getText();
                int barWert = i * 100 / gesamt;
                // bar.setValue(barWert);
            } // the end of the wcit for
            
            
         int numberOfTopics = Integer.parseInt(jTextFieldNumberOfTopics.getText());
         int numberOfIterations = Integer.parseInt(jTextFieldNumberOfIterations.getText());
              // Begin by importing documents from text to feature sequences
        ArrayList<Pipe> pipeList = new ArrayList<Pipe>();

        // Pipes: lowercase, tokenize, remove stopwords, map to features
        pipeList.add( new CharSequenceLowercase() );
        pipeList.add( new CharSequence2TokenSequence(Pattern.compile("\\p{L}[\\p{L}\\p{P}]+\\p{L}")) );
           
        // I am not sure about using stopwords. And It should be changed not to do it locally anyway....
        pipeList.add( new TokenSequenceRemoveStopwords(new File("/Users/joshgun.sirajzade/Documents/MeineFroschung/Luna/stoplistLetz.txt"), "UTF-8", false, false, false) );
        pipeList.add( new TokenSequence2FeatureSequence() );

        InstanceList instances = new InstanceList (new SerialPipes(pipeList));

       
        instances.addThruPipe(new StringArrayIterator(words));
       
        ParallelTopicModel model = new ParallelTopicModel(numberOfTopics, 1.0, 0.01);

		model.addInstances(instances);

		// Use two parallel samplers, which each look at one half the corpus and combine
		//  statistics after every iteration.
		model.setNumThreads(2);

		// Run the model for 50 iterations and stop (this is for testing only, 
		//  for real applications, use 1000 to 2000 iterations)
		model.setNumIterations(numberOfIterations);
               
		model.estimate();
                StringWriter buffer = new StringWriter();
                PrintWriter writer = new PrintWriter(buffer);
                model.topicXMLReport(writer, 100);
               
                String contents = buffer.toString();
                jTextPaneTopicModelingOutput.setText(contents);
                
                TopicInferencer inf = model.getInferencer();
                
                //double topicProbs = inf.getSampledDistribution(model., numberOfIterations, 10, 10);

        } catch (JDOMException ex) {
            Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
        }

        
    }//GEN-LAST:event_jButton17ActionPerformed

    private void jButtonTagDatabaseFromDBModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTagDatabaseFromDBModelActionPerformed
        new SwingWorker() {
            @Override
            protected Object doInBackground() throws Exception {
                NodeList liste = null;

                Vector<String> model = new Vector<String>();
                ExistDatabase database = benutzer.getDatabase();
                String[] werke = database.getResourses("/db/Utilities/Models");

                JList list = new JList(werke);
                JScrollPane scrollPane = new JScrollPane();
                scrollPane.setSize(new Dimension(400, 400));
                scrollPane.setViewportView(list);
                int answer = JOptionPane.showConfirmDialog(rootPane, scrollPane, "Bitte ein Model auswählen", JOptionPane.OK_CANCEL_OPTION);
                if (answer == 0) {
                    int selected = list.getSelectedIndex();
                    System.out.println(selected);
                    if (selected != -1) {
                        // System.out.println(id);

                        String datei = database.getXmlFile(werke[selected]);
                        org.w3c.dom.Document doc = loadXMLFromString(datei);
                        Element root = doc.getDocumentElement();

                        liste = root.getElementsByTagName("part");

                    }

                    database.cleanup();

                    jButtonTaggen.setEnabled(false);
                    jButtonTaggenDatabase.setEnabled(false);
                    jButtonTaggenFromModelDatabse.setEnabled(false);
                    jButtonTagDatabaseFromDBModel.setEnabled(false);
                    
                    jProgressBarTagger.setValue(0);
                    boolean booly[] = new boolean[11];
                    booly[0] = jRadioButtonLexikon.isSelected();
                    booly[1] = jRadioButtonSuffix.isSelected();
                    booly[2] = jRadioButtonGross.isSelected();
                    booly[3] = jRadioButtonKlein.isSelected();
                    booly[4] = jRadioButtonWordLenght.isSelected();
                    booly[5] = jRadioButtonTrigrammLeft.isSelected();
                    booly[6] = jRadioButtonTrigrammRight.isSelected();
                    booly[7] = jRadioButtonBigrammLeft.isSelected();
                    booly[8] = jRadioButtonRight.isSelected();
                    booly[9] = jRadioButtonSatzPositionAnfang.isSelected();
                    booly[10] = jRadioButtonSatzPositionEnde.isSelected();

                    boolean prozessDokumentieren = jRadioButtonTaggingsprozess.isSelected();

                    String suffMat = liste.item(0).getTextContent();
                    String uppMat = liste.item(1).getTextContent();
                    String lowMat = liste.item(2).getTextContent();
                    String wordL = liste.item(3).getTextContent();
                    String triLeft = liste.item(4).getTextContent();
                    String triMiddle = liste.item(5).getTextContent();
                    String biLeft = liste.item(6).getTextContent();
                    String biRight = liste.item(7).getTextContent();
                    String satztA = liste.item(8).getTextContent();
                    String satztE = liste.item(9).getTextContent();
                    String lex = liste.item(10).getTextContent();


                    String tagset = liste.item(11).getTextContent();
                    String result = "";
                    Vector vc = null;
                    TreePath[] pathes = jTreeZuTaggendeTexte.getSelectionModel().getSelectionPaths();
                    for (int i = 0; i < pathes.length; i++) {
                        TreePath treePath = pathes[i];
                        KorpusTreeNode node = (KorpusTreeNode) treePath.getLastPathComponent();
                        String index = node.getID();
                        System.out.println("Die Datei wird geöffnet: " + index);
                        String collection = "db/Korpus/tokenSentenceStandard";
                        benutzer.getDatabase().setCollection(collection);
                        try {
                            String Input = openFileFromDatabaseWithID(index, benutzer.getDatabase());
                            try {
                                TaggerXML tagger = new TaggerXML(Input, lex, triLeft, triMiddle, suffMat, uppMat, wordL, satztA, satztE, biLeft, biRight, lowMat);
                                tagger.fullTagging("//w | //c ", booly, prozessDokumentieren, tagset, "sen", jProgressBarTagger);
                                result = tagger.getXmlOutput();
                                vc = tagger.getTabelle();
                            } catch (JDOMException e) {
                                System.out.println("IOExeption: Hier ist was schiefgelaufen!");
                                System.out.println(e.getMessage());
                            } catch (IOException e) {
                                System.out.println(e.getMessage());
                            }
                            if (benutzer.isLogged()) {
                                try {
                                    String name = DataModels.getDocumentName(result, "//author/surname", "//title[@type=\"short\"]");
                                    if (name != null) {
                                        DataModels.putInTheDatabaseWithName(benutzer, "/db/Korpus/fertigGetagged", result, name + ".xml");
                                    }
                                } catch (ParserConfigurationException ex) {
                                    Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
                                } catch (SAXException ex) {
                                    Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
                                } catch (IOException ex) {
                                    Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
                                } catch (XPathExpressionException ex) {
                                    Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
                                    JOptionPane.showMessageDialog(rootPane, "Es gibt eine XML-Fehler in der Datei!");
                                }
                            } else {
                                JOptionPane.showMessageDialog(rootPane, "Bitte loggen Sie sich ein, um eine Datei aus der Datenbank öffnen zu können!");
                            }

                            StringBuffer sb = new StringBuffer();
                            for (int y = 0; y < vc.size(); y++) {
                                Vector vtst = (Vector) vc.elementAt(y);
                                sb.append(vtst.toString());
                            }

                            jProgressBarTagger.setValue(100);
                            jTextPane10.setText(sb.toString());

                        } catch (XMLDBException ex) {
                            Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (TransformerConfigurationException ex) {
                            Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (TransformerException ex) {
                            Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
                        }

                    }
                }
                    return null;
                }
            

            protected void done() {
                try {
                    System.out.println("Done");
                    get();
                } catch (ExecutionException e) {
                    e.getCause().printStackTrace();
                    String msg = String.format("Unexpected problem: %s",
                            e.getCause().toString());
                    JOptionPane.showMessageDialog(rootPane,
                            msg, "Error", JOptionPane.ERROR_MESSAGE);
                } catch (InterruptedException e) {
                    // Process e here
                }
                jButtonTaggen.setEnabled(true);
                jButtonTaggenDatabase.setEnabled(true);
                jButtonTaggenFromModelDatabse.setEnabled(true);
                jButtonTagDatabaseFromDBModel.setEnabled(true);
            }
        }.execute();
    }//GEN-LAST:event_jButtonTagDatabaseFromDBModelActionPerformed

    private void jButtonExtractTopicsFromDatabaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExtractTopicsFromDatabaseActionPerformed
        
               
         try {
            ArrayList<String> words = new ArrayList<>();
            TreePath[] pathes = jTreeDatabaseForTopicModelling.getSelectionModel().getSelectionPaths();
            for (int i = 0; i < pathes.length; i++) {

                TreePath treePath = pathes[i];
                KorpusTreeNode node = (KorpusTreeNode) treePath.getLastPathComponent();
                String index = node.getID();
                System.out.println("Die Datei wird geöffnet: " + index);
                String Input = openFileFromDatabaseWithID(index, benutzer.getDatabase());

                Document doc = new SAXBuilder().build(new StringReader(Input));

                List wANDc = XPath.selectNodes(doc, "//w");
                int gesamt = wANDc.size();

                for (int y = 0; y < gesamt; y++) {
                    //   System.out.println("Bearbeitung der Elemente!"); 
                    org.jdom2.Element e = (org.jdom2.Element) wANDc.get(y);
                    words.add(e.getText());
                    int barWert = i * 100 / gesamt;
                    // bar.setValue(barWert);
                } // the end of the wcit for

            } // TODO add your handling code here:

            int numberOfTopics = Integer.parseInt(jTextFieldNumberOfTopics.getText());
            int numberOfIterations = Integer.parseInt(jTextFieldNumberOfIterations.getText());
            // Begin by importing documents from text to feature sequences
            ArrayList<Pipe> pipeList = new ArrayList<Pipe>();

            // Pipes: lowercase, tokenize, remove stopwords, map to features
            pipeList.add(new CharSequenceLowercase());
            pipeList.add(new CharSequence2TokenSequence(Pattern.compile("\\p{L}[\\p{L}\\p{P}]+\\p{L}")));

            // I am not sure about using stopwords. And It should be changed not to do it locally anyway....
            pipeList.add(new TokenSequenceRemoveStopwords(new File("/Users/joshgun.sirajzade/Documents/MeineFroschung/Luna/stoplistLetz.txt"), "UTF-8", false, false, false));
            pipeList.add(new TokenSequence2FeatureSequence());

            InstanceList instances = new InstanceList(new SerialPipes(pipeList));

            String [] arrayWords = (String[]) words.toArray(new String[words.size()]);
            instances.addThruPipe(new StringArrayIterator(arrayWords));

            ParallelTopicModel model = new ParallelTopicModel(numberOfTopics, 1.0, 0.01);

            model.addInstances(instances);

            // Use two parallel samplers, which each look at one half the corpus and combine
            //  statistics after every iteration.
            model.setNumThreads(2);

            // Run the model for 50 iterations and stop (this is for testing only, 
            //  for real applications, use 1000 to 2000 iterations)
            model.setNumIterations(numberOfIterations);

            model.estimate();
            StringWriter buffer = new StringWriter();
            PrintWriter writer = new PrintWriter(buffer);
            model.topicXMLReport(writer, 100);

            String contents = buffer.toString();
            jTextPaneTopicModelingOutput.setText(contents);

            TopicInferencer inf = model.getInferencer();

        } catch (XMLDBException ex) {
            Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
        } catch (TransformerException ex) {
            Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
        } catch (JDOMException ex) {
            Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_jButtonExtractTopicsFromDatabaseActionPerformed

    
     private String getCellValue(Cell cell) {
        String retval = null;
        switch (cell.getCellType()) {
            case Cell.CELL_TYPE_BOOLEAN:
                retval = cell.getBooleanCellValue() + "";
                break;
            case Cell.CELL_TYPE_NUMERIC:
                double dooby = cell.getNumericCellValue();
                retval = String.valueOf((int) dooby);
                break;
            case Cell.CELL_TYPE_STRING:
                retval = cell.getStringCellValue();
                break;
        }
        return retval;
    }
     
     
    private String zipEntryToString(ZipEntry myZipEntry, ZipFile zipFile){
        BufferedInputStream bis = null;
        String Datei = null;
            try {
                bis = new BufferedInputStream(zipFile.getInputStream(myZipEntry));
                byte[] buffer = new byte[bis.available()];
                int avail = bis.available();
                if (avail > 0) {
                    buffer = new byte[avail];
                    bis.read(buffer, 0, avail);
                }
                  Datei = new String(buffer);
                } catch (IOException ex) {
                //...
            } finally {
                try {
                    if (bis != null) {
                        bis.close();
                    }
                } catch (Exception ex) {
                }
            }
        
        return Datei;
    }
    
    
        /**
     * Builds a tree from a given forward slash delimited string.
     * 
     * @param model The tree model
     * @param str The string to build the tree from
     */
    private void buildTreeFromString(final DefaultTreeModel model, final String str, String file) {
        // Fetch the root node
        KorpusTreeNode root = (KorpusTreeNode) model.getRoot();

        // Split the string around the delimiter
        String [] strings = str.split("/");

        // Create a node object to use for traversing down the tree as it 
        // is being created
        KorpusTreeNode node = root;

        // Iterate of the string array
        for (String s: strings) {
            // Look for the index of a node at the current level that
            // has a value equal to the current string
            int index = childIndex(node, s);

            // Index less than 0, this is a new node not currently present on the tree
            if (index < 0) {
                // Add the new node
                KorpusTreeNode newChild = new KorpusTreeNode(s);
                newChild.setXMLText(file);
                node.insert(newChild, node.getChildCount());
                node = newChild;
            }
            // Else, existing node, skip to the next string
            else {
                node = (KorpusTreeNode) node.getChildAt(index);
            }
        }
    }

    /**
     * Returns the index of a child of a given node, provided its string value.
     * 
     * @param node The node to search its children
     * @param childValue The value of the child to compare with
     * @return The index
     */
    private int childIndex(final DefaultMutableTreeNode node, final String childValue) {
        Enumeration<DefaultMutableTreeNode> children = node.children();
        DefaultMutableTreeNode child = null;
        int index = -1;

        while (children.hasMoreElements() && index < 0) {
            child = children.nextElement();

            if (child.getUserObject() != null && childValue.equals(child.getUserObject())) {
                index = node.getIndex(child);
            }
        }

        return index;
    }

    
    private void zipToJtreeModel(File f) throws IOException {
        ZipFile zipFile = new ZipFile(f.getPath());
        Enumeration enu = zipFile.entries();
        DefaultTreeModel model = new DefaultTreeModel(new KorpusTreeNode("Gesamtkorpus lokal"));
        
        while (enu.hasMoreElements()) {
            ZipEntry myZipEntry = (ZipEntry) enu.nextElement();

            if (!myZipEntry.isDirectory()){
                String name = myZipEntry.getName(); 
                String file = zipEntryToString(myZipEntry, zipFile);
                buildTreeFromString(model, name, file);
                System.out.println(name);
            } 
        
        
        }     
            
        jTree1.setModel(model);
        jTree1.repaint();
    }
    
    /*
     * @param args the command line arguments
     */  
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewMDIApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewMDIApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewMDIApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewMDIApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewMDIApplication().setVisible(true);
            }
        });
    }
    private Benutzer benutzer;
    private CountSuffix cs;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTree Gesamtkorpus;
    private javax.swing.JTabbedPane TopicModelingTab;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JPanel affixGUI;
    private javax.swing.JPanel concordanceTab;
    private javax.swing.JMenuItem contentMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JTabbedPane corpusManagementTab;
    private javax.swing.JPanel corpusManagmentTab;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JPanel databaseGUI;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JTextField elementInXmlElement;
    private javax.swing.JPanel extractTopics;
    private javax.swing.JMenu fileMenu;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.JPanel frequencyTab;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton19;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton20;
    private javax.swing.JButton jButton21;
    private javax.swing.JButton jButton22;
    private javax.swing.JButton jButton23;
    private javax.swing.JButton jButton24;
    private javax.swing.JButton jButton25;
    private javax.swing.JButton jButton26;
    private javax.swing.JButton jButton27;
    private javax.swing.JButton jButton28;
    private javax.swing.JButton jButton29;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton30;
    private javax.swing.JButton jButton31;
    private javax.swing.JButton jButton32;
    private javax.swing.JButton jButton33;
    private javax.swing.JButton jButton34;
    private javax.swing.JButton jButton35;
    private javax.swing.JButton jButton36;
    private javax.swing.JButton jButton37;
    private javax.swing.JButton jButton38;
    private javax.swing.JButton jButton39;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton40;
    private javax.swing.JButton jButton41;
    private javax.swing.JButton jButton42;
    private javax.swing.JButton jButton43;
    private javax.swing.JButton jButton44;
    private javax.swing.JButton jButton45;
    private javax.swing.JButton jButton46;
    private javax.swing.JButton jButton47;
    private javax.swing.JButton jButton48;
    private javax.swing.JButton jButton49;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton50;
    private javax.swing.JButton jButton51;
    private javax.swing.JButton jButton52;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JButton jButtonAddRow;
    private javax.swing.JButton jButtonAffixeZeigen;
    private javax.swing.JButton jButtonAnnotationSuche;
    private javax.swing.JButton jButtonDeleteRow;
    private javax.swing.JButton jButtonExtractTopicsFromDatabase;
    private javax.swing.JButton jButtonKompositaSearch;
    private javax.swing.JButton jButtonLoadModelPOSTrainer;
    private javax.swing.JButton jButtonLoadModelPOSTrainerLocal;
    private javax.swing.JButton jButtonMorphalSave;
    private javax.swing.JButton jButtonOpenDatabaseTrainer;
    private javax.swing.JButton jButtonSaveModelPOSTrainer;
    private javax.swing.JButton jButtonSaveModelPOSTrainerLocal;
    private javax.swing.JButton jButtonSpeichernDatenbankStand;
    private javax.swing.JButton jButtonStandardisationExecute;
    private javax.swing.JButton jButtonStandardisationLoad;
    private javax.swing.JButton jButtonStandardisationSave;
    private javax.swing.JButton jButtonStandardisationTest;
    private javax.swing.JButton jButtonSucheRegEx;
    private javax.swing.JButton jButtonSuchenDatabase;
    private javax.swing.JButton jButtonSuchenStichworte;
    private javax.swing.JButton jButtonTagDatabaseFromDBModel;
    private javax.swing.JButton jButtonTaggen;
    private javax.swing.JButton jButtonTaggenDatabase;
    private javax.swing.JButton jButtonTaggenFromModelDatabse;
    private javax.swing.JButton jButtonTrainerToDatabase;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBoxVerwendeDatanbank;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBoxAffixArt;
    private javax.swing.JComboBox jComboBoxSuffix;
    private javax.swing.JComboBox jComboBoxUserName;
    private javax.swing.JComboBox jComboBoxWortKlassen;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList jList1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel32;
    private javax.swing.JPanel jPanel33;
    private javax.swing.JPanel jPanel34;
    private javax.swing.JPanel jPanel35;
    private javax.swing.JPanel jPanel36;
    private javax.swing.JPanel jPanel37;
    private javax.swing.JPanel jPanel38;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel40;
    private javax.swing.JPanel jPanel41;
    private javax.swing.JPanel jPanel42;
    private javax.swing.JPanel jPanel43;
    private javax.swing.JPanel jPanel44;
    private javax.swing.JPanel jPanel45;
    private javax.swing.JPanel jPanel46;
    private javax.swing.JPanel jPanel47;
    private javax.swing.JPanel jPanel48;
    private javax.swing.JPanel jPanel49;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel50;
    private javax.swing.JPanel jPanel51;
    private javax.swing.JPanel jPanel52;
    private javax.swing.JPanel jPanel53;
    private javax.swing.JPanel jPanel54;
    private javax.swing.JPanel jPanel55;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPanel jPanelDatabase;
    private javax.swing.JPanel jPanelKompositaLeft;
    private javax.swing.JPanel jPanelKompositaRight;
    private javax.swing.JPanel jPanelRegExStichworte;
    private javax.swing.JPanel jPanelRegexDetail;
    private javax.swing.JPanel jPanelRegexKontext;
    private javax.swing.JPanel jPanelStichworte;
    private javax.swing.JProgressBar jProgressBarKomposita;
    private javax.swing.JProgressBar jProgressBarMorphal;
    private javax.swing.JProgressBar jProgressBarRegExSuche;
    private javax.swing.JProgressBar jProgressBarSentenceSplitter;
    private javax.swing.JProgressBar jProgressBarStandardisation;
    private javax.swing.JProgressBar jProgressBarTagger;
    private javax.swing.JRadioButton jRadioButtonBigrammLeft;
    private javax.swing.JRadioButton jRadioButtonGross;
    private javax.swing.JRadioButton jRadioButtonKlein;
    private javax.swing.JRadioButton jRadioButtonLexikon;
    private javax.swing.JRadioButton jRadioButtonRight;
    private javax.swing.JRadioButton jRadioButtonSatzPositionAnfang;
    private javax.swing.JRadioButton jRadioButtonSatzPositionEnde;
    private javax.swing.JRadioButton jRadioButtonSuffix;
    private javax.swing.JRadioButton jRadioButtonTaggingsprozess;
    private javax.swing.JRadioButton jRadioButtonTrigrammLeft;
    private javax.swing.JRadioButton jRadioButtonTrigrammRight;
    private javax.swing.JRadioButton jRadioButtonWordLenght;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane17;
    private javax.swing.JScrollPane jScrollPane18;
    private javax.swing.JScrollPane jScrollPane19;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane20;
    private javax.swing.JScrollPane jScrollPane21;
    private javax.swing.JScrollPane jScrollPane22;
    private javax.swing.JScrollPane jScrollPane23;
    private javax.swing.JScrollPane jScrollPane24;
    private javax.swing.JScrollPane jScrollPane25;
    private javax.swing.JScrollPane jScrollPane26;
    private javax.swing.JScrollPane jScrollPane27;
    private javax.swing.JScrollPane jScrollPane28;
    private javax.swing.JScrollPane jScrollPane29;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane30;
    private javax.swing.JScrollPane jScrollPane31;
    private javax.swing.JScrollPane jScrollPane32;
    private javax.swing.JScrollPane jScrollPane35;
    private javax.swing.JScrollPane jScrollPane36;
    private javax.swing.JScrollPane jScrollPane37;
    private javax.swing.JScrollPane jScrollPane38;
    private javax.swing.JScrollPane jScrollPane39;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane40;
    private javax.swing.JScrollPane jScrollPane41;
    private javax.swing.JScrollPane jScrollPane42;
    private javax.swing.JScrollPane jScrollPane43;
    private javax.swing.JScrollPane jScrollPane44;
    private javax.swing.JScrollPane jScrollPane45;
    private javax.swing.JScrollPane jScrollPane46;
    private javax.swing.JScrollPane jScrollPane47;
    private javax.swing.JScrollPane jScrollPane48;
    private javax.swing.JScrollPane jScrollPane49;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane50;
    private javax.swing.JScrollPane jScrollPane51;
    private javax.swing.JScrollPane jScrollPane53;
    private javax.swing.JScrollPane jScrollPane54;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JScrollPane jScrollPaneKompositaLeft;
    private javax.swing.JScrollPane jScrollPaneKompositaRight;
    private javax.swing.JScrollPane jScrollPaneRegExKontext;
    private javax.swing.JScrollPane jScrollPaneRegExStichworte;
    private javax.swing.JScrollPane jScrollPaneRegexDetail;
    private javax.swing.JScrollPane jScrollPaneTrainerModelSuffix;
    private javax.swing.JScrollPane jScrollPaneTrainerModelUpperCase;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane10;
    private javax.swing.JSplitPane jSplitPane11;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JSplitPane jSplitPane3;
    private javax.swing.JSplitPane jSplitPane4;
    private javax.swing.JSplitPane jSplitPane5;
    private javax.swing.JSplitPane jSplitPane6;
    private javax.swing.JSplitPane jSplitPane7;
    private javax.swing.JSplitPane jSplitPane8;
    private javax.swing.JSplitPane jSplitPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane10;
    private javax.swing.JTabbedPane jTabbedPane11;
    private javax.swing.JTabbedPane jTabbedPane12;
    private javax.swing.JTabbedPane jTabbedPane13;
    private javax.swing.JTabbedPane jTabbedPane14;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JTabbedPane jTabbedPane4;
    private javax.swing.JTabbedPane jTabbedPane5;
    private javax.swing.JTabbedPane jTabbedPane6;
    private javax.swing.JTabbedPane jTabbedPane7;
    private javax.swing.JTabbedPane jTabbedPane8;
    private javax.swing.JTabbedPane jTabbedPane9;
    private javax.swing.JTabbedPane jTabbedPaneMorphNavigation;
    private javax.swing.JTabbedPane jTabbedPaneMorphal;
    private javax.swing.JTextField jTextFielSatzzeichen;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField5SatzElement;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextFieldBedingtesTrennenXML;
    private javax.swing.JTextField jTextFieldBedingtesZusammensetzenXML;
    private javax.swing.JTextField jTextFieldDelimeters;
    private javax.swing.JTextField jTextFieldDelimetersXML;
    private javax.swing.JTextField jTextFieldFugenElement;
    private javax.swing.JTextField jTextFieldNichtTrennbarePartikel;
    private javax.swing.JTextField jTextFieldNumberOfIterations;
    private javax.swing.JTextField jTextFieldNumberOfTopics;
    private javax.swing.JTextField jTextFieldPOSAttribute;
    private javax.swing.JTextField jTextFieldPrefix;
    private javax.swing.JTextField jTextFieldPrefixSearchAnnations;
    private javax.swing.JTextField jTextFieldPunktToken;
    private javax.swing.JTextField jTextFieldRegEx;
    private javax.swing.JTextField jTextFieldSatzNummerAttr;
    private javax.swing.JTextField jTextFieldSentenceSplitterTextBody;
    private javax.swing.JTextField jTextFieldSentenceSplitterTrenner;
    private javax.swing.JTextField jTextFieldSentenceSplitterXmlElement;
    private javax.swing.JTextField jTextFieldSuffix;
    private javax.swing.JTextField jTextFieldSuffixSearchAnnotations;
    private javax.swing.JTextField jTextFieldSuffixe;
    private javax.swing.JTextField jTextFieldTagset;
    private javax.swing.JTextField jTextFieldTokenElemente;
    private javax.swing.JTextField jTextFieldWortklasseRegex;
    private javax.swing.JTextField jTextFieldWortzeichen;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextPane jTextPane10;
    private javax.swing.JTextPane jTextPane19;
    private javax.swing.JTextPane jTextPane2;
    private javax.swing.JTextPane jTextPane21;
    private javax.swing.JTextPane jTextPane22;
    private javax.swing.JTextPane jTextPane23;
    private javax.swing.JTextPane jTextPane24;
    private javax.swing.JTextPane jTextPane25;
    private javax.swing.JTextPane jTextPane3;
    private javax.swing.JTextPane jTextPane30;
    private javax.swing.JTextPane jTextPane4;
    private javax.swing.JTextPane jTextPane5;
    private javax.swing.JTextPane jTextPane6;
    private javax.swing.JTextPane jTextPane7;
    private javax.swing.JTextPane jTextPane8;
    private javax.swing.JTextPane jTextPane9;
    private javax.swing.JTextPane jTextPaneBigrammLeft;
    private javax.swing.JTextPane jTextPaneBigrammRight;
    private javax.swing.JTextPane jTextPaneGross;
    private javax.swing.JTextPane jTextPaneKlein;
    private javax.swing.JTextPane jTextPaneLexikon;
    private javax.swing.JTextPane jTextPaneMorph;
    private javax.swing.JTextPane jTextPaneSatzPositionAnfang;
    private javax.swing.JTextPane jTextPaneSatzPositionEnde;
    private javax.swing.JTextPane jTextPaneSentenceSplitter;
    private javax.swing.JTextPane jTextPaneSentenceSplitterOutput;
    private javax.swing.JTextPane jTextPaneStandardisationInput;
    private javax.swing.JTextPane jTextPaneStandardisationOutput;
    private javax.swing.JTextPane jTextPaneSuffix;
    private javax.swing.JTextPane jTextPaneTaggerInput;
    private javax.swing.JTextPane jTextPaneTaggerOutPut;
    private javax.swing.JTextPane jTextPaneTextForLDA;
    private javax.swing.JTextPane jTextPaneTokeniserAusgabe;
    private javax.swing.JTextPane jTextPaneTokeniserQuelle;
    private javax.swing.JTextPane jTextPaneTopicModelingOutput;
    private javax.swing.JTextPane jTextPaneTrigrammLeft;
    private javax.swing.JTextPane jTextPaneTrigrammMiddle;
    private javax.swing.JTextPane jTextPaneWordLength;
    private javax.swing.JTextPane jTextPaneXmlTokeniserAusgabe;
    private javax.swing.JTextPane jTextPaneXmlTokeniserQuelle;
    private javax.swing.JTextPane jTextPaneZumTrainieren;
    public javax.swing.JTree jTree1;
    private javax.swing.JTree jTreeDatabaseForTopicModelling;
    private javax.swing.JTree jTreeTrainingsdata;
    private javax.swing.JTree jTreeZuTaggendeTexte;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JPanel morphologicalAnalysisTab;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JPanel plainTextTokenizer;
    private javax.swing.JPanel posTrainerTab;
    private javax.swing.JTable regExForSandard;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JPanel sentenceSplitterTab;
    private javax.swing.JButton splitSentenceButton;
    private javax.swing.JPanel standardisationTab;
    private javax.swing.JPanel taggerTab;
    private javax.swing.JTabbedPane tokenizerTab;
    private javax.swing.JProgressBar trainerProgressBar;
    private javax.swing.JTextField xmlElement;
    private javax.swing.JPanel xmlTextTokenizer;
    // End of variables declaration//GEN-END:variables



private String OpenFile(String[]endungen, String endungBeschreibung) throws IOException{
        JFileChooser chooser = new JFileChooser();
        chooser.setAcceptAllFileFilterUsed(false);
        chooser.setDialogTitle("Öffnen");
        chooser.addChoosableFileFilter(new ExtensionFileFilter(endungen, endungBeschreibung));
               
        chooser.showOpenDialog(null);
        File f = chooser.getSelectedFile();
        FileReader fr = new FileReader(f);
        BufferedReader br;
        br = new BufferedReader(fr);
        String line = null;
        StringBuilder sb = new StringBuilder();
         while (( line = br.readLine()) != null){
          sb.append(line);
          sb.append(System.getProperty("line.separator"));
        }
        return sb.toString();
    }
    
    private boolean SaveProject(Vector<String> stringsFromFields) throws IOException{
       
        boolean retval = false;
        ZipOutputStream zipOut = null;
        JFileChooser chooser = new JFileChooser();
        chooser.setAcceptAllFileFilterUsed(false);
        chooser.setDialogTitle("Speichern");
        String DateiEndungenZeigen[] = {".zip"};
        chooser.addChoosableFileFilter(new ExtensionFileFilter(DateiEndungenZeigen, "Luna CorpusTools Projekte als .zip"));
        chooser.showSaveDialog(null);
        File f = chooser.getSelectedFile();

        if (f != null) {

            try {
                String filePath = f.getPath();

                if (!filePath.toLowerCase().endsWith(DateiEndungenZeigen[0])) {
                    zipOut = new ZipOutputStream(new FileOutputStream(filePath+DateiEndungenZeigen[0]));
                }
                else {
                    zipOut = new ZipOutputStream(new FileOutputStream(filePath));
                }
                retval = doZipForSaveProject(stringsFromFields, zipOut);
            
            } catch (IOException ex) {
                //...
            } finally {
                try {
                    if (zipOut != null) {
                        zipOut.close();
                    }
                } catch (Exception ex) {
                    //...
                }
            }
        } // Das Ende des Chooser ifs
        
        return retval;  
    }
    
     private boolean doZipForSaveProject (Vector DateienStrings, ZipOutputStream zipOut) throws IOException{
        
        for (int i = 0; i < DateienStrings.size(); i++) {
                    String Datei = (String) DateienStrings.elementAt(i);

                    byte[] buffer = Datei.getBytes();

                    ZipEntry ze = new ZipEntry("part" + i + ".txt");

                    zipOut.putNextEntry(ze);
                    zipOut.write(buffer, 0, buffer.length);
                    zipOut.closeEntry();
                }
        return true;
    }
     
     private Vector OpenProject (){
        
        Vector retval = new Vector(); 
        JFileChooser chooser = new JFileChooser();
        chooser.setAcceptAllFileFilterUsed(false);
        chooser.setDialogTitle("Öffnen");
        String DateiEndungenZeigen[] = { ".zip" };
        chooser.addChoosableFileFilter(new ExtensionFileFilter(DateiEndungenZeigen, "Luna ATM Projekte als .zip"));
               
        chooser.showOpenDialog(null);
        File f = chooser.getSelectedFile();
        if (f!=null){
            try {
                retval = doZipFileForOpenProject(f);
            } catch (IOException ex) {
                Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        }
        return retval;
    } // Das Ende der Methode
     private Vector doZipFileForOpenProject(File f) throws IOException{
           Vector retval = new Vector();
            ZipFile zipFile = new ZipFile(f.getPath());
            Enumeration enu = zipFile.entries();

            while (enu.hasMoreElements()) {
                ZipEntry myZipEntry = (ZipEntry) enu.nextElement();
                BufferedInputStream bis = null;
                try {
                    bis = new BufferedInputStream(zipFile.getInputStream(myZipEntry));
                    byte[] buffer = new byte[bis.available()];
                    int avail = bis.available();
                    if (avail > 0) {
                        buffer = new byte[avail];
                        bis.read(buffer, 0, avail);
                    }
                    String Datei = new String(buffer);
                    retval.add(Datei);
                } catch (IOException ex) {
                    //...
                } finally {
                    try {
                        if (bis != null) {
                            bis.close();
                        }
                    } catch (Exception ex) {
                    }
                }
            }
            return retval;
    }
     
     
     
    private String openFileFromDatabaseWithID(String selected, ExistDatabase database) throws XMLDBException, TransformerConfigurationException, TransformerException {
        String datei = null;
        if (selected != null) {
            String korrektId = selected.substring(selected.lastIndexOf("/") + 1);
            System.out.println(korrektId);
            datei = database.getXmlFile(korrektId);
        }
        return datei;
     }
    
     public String showJlistToChoose(ListItemDatabase[] werke) {
        String selected = null;
        JList list = new JList(werke);
        JScrollPane scrollPane = new JScrollPane();
        scrollPane.setSize(new Dimension(400, 400));
        scrollPane.setViewportView(list);
        int answer = JOptionPane.showConfirmDialog(rootPane, scrollPane, "Bitte einen Text auswählen", JOptionPane.OK_CANCEL_OPTION);

        if (answer == 0) {
            int selec = list.getSelectedIndex();
            ListItemDatabase item = werke[selec];
            selected = item.getId();
            System.out.println(selected);
        }
        return selected;
    }
     
     private String openFileFromDatabaseWithXQuerry(String pfad, String xQuerry){
          String datei = null;
            if (benutzer.isLogged()) {
                
            try {
                ExistDatabase database = benutzer.getDatabase();
                ResourceSet result = database.executeXQuery(pfad, xQuerry);
            
                ListItemDatabase werke[] = DatabaseCodes.getFilesArrayFromDatabaseWithXQuerry(result);
       //         Arrays.sort(werke);
                String selected = showJlistToChoose(werke);
                datei = openFileFromDatabaseWithID(selected, database);
                
                database.cleanup();
                
            } catch (TransformerConfigurationException ex) {
                Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
            } catch (TransformerException ex) {
                Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
            } catch (XMLDBException ex) {
                JOptionPane.showMessageDialog(rootPane, ex.getMessage());
                Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            JOptionPane.showMessageDialog(rootPane, "Bitte loggen Sie sich ein, um eine Datei aus der Datenbank öffnen zu können!");
        }
        return datei;
    }
    
        
     private Vector getDataToStore(){
         Vector retval = new Vector();  
            // Zum Speichern des Projekts 
         // Ich habe dafür die Methode SaveFile geschrieben
         // Infos from XML Tokeniser
         String delimeterXML = jTextFieldDelimetersXML.getText();
         String bedingtesZusammenSetzen = jTextFieldBedingtesZusammensetzenXML.getText();
         String bedingtesTrennen = jTextFieldBedingtesTrennenXML.getText();
         String xmlElementXpath = xmlElement.getText();
         String auszuschliessendeXmlElemente = elementInXmlElement.getText();

            // Infos from Sentence Splitter
         String satzTrenner = jTextFieldSentenceSplitterTrenner.getText();
         String textBodyElement = jTextFieldSentenceSplitterTextBody.getText();
         String tokenElemente = jTextFieldSentenceSplitterXmlElement.getText();

            // Infos from Standardisation
         // Stop editieren
         if (regExForSandard.isEditing()) {
              regExForSandard.getCellEditor().stopCellEditing();
         }
         DefaultTableModel tm = (DefaultTableModel) regExForSandard.getModel();
         HashMap hashy = DataModels.TableToHashMap(tm);
         String xmlString = DataModels.HashMapToXMLStandardisation(hashy);
       
         // Infos from POS-Trainer
         String element = jTextFieldTokenElemente.getText();
         String attribute = jTextFieldPOSAttribute.getText();
         String suffixe = jTextFieldSuffixe.getText();
         String Satzelement = jTextField5SatzElement.getText();
         
         retval.add(delimeterXML);
         retval.add(bedingtesZusammenSetzen);
         retval.add(bedingtesTrennen);
         retval.add(xmlElementXpath);
         retval.add(auszuschliessendeXmlElemente);
         retval.add(satzTrenner);
         retval.add(textBodyElement);
         retval.add(tokenElemente);
         retval.add(xmlString);
         retval.add(element);
         retval.add(attribute);
         retval.add(suffixe);
         retval.add(Satzelement);
         return retval;
     }
     
     private void storeDataToDatabase(Vector v){
         
     }
     
     private String xmlFromParameter(Vector v){
         String beginn = "<Parameter>";
         String end = "</Parameter>";
         StringBuilder sb = new StringBuilder();
         sb.append(beginn);
         for (int i = 0; i < v.size(); i++) {
               String value = (String) v.get(i);
               String valueAmpasant = value.replaceAll("&(?!#?[a-z0-9]+;)", "&amp;");
               sb.append("<part n=\"" + i + "\">" + valueAmpasant + "</part> \n");
           }
         sb.append(end);
         return sb.toString();
     }
     
         
     
}